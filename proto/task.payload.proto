syntax = "proto3";

import "google/api/field_behavior.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/any.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/timestamp.proto";


import "task.gorm_db.proto";

package task.service.v1;
option go_package = "./pb";

import "mwitkow/go-proto-validators/validator.proto";

message LoginRequest {
    string username = 1 [(validator.field) = {msg_exists : true}];
    string password = 2 [(validator.field) = {msg_exists : true}];
}

message LoginResponse {
    string access_token = 1;
}

message HealthCheckResponse {
    string message = 1;
}

message Empty {}

message InvalidKeyError {
    string key = 1;
    string message = 2;
}

message SaveTaskRequest {
    uint64 taskID = 1;
    Task task = 3 [(google.api.field_behavior) = OPTIONAL];
    bool isDraft = 2;
}

message SaveTaskResponse {
    bool success = 1;
    Task data = 2;
}

message SetTaskRequest {

    uint64 taskID = 1;
    string action = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Action: 'approve', 'rework', 'reject'"
        }
    ];
    string comment = 3;
    string reasons = 4;
}

message errorBodyResponse {
    bool error = 1;
    uint32 code = 2;
    string message = 3;
    google.protobuf.NullValue data = 4;
}

message SetTaskResponse {
    bool error = 1;
    uint32 code = 2;
    string message = 3;
    Task data = 5;
}

message ListRequest {
    
}

message GetActivityLogsReq{
    string type = 1;
    uint64 taskID = 2;
    int32 page = 3;
    int32 limit = 4;
	string sort = 5;
	string search = 6;
	string dateFrom = 7;
	string dateTo = 8;
	ActivityLogFilter filter = 9;
}

message ActivityLogFilter{
    string command = 1;
    string action = 2;
    string description = 3;
    string username = 4;
    string companyName = 5;
}

message ActivityLog{
    string command = 1;
    string type = 2;
    string action = 3;
    string description = 4;
    string username = 5;
    string companyName  = 6;
    Task task = 7;
    google.protobuf.Timestamp createdAt  = 8;
    uint64 taskID = 9;
}

message GetActivityLogsRes{
    bool error = 1;
    uint32 code = 2;
    string message = 3;
    repeated ActivityLog data = 4;

    message ActivityLogPagination {
        int32 limit = 1;
        int32 page = 2;
        int32 totalRows = 3;   
        int32 totalPages = 4;   
        int32 recordsOnPage = 5;
    }

    ActivityLogPagination pagination = 5;
}

message ListTaskRequest {
    Task task = 1;
    int32 limit = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
		description: "limit data per page. Default value '-1' for disable limit",
	}];
    int32 page = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
		description: "page number to get data. Default value '-1' for disable page",
	}];
    string sort = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
		description: "Order data by column name",
	}];
    
    enum direction {
        DESC = 0;
        ASC = 1;
    }

    direction dir = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
		description: "Order direction",
	}];
    string filter = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
		description: "Create 'AND' queries \n format: [key:value,key:value] \n example: filter=task_id:1,type:Announcement => Where task_id = 1 AND type = 'Announcement' \n Expressions: \n - 'key:value' => 'key = value' \n - 'key:%%value' => 'key LIKE %value%' \n - 'key:%!value' => 'key ILIKE %value%' \n - 'key:>=value' => 'key >= value' \n - 'key:<=value' => 'key <= value' \n - 'key1:>=value1,key2:<=value2' => 'key1 >= value1 AND key2 <= value2' BETWEEN EXAMPLE \n - 'key1.nestedKey1:value' => 'key1->>nestedKey1 = value'",
	}];
    string query = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
		description: "Create 'OR' queries \n format: [key1,key2,key3:value] \n example: query=name,type:Announcement => Where name = 'Announcement' OR type = 'Announcement' \n Expressions: \n - 'key:value' => 'key = value' \n - 'key:%%value' => 'key LIKE %value%' \n - 'key:%!value' => 'key ILIKE %value%' \n - 'key1.nestedKey1:value' => 'key1->>nestedKey1 = value'",
	}];
    string in = 8;
    string filterOr = 9;
    string customOrder = 10;
    string distinctKey = 11;
}

message ListTaskPluckRequest {
    string pluckKey = 1;
    Task task = 2;
    string filter = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
		description: "Create 'AND' queries \n format: [key:value,key:value] \n example: filter=task_id:1,type:Announcement => Where task_id = 1 AND type = 'Announcement' \n Expressions: \n - 'key:value' => 'key = value' \n - 'key:%%value' => 'key LIKE %value%' \n - 'key:%!value' => 'key ILIKE %value%' \n - 'key:>=value' => 'key >= value' \n - 'key:<=value' => 'key <= value' \n - 'key1:>=value1,key2:<=value2' => 'key1 >= value1 AND key2 <= value2' BETWEEN EXAMPLE \n - 'key1.nestedKey1:value' => 'key1->>nestedKey1 = value'",
	}];
    string query = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
		description: "Create 'OR' queries \n format: [key1,key2,key3:value] \n example: query=name,type:Announcement => Where name = 'Announcement' OR type = 'Announcement' \n Expressions: \n - 'key:value' => 'key = value' \n - 'key:%%value' => 'key LIKE %value%' \n - 'key:%!value' => 'key ILIKE %value%' \n - 'key1.nestedKey1:value' => 'key1->>nestedKey1 = value'",
	}];
    string in = 5;
    string filterOr = 6;
    string distinctKey = 7;
}

message ListTaskPluckResponse {
    repeated string data = 1;
}

message Pagination {
    int32 limit = 1;
    int32 page = 2;
}

message PaginationResponse {
    int32 limit = 1;
    int32 page = 2;
    int64 totalRows = 3;   
    int32 totalPages = 4;   
}

message Sort {
    string column = 1;
    string direction = 2;
}

message Search {
    string value = 1;
    string columns = 2;
}

message ListTaskResponse {
    bool error = 1;
    uint32 code = 2;
    string message = 3;
    repeated Task data = 4;
    PaginationResponse pagination = 5;
}

message GraphStatusRequest {
    
    statuses status = 1;
    string service = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
          description: "Service: 'Announcement', 'Company', 'Account', 'Notification'"
        }];
}

message GraphStatusColumnTypeRequest {
    statuses status = 1;
    string service = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
          description: "Service: 'Announcement', 'Company', 'Account', 'Notification'"
        }];
    string column = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "Example: 'status' , 'data.statusLevel'"
    }];
}

message GraphStatusColumnTypeResponse {
    bool error = 1;
    uint32 code = 2;
    string message = 3;
    repeated GraphStatusColumnType data = 4;
}

message GraphStatusColumnType {
    string status = 1;
    string type = 2;
    uint64 total = 3;
}

message GraphStatus {
    statuses status = 1;
    string type = 2;
    uint64 total = 3;
}

message GraphStatusResponse {
    bool error = 1;
    uint32 code = 2;
    string message = 3;
    repeated GraphStatus data = 4;
}

message GraphStepRequest {
    steps step = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "Default all steps"
    }];
    statuses status = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "Default all status, exclude 'Approve' and 'Reject'"
    }];
    string service = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
          description: "Service: 'Announcement', 'Company', 'Account', 'Notification'"
        }];
    bool isIncludeApprove = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "For include data Approve status"
    }];
    bool isIncludeReject = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "For include data Reject status"
    }];
}

message GraphStep {
    steps step = 1;
    string type = 2;
    uint64 total = 3;
}

message GraphStepResponse {
    bool error = 1;
    uint32 code = 2;
    string message = 3;
    repeated GraphStep data = 4;
}

message AssignaTypeIDRequest{
    uint64 taskID = 1;   
    uint64 featureID = 2;
    string type = 3;
}
message AssignaTypeIDResponse {
    bool error = 1;
    uint32 code = 2;
    string message = 3;
}

message GetTaskByTypeIDReq {
    string type = 1;
    uint64 ID = 2;
 }
 
 message GetTaskByTypeIDRes {
     bool found = 1;
     Task data = 2;
 }

 
message RejectBySystemReq {
    uint64 taskID = 1;
    statuses status = 2;
}

message RejectBySystemRes {
    bool success = 1;
    string code = 2;
}

 message GetTaskByIDReq {
    string type = 1;
    uint64 ID = 2;
 }
 
 message GetTaskByIDRes {
     bool found = 1;
     Task data = 2;
 }
