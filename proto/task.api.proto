syntax = "proto3";

import "google/api/annotations.proto";
import "mwitkow/go-proto-validators/validator.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "task.payload.proto";

package task.service.v1;
option go_package = "./pb";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "Task Service";
        version: "0.1";
    };

    schemes: HTTP;
    schemes: HTTPS;
    consumes: "application/json";
    produces: "application/json";
};

service TaskService {
    rpc HealthCheck(Empty) returns (HealthCheckResponse) {
        option (google.api.http) = {
            get: "/api/task/health"
        };
    };

    rpc SaveTaskWithData(SaveTaskRequest) returns (SaveTaskResponse) {};

    rpc SetTask(SetTaskRequest) returns (SetTaskResponse) {
        option (google.api.http) = {
            put: "/api/task/{taskID}"
            body: "*"
        };
    };

    rpc GetListTask(ListTaskRequest) returns (ListTaskResponse) {
        option (google.api.http) = {
            get: "/api/task"
        };
    };

    rpc GetTaskGraphStatus(GraphStatusRequest) returns (GraphStatusResponse) {
        option (google.api.http) = {
            get: "/api/task/graph/status"
        };
    };

    rpc GraphStatusColumnType(GraphStatusColumnTypeRequest) returns (GraphStatusColumnTypeResponse) {
        option (google.api.http) = {
            get: "/api/task/graph/column-type"
        };
    };

    rpc GetTaskGraphStep(GraphStepRequest) returns (GraphStepResponse) {
        option (google.api.http) = {
            get: "/api/task/graph/steps"
        };
    };

    rpc GetListAnnouncement(ListRequest) returns (ListTaskResponse);
    
    rpc AssignTypeID(AssignaTypeIDRequest) returns (AssignaTypeIDResponse);

    rpc GetTaskByTypeID(GetTaskByTypeIDReq) returns (GetTaskByTypeIDRes);

}