syntax = "proto3";

import "google/api/annotations.proto";
// import "mwitkow/go-proto-validators/validator.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/api/httpbody.proto";

import "task.payload.proto";
import "task.payload_ev.proto";

package task.service.v1;
option go_package = "./pb";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "Task Service";
        version: "0.1";
    };

    security_definitions: {
        security: {
                key: "bearer"
                value: {
                type: TYPE_API_KEY
                in: IN_HEADER
                name: "Authorization"
                description: "Authentication token, prefixed by Bearer: Bearer <token>"
            }
        }
    }
    security: {
        security_requirement: {
            key: "bearer"
        }
    }

    schemes: HTTP;
    // schemes: HTTPS;
    consumes: "application/json";
    produces: "application/json";
};

service TaskService {
    rpc SaveTaskWithData(SaveTaskRequest) returns (SaveTaskResponse) {};
    rpc SaveTaskWithDataEV(SaveTaskRequestEV) returns (SaveTaskResponseEV) {};

    rpc GenerateTaskWithWokflow(GenerateTaskWithWokflowRequest) returns (SaveTaskResponse) {};
    rpc SaveTaskWithWorkflow(SaveTaskRequest) returns (SaveTaskResponse) {};

    rpc SetTask(SetTaskRequest) returns (SetTaskResponse) {
        option (google.api.http) = {
            put: "/api/task/{taskID}"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Set status task by action"
            description: "This API is used for set task by action \n Actions: \n - approve \n - rework \n - reject"
        };
    };
    rpc SetTaskEV(SetTaskRequestEV) returns (SetTaskResponseEV) {
        option (google.api.http) = {
            put: "/api/task/{taskID}/ev"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Set status task by action"
            description: "This API is used for set task by action \n Actions: \n - approve \n - rework \n - reject"
        };
    };

    rpc GetListTaskWithToken(ListTaskRequest) returns (ListTaskResponse) {
        option (google.api.http) = {
            get: "/api/task/normal"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get list data task"
            description: "This API is used for get list data task"
        };
    };

    rpc GetListTaskPluck(ListTaskPluckRequest) returns (ListTaskPluckResponse);

    rpc GetListTaskEV(ListTaskRequestEV) returns (ListTaskResponseEV) {
        option (google.api.http) = {
            get: "/api/task"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get list data task"
            description: "This API is used for get list data task"
        };
    };

    rpc GetTaskGraphStatus(GraphStatusRequest) returns (GraphStatusResponse) {
        option (google.api.http) = {
            get: "/api/task/graph/status"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get graph data by status task"
            description: "This API is used for get graph data base on status task"
        };
    };

    rpc GraphStatusColumnType(GraphStatusColumnTypeRequest) returns (GraphStatusColumnTypeResponse) {
        option (google.api.http) = {
            get: "/api/task/graph/column-type"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get graph data by column name"
            description: "This API is used for get graph data base on column name"
        };
    };

    rpc GetTaskGraphStep(GraphStepRequest) returns (GraphStepResponse) {
        option (google.api.http) = {
            get: "/api/task/graph/steps"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get graph data by step task"
            description: "This API is used for get graph data base on step task"
        };
    };

    rpc GetListAnnouncement(ListRequest) returns (ListTaskResponse);
    
    rpc AssignTypeID(AssignaTypeIDRequest) returns (AssignaTypeIDResponse);
    rpc AssignTypeIDEV(AssignaTypeIDRequestEV) returns (AssignaTypeIDResponse);

    rpc GetTaskByID(GetTaskByIDReq) returns (GetTaskByIDRes);
    rpc GetTaskByTypeID(GetTaskByTypeIDReq) returns (GetTaskByTypeIDRes);

    rpc RejectBySystem(RejectBySystemReq) returns (RejectBySystemRes);

    rpc GetActivityLogs(GetActivityLogsReq) returns (GetActivityLogsRes){
        option (google.api.http) = {
            post: "/api/task/activity-logs/{type}"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get activity logs"
            description: "This API is used for get activity logs"
        };
    };

    rpc DownloadActivityLogs(DownloadActivityLogsReq) returns (google.api.HttpBody){
        option (google.api.http) = {
            post: "/api/task/activity-logs/{type}/download/{fileformat}"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Download activity logs"
            description: "This API is used for download activity logs"
        };
    };

    rpc TestLogger(LoggerTestReq) returns (LoggerTestRes){
        option (google.api.http) = {
            post: "/api/task/test/logger"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            // security: {}
        };
    }
}


message LoggerTestReq {
    string message = 1;
}

message LoggerTestRes {
    string message = 1;
}