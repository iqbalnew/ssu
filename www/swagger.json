{
  "swagger": "2.0",
  "info": {
    "title": "Task Service",
    "version": "0.1"
  },
  "tags": [
    {
      "name": "TaskService"
    }
  ],
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/task": {
      "get": {
        "summary": "Get list data task",
        "description": "This API is used for get list data task",
        "operationId": "TaskService_GetListTaskEV",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListTaskResponseEV"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "task.taskID",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "task.type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "task.status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "NullStatus",
              "Pending",
              "Draft",
              "Returned",
              "Approved",
              "Rejected",
              "DeleteRequest",
              "Deleted"
            ],
            "default": "NullStatus"
          },
          {
            "name": "task.step",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "NullStep",
              "Maker",
              "Checker",
              "Signer",
              "Releaser"
            ],
            "default": "NullStep"
          },
          {
            "name": "task.createdByID",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "task.lastApprovedByID",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "task.lastRejectedByID",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "task.data",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "task.comment",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "task.featureID",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "task.isParentActive",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "task.reasons",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "task.lastApprovedByName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "task.lastRejectedByName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "task.updatedByID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "task.updatedByName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "task.createdByName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "task.dataBak",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "task.createdAt",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "task.updatedAt",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "task.deletedAt",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "limit",
            "description": "limit data per page. Default value '-1' for disable limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "page number to get data. Default value '-1' for disable page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "description": "Order data by column name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dir",
            "description": "Order direction",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          },
          {
            "name": "filter",
            "description": "Create 'AND' queries \n format: [key:value,key:value] \n example: filter=task_id:1,type:Announcement =\u003e Where task_id = 1 AND type = 'Announcement' \n Expressions: \n - 'key:value' =\u003e 'key = value' \n - 'key:%%value' =\u003e 'key LIKE %value%' \n - 'key:%!value' =\u003e 'key ILIKE %value%' \n - 'key:\u003e=value' =\u003e 'key \u003e= value' \n - 'key:\u003c=value' =\u003e 'key \u003c= value' \n - 'key1:\u003e=value1,key2:\u003c=value2' =\u003e 'key1 \u003e= value1 AND key2 \u003c= value2' BETWEEN EXAMPLE \n - 'key1.nestedKey1:value' =\u003e 'key1-\u003e\u003enestedKey1 = value'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "description": "Create 'OR' queries \n format: [key1,key2,key3:value] \n example: query=name,type:Announcement =\u003e Where name = 'Announcement' OR type = 'Announcement' \n Expressions: \n - 'key:value' =\u003e 'key = value' \n - 'key:%%value' =\u003e 'key LIKE %value%' \n - 'key:%!value' =\u003e 'key ILIKE %value%' \n - 'key1.nestedKey1:value' =\u003e 'key1-\u003e\u003enestedKey1 = value'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "in",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filterOr",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/api/task/activity-logs/{type}": {
      "post": {
        "summary": "Get activity logs",
        "description": "This API is used for get activity logs",
        "operationId": "TaskService_GetActivityLogs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetActivityLogsRes"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "taskID": {
                  "type": "string",
                  "format": "uint64"
                },
                "page": {
                  "type": "integer",
                  "format": "int32"
                },
                "limit": {
                  "type": "integer",
                  "format": "int32"
                },
                "sort": {
                  "type": "string"
                },
                "search": {
                  "type": "string"
                },
                "dateFrom": {
                  "type": "string"
                },
                "dateTo": {
                  "type": "string"
                },
                "filter": {
                  "$ref": "#/definitions/v1ActivityLogFilter"
                }
              }
            }
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/api/task/graph/column-type": {
      "get": {
        "summary": "Get graph data by column name",
        "description": "This API is used for get graph data base on column name",
        "operationId": "TaskService_GraphStatusColumnType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GraphStatusColumnTypeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "NullStatus",
              "Pending",
              "Draft",
              "Returned",
              "Approved",
              "Rejected",
              "DeleteRequest",
              "Deleted"
            ],
            "default": "NullStatus"
          },
          {
            "name": "service",
            "description": "Service: 'Announcement', 'Company', 'Account', 'Notification'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "column",
            "description": "Example: 'status' , 'data.statusLevel'",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/api/task/graph/status": {
      "get": {
        "summary": "Get graph data by status task",
        "description": "This API is used for get graph data base on status task",
        "operationId": "TaskService_GetTaskGraphStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GraphStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "NullStatus",
              "Pending",
              "Draft",
              "Returned",
              "Approved",
              "Rejected",
              "DeleteRequest",
              "Deleted"
            ],
            "default": "NullStatus"
          },
          {
            "name": "service",
            "description": "Service: 'Announcement', 'Company', 'Account', 'Notification'",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/api/task/graph/steps": {
      "get": {
        "summary": "Get graph data by step task",
        "description": "This API is used for get graph data base on step task",
        "operationId": "TaskService_GetTaskGraphStep",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GraphStepResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "step",
            "description": "Default all steps",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "NullStep",
              "Maker",
              "Checker",
              "Signer",
              "Releaser"
            ],
            "default": "NullStep"
          },
          {
            "name": "status",
            "description": "Default all status, exclude 'Approve' and 'Reject'",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "NullStatus",
              "Pending",
              "Draft",
              "Returned",
              "Approved",
              "Rejected",
              "DeleteRequest",
              "Deleted"
            ],
            "default": "NullStatus"
          },
          {
            "name": "service",
            "description": "Service: 'Announcement', 'Company', 'Account', 'Notification'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "isIncludeApprove",
            "description": "For include data Approve status",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isIncludeReject",
            "description": "For include data Reject status",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/api/task/normal": {
      "get": {
        "summary": "Get list data task",
        "description": "This API is used for get list data task",
        "operationId": "TaskService_GetListTask",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListTaskResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "task.TaskID",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "uint64"
          },
          {
            "name": "task.type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "task.status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "NullStatus",
              "Pending",
              "Draft",
              "Returned",
              "Approved",
              "Rejected",
              "DeleteRequest",
              "Deleted"
            ],
            "default": "NullStatus"
          },
          {
            "name": "task.step",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "NullStep",
              "Maker",
              "Checker",
              "Signer",
              "Releaser"
            ],
            "default": "NullStep"
          },
          {
            "name": "task.createdByID",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "uint64"
          },
          {
            "name": "task.lastApprovedByID",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "uint64"
          },
          {
            "name": "task.lastRejectedByID",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "uint64"
          },
          {
            "name": "task.data",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "task.comment",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "task.featureID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "task.isParentActive",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "task.reasons",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "task.lastApprovedByName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "task.lastRejectedByName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "task.updatedByID",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "uint64"
          },
          {
            "name": "task.updatedByName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "task.createdByName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "task.dataBak",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "task.createdAt",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "task.updatedAt",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "task.deletedAt",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "limit",
            "description": "limit data per page. Default value '-1' for disable limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "page number to get data. Default value '-1' for disable page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "description": "Order data by column name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dir",
            "description": "Order direction",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          },
          {
            "name": "filter",
            "description": "Create 'AND' queries \n format: [key:value,key:value] \n example: filter=task_id:1,type:Announcement =\u003e Where task_id = 1 AND type = 'Announcement' \n Expressions: \n - 'key:value' =\u003e 'key = value' \n - 'key:%%value' =\u003e 'key LIKE %value%' \n - 'key:%!value' =\u003e 'key ILIKE %value%' \n - 'key:\u003e=value' =\u003e 'key \u003e= value' \n - 'key:\u003c=value' =\u003e 'key \u003c= value' \n - 'key1:\u003e=value1,key2:\u003c=value2' =\u003e 'key1 \u003e= value1 AND key2 \u003c= value2' BETWEEN EXAMPLE \n - 'key1.nestedKey1:value' =\u003e 'key1-\u003e\u003enestedKey1 = value'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "description": "Create 'OR' queries \n format: [key1,key2,key3:value] \n example: query=name,type:Announcement =\u003e Where name = 'Announcement' OR type = 'Announcement' \n Expressions: \n - 'key:value' =\u003e 'key = value' \n - 'key:%%value' =\u003e 'key LIKE %value%' \n - 'key:%!value' =\u003e 'key ILIKE %value%' \n - 'key1.nestedKey1:value' =\u003e 'key1-\u003e\u003enestedKey1 = value'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "in",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filterOr",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customOrder",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "distinctKey",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/api/task/test/logger": {
      "post": {
        "operationId": "TaskService_TestLogger",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1LoggerTestRes"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1LoggerTestReq"
            }
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/api/task/{taskID}": {
      "put": {
        "summary": "Set status task by action",
        "description": "This API is used for set task by action \n Actions: \n - approve \n - rework \n - reject",
        "operationId": "TaskService_SetTask",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetTaskResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "taskID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "action": {
                  "type": "string",
                  "description": "Action: 'approve', 'rework', 'reject'"
                },
                "comment": {
                  "type": "string"
                },
                "reasons": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/api/task/{taskID}/ev": {
      "put": {
        "summary": "Set status task by action",
        "description": "This API is used for set task by action \n Actions: \n - approve \n - rework \n - reject",
        "operationId": "TaskService_SetTaskEV",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetTaskResponseEV"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "taskID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "action": {
                  "type": "string",
                  "description": "Action: 'approve', 'rework', 'reject'"
                },
                "comment": {
                  "type": "string"
                },
                "reasons": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    }
  },
  "definitions": {
    "GetActivityLogsResActivityLogPagination": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "totalRows": {
          "type": "integer",
          "format": "int32"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        },
        "recordsOnPage": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1ActivityLog": {
      "type": "object",
      "properties": {
        "command": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "action": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "companyName": {
          "type": "string"
        },
        "task": {
          "$ref": "#/definitions/v1Task"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "taskID": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "v1ActivityLogFilter": {
      "type": "object",
      "properties": {
        "command": {
          "type": "string"
        },
        "action": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "companyName": {
          "type": "string"
        }
      }
    },
    "v1AssignaTypeIDResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "v1GetActivityLogsRes": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ActivityLog"
          }
        },
        "pagination": {
          "$ref": "#/definitions/GetActivityLogsResActivityLogPagination"
        }
      }
    },
    "v1GetTaskByIDRes": {
      "type": "object",
      "properties": {
        "found": {
          "type": "boolean"
        },
        "data": {
          "$ref": "#/definitions/v1Task"
        }
      }
    },
    "v1GetTaskByTypeIDRes": {
      "type": "object",
      "properties": {
        "found": {
          "type": "boolean"
        },
        "data": {
          "$ref": "#/definitions/v1Task"
        }
      }
    },
    "v1GraphStatus": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1statuses"
        },
        "type": {
          "type": "string"
        },
        "total": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "v1GraphStatusColumnType": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "total": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "v1GraphStatusColumnTypeResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1GraphStatusColumnType"
          }
        }
      }
    },
    "v1GraphStatusResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1GraphStatus"
          }
        }
      }
    },
    "v1GraphStep": {
      "type": "object",
      "properties": {
        "step": {
          "$ref": "#/definitions/v1steps"
        },
        "type": {
          "type": "string"
        },
        "total": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "v1GraphStepResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1GraphStep"
          }
        }
      }
    },
    "v1ListTaskPluckResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ListTaskRequestEVdirection": {
      "type": "string",
      "enum": [
        "DESC",
        "ASC"
      ],
      "default": "DESC"
    },
    "v1ListTaskRequestdirection": {
      "type": "string",
      "enum": [
        "DESC",
        "ASC"
      ],
      "default": "DESC"
    },
    "v1ListTaskResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Task"
          }
        },
        "pagination": {
          "$ref": "#/definitions/v1PaginationResponse"
        }
      }
    },
    "v1ListTaskResponseEV": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TaskEV"
          }
        },
        "pagination": {
          "$ref": "#/definitions/v1PaginationResponse"
        }
      }
    },
    "v1LoggerTestReq": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "v1LoggerTestRes": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "v1PaginationResponse": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "totalRows": {
          "type": "string",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1RejectBySystemRes": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "code": {
          "type": "string"
        }
      }
    },
    "v1SaveTaskResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "data": {
          "$ref": "#/definitions/v1Task"
        }
      }
    },
    "v1SaveTaskResponseEV": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "data": {
          "$ref": "#/definitions/v1TaskEV"
        }
      }
    },
    "v1SetTaskResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/v1Task"
        }
      }
    },
    "v1SetTaskResponseEV": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/v1TaskEV"
        }
      }
    },
    "v1Task": {
      "type": "object",
      "properties": {
        "TaskID": {
          "type": "integer",
          "format": "uint64"
        },
        "type": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/v1statuses"
        },
        "step": {
          "$ref": "#/definitions/v1steps"
        },
        "createdByID": {
          "type": "integer",
          "format": "uint64"
        },
        "lastApprovedByID": {
          "type": "integer",
          "format": "uint64"
        },
        "lastRejectedByID": {
          "type": "integer",
          "format": "uint64"
        },
        "data": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "featureID": {
          "type": "string",
          "format": "uint64"
        },
        "childs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Task"
          }
        },
        "isParentActive": {
          "type": "boolean",
          "readOnly": true
        },
        "reasons": {
          "type": "string"
        },
        "lastApprovedByName": {
          "type": "string"
        },
        "lastRejectedByName": {
          "type": "string"
        },
        "updatedByID": {
          "type": "integer",
          "format": "uint64"
        },
        "updatedByName": {
          "type": "string"
        },
        "createdByName": {
          "type": "string"
        },
        "dataBak": {
          "type": "string",
          "readOnly": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "deletedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1TaskEV": {
      "type": "object",
      "properties": {
        "taskID": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/v1statuses"
        },
        "step": {
          "$ref": "#/definitions/v1steps"
        },
        "createdByID": {
          "type": "string"
        },
        "lastApprovedByID": {
          "type": "string"
        },
        "lastRejectedByID": {
          "type": "string"
        },
        "data": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "featureID": {
          "type": "string"
        },
        "childs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TaskEV"
          }
        },
        "isParentActive": {
          "type": "boolean"
        },
        "reasons": {
          "type": "string"
        },
        "lastApprovedByName": {
          "type": "string"
        },
        "lastRejectedByName": {
          "type": "string"
        },
        "updatedByID": {
          "type": "string",
          "format": "uint64"
        },
        "updatedByName": {
          "type": "string"
        },
        "createdByName": {
          "type": "string"
        },
        "dataBak": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "deletedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1statuses": {
      "type": "string",
      "enum": [
        "NullStatus",
        "Pending",
        "Draft",
        "Returned",
        "Approved",
        "Rejected",
        "DeleteRequest",
        "Deleted"
      ],
      "default": "NullStatus"
    },
    "v1steps": {
      "type": "string",
      "enum": [
        "NullStep",
        "Maker",
        "Checker",
        "Signer",
        "Releaser"
      ],
      "default": "NullStep"
    }
  },
  "securityDefinitions": {
    "bearer": {
      "type": "apiKey",
      "description": "Authentication token, prefixed by Bearer: Bearer \u003ctoken\u003e",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "bearer": []
    }
  ]
}
