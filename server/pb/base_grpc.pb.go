// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: base.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoBaseServiceClient is the client API for GoBaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoBaseServiceClient interface {
	HealthCheck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type goBaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoBaseServiceClient(cc grpc.ClientConnInterface) GoBaseServiceClient {
	return &goBaseServiceClient{cc}
}

func (c *goBaseServiceClient) HealthCheck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/go.base.v1.GoBaseService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoBaseServiceServer is the server API for GoBaseService service.
// All implementations must embed UnimplementedGoBaseServiceServer
// for forward compatibility
type GoBaseServiceServer interface {
	HealthCheck(context.Context, *Empty) (*HealthCheckResponse, error)
	mustEmbedUnimplementedGoBaseServiceServer()
}

// UnimplementedGoBaseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGoBaseServiceServer struct {
}

func (UnimplementedGoBaseServiceServer) HealthCheck(context.Context, *Empty) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedGoBaseServiceServer) mustEmbedUnimplementedGoBaseServiceServer() {}

// UnsafeGoBaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoBaseServiceServer will
// result in compilation errors.
type UnsafeGoBaseServiceServer interface {
	mustEmbedUnimplementedGoBaseServiceServer()
}

func RegisterGoBaseServiceServer(s grpc.ServiceRegistrar, srv GoBaseServiceServer) {
	s.RegisterService(&GoBaseService_ServiceDesc, srv)
}

func _GoBaseService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoBaseServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.base.v1.GoBaseService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoBaseServiceServer).HealthCheck(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// GoBaseService_ServiceDesc is the grpc.ServiceDesc for GoBaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoBaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go.base.v1.GoBaseService",
	HandlerType: (*GoBaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _GoBaseService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "base.proto",
}
