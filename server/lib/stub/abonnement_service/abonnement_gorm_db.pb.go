// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.16.1
// source: abonnement_gorm_db.proto

package pb

import (
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username   string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password   string                 `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Abonnement string                 `protobuf:"bytes,4,opt,name=abonnement,proto3" json:"abonnement,omitempty"`
	CreatedAt  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt  *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_abonnement_gorm_db_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_abonnement_gorm_db_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_abonnement_gorm_db_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *User) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *User) GetAbonnement() string {
	if x != nil {
		return x.Abonnement
	}
	return ""
}

func (x *User) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *User) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *User) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

type Abonnement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CompanyID    uint64                 `protobuf:"varint,2,opt,name=companyID,proto3" json:"companyID,omitempty"`
	Amount       string                 `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	DeadlineDate *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=deadlineDate,proto3" json:"deadlineDate,omitempty"`
	Period       string                 `protobuf:"bytes,5,opt,name=period,proto3" json:"period,omitempty"`
	// string mechanismType = 8 [(gorm.field).tag = {not_null: false}];
	// string mechanismValue = 9 [(gorm.field).tag = {not_null: false}];
	// uint64 mechanismAccountID = 10 [(gorm.field).tag = {not_null: false}];
	BillingStatus      string                 `protobuf:"bytes,11,opt,name=billingStatus,proto3" json:"billingStatus,omitempty"`
	CreatedByID        uint64                 `protobuf:"varint,6,opt,name=createdByID,proto3" json:"createdByID,omitempty"`
	UpdatedByID        uint64                 `protobuf:"varint,7,opt,name=updatedByID,proto3" json:"updatedByID,omitempty"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,51,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt          *timestamppb.Timestamp `protobuf:"bytes,52,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	AbonnementAccounts []*AbonnementAccount   `protobuf:"bytes,101,rep,name=abonnementAccounts,proto3" json:"abonnementAccounts,omitempty"`
	AbonnementInvoices []*AbonnementInvoice   `protobuf:"bytes,103,rep,name=abonnementInvoices,proto3" json:"abonnementInvoices,omitempty"`
	AbonnementRetries  []*AbonnementRetry     `protobuf:"bytes,102,rep,name=abonnementRetries,proto3" json:"abonnementRetries,omitempty"`
	CustomAbonnements  []*CustomAbonnement    `protobuf:"bytes,104,rep,name=customAbonnements,proto3" json:"customAbonnements,omitempty"`
}

func (x *Abonnement) Reset() {
	*x = Abonnement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_abonnement_gorm_db_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Abonnement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Abonnement) ProtoMessage() {}

func (x *Abonnement) ProtoReflect() protoreflect.Message {
	mi := &file_abonnement_gorm_db_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Abonnement.ProtoReflect.Descriptor instead.
func (*Abonnement) Descriptor() ([]byte, []int) {
	return file_abonnement_gorm_db_proto_rawDescGZIP(), []int{1}
}

func (x *Abonnement) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Abonnement) GetCompanyID() uint64 {
	if x != nil {
		return x.CompanyID
	}
	return 0
}

func (x *Abonnement) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Abonnement) GetDeadlineDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DeadlineDate
	}
	return nil
}

func (x *Abonnement) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

func (x *Abonnement) GetBillingStatus() string {
	if x != nil {
		return x.BillingStatus
	}
	return ""
}

func (x *Abonnement) GetCreatedByID() uint64 {
	if x != nil {
		return x.CreatedByID
	}
	return 0
}

func (x *Abonnement) GetUpdatedByID() uint64 {
	if x != nil {
		return x.UpdatedByID
	}
	return 0
}

func (x *Abonnement) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Abonnement) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Abonnement) GetAbonnementAccounts() []*AbonnementAccount {
	if x != nil {
		return x.AbonnementAccounts
	}
	return nil
}

func (x *Abonnement) GetAbonnementInvoices() []*AbonnementInvoice {
	if x != nil {
		return x.AbonnementInvoices
	}
	return nil
}

func (x *Abonnement) GetAbonnementRetries() []*AbonnementRetry {
	if x != nil {
		return x.AbonnementRetries
	}
	return nil
}

func (x *Abonnement) GetCustomAbonnements() []*CustomAbonnement {
	if x != nil {
		return x.CustomAbonnements
	}
	return nil
}

type AbonnementRetry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AbonnementID        uint64                 `protobuf:"varint,2,opt,name=abonnementID,proto3" json:"abonnementID,omitempty"`
	Abonnement          *Abonnement            `protobuf:"bytes,102,opt,name=abonnement,proto3" json:"abonnement,omitempty"`
	AbonnementInvoiceID uint64                 `protobuf:"varint,6,opt,name=abonnementInvoiceID,proto3" json:"abonnementInvoiceID,omitempty"`
	AbonnementInvoice   *AbonnementInvoice     `protobuf:"bytes,103,opt,name=abonnementInvoice,proto3" json:"abonnementInvoice,omitempty"`
	RetryDate           *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=retryDate,proto3" json:"retryDate,omitempty"`
	CreatedByID         uint64                 `protobuf:"varint,4,opt,name=createdByID,proto3" json:"createdByID,omitempty"`
	UpdatedByID         uint64                 `protobuf:"varint,5,opt,name=updatedByID,proto3" json:"updatedByID,omitempty"`
	CreatedAt           *timestamppb.Timestamp `protobuf:"bytes,51,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt           *timestamppb.Timestamp `protobuf:"bytes,52,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *AbonnementRetry) Reset() {
	*x = AbonnementRetry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_abonnement_gorm_db_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbonnementRetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbonnementRetry) ProtoMessage() {}

func (x *AbonnementRetry) ProtoReflect() protoreflect.Message {
	mi := &file_abonnement_gorm_db_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbonnementRetry.ProtoReflect.Descriptor instead.
func (*AbonnementRetry) Descriptor() ([]byte, []int) {
	return file_abonnement_gorm_db_proto_rawDescGZIP(), []int{2}
}

func (x *AbonnementRetry) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AbonnementRetry) GetAbonnementID() uint64 {
	if x != nil {
		return x.AbonnementID
	}
	return 0
}

func (x *AbonnementRetry) GetAbonnement() *Abonnement {
	if x != nil {
		return x.Abonnement
	}
	return nil
}

func (x *AbonnementRetry) GetAbonnementInvoiceID() uint64 {
	if x != nil {
		return x.AbonnementInvoiceID
	}
	return 0
}

func (x *AbonnementRetry) GetAbonnementInvoice() *AbonnementInvoice {
	if x != nil {
		return x.AbonnementInvoice
	}
	return nil
}

func (x *AbonnementRetry) GetRetryDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RetryDate
	}
	return nil
}

func (x *AbonnementRetry) GetCreatedByID() uint64 {
	if x != nil {
		return x.CreatedByID
	}
	return 0
}

func (x *AbonnementRetry) GetUpdatedByID() uint64 {
	if x != nil {
		return x.UpdatedByID
	}
	return 0
}

func (x *AbonnementRetry) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AbonnementRetry) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type AbonnementAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AbonnementID    uint64                 `protobuf:"varint,2,opt,name=abonnementID,proto3" json:"abonnementID,omitempty"`
	Abonnement      *Abonnement            `protobuf:"bytes,102,opt,name=abonnement,proto3" json:"abonnement,omitempty"`
	AccountID       uint64                 `protobuf:"varint,3,opt,name=accountID,proto3" json:"accountID,omitempty"`
	AccountAlias    string                 `protobuf:"bytes,7,opt,name=accountAlias,proto3" json:"accountAlias,omitempty"`
	AccountNumber   string                 `protobuf:"bytes,8,opt,name=accountNumber,proto3" json:"accountNumber,omitempty"`
	AccountCurrency string                 `protobuf:"bytes,9,opt,name=accountCurrency,proto3" json:"accountCurrency,omitempty"`
	Order           uint64                 `protobuf:"varint,4,opt,name=order,proto3" json:"order,omitempty"`
	CreatedByID     uint64                 `protobuf:"varint,5,opt,name=createdByID,proto3" json:"createdByID,omitempty"`
	UpdatedByID     uint64                 `protobuf:"varint,6,opt,name=updatedByID,proto3" json:"updatedByID,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,51,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,52,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *AbonnementAccount) Reset() {
	*x = AbonnementAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_abonnement_gorm_db_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbonnementAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbonnementAccount) ProtoMessage() {}

func (x *AbonnementAccount) ProtoReflect() protoreflect.Message {
	mi := &file_abonnement_gorm_db_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbonnementAccount.ProtoReflect.Descriptor instead.
func (*AbonnementAccount) Descriptor() ([]byte, []int) {
	return file_abonnement_gorm_db_proto_rawDescGZIP(), []int{3}
}

func (x *AbonnementAccount) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AbonnementAccount) GetAbonnementID() uint64 {
	if x != nil {
		return x.AbonnementID
	}
	return 0
}

func (x *AbonnementAccount) GetAbonnement() *Abonnement {
	if x != nil {
		return x.Abonnement
	}
	return nil
}

func (x *AbonnementAccount) GetAccountID() uint64 {
	if x != nil {
		return x.AccountID
	}
	return 0
}

func (x *AbonnementAccount) GetAccountAlias() string {
	if x != nil {
		return x.AccountAlias
	}
	return ""
}

func (x *AbonnementAccount) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *AbonnementAccount) GetAccountCurrency() string {
	if x != nil {
		return x.AccountCurrency
	}
	return ""
}

func (x *AbonnementAccount) GetOrder() uint64 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *AbonnementAccount) GetCreatedByID() uint64 {
	if x != nil {
		return x.CreatedByID
	}
	return 0
}

func (x *AbonnementAccount) GetUpdatedByID() uint64 {
	if x != nil {
		return x.UpdatedByID
	}
	return 0
}

func (x *AbonnementAccount) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AbonnementAccount) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type AbonnementInvoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvoiceCode        string                 `protobuf:"bytes,5,opt,name=invoiceCode,proto3" json:"invoiceCode,omitempty"`
	Id                 uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AbonnementID       uint64                 `protobuf:"varint,2,opt,name=abonnementID,proto3" json:"abonnementID,omitempty"`
	Abonnement         *Abonnement            `protobuf:"bytes,102,opt,name=abonnement,proto3" json:"abonnement,omitempty"`
	PeriodCode         string                 `protobuf:"bytes,3,opt,name=periodCode,proto3" json:"periodCode,omitempty"`
	Amount             string                 `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`
	CreditAmount       string                 `protobuf:"bytes,19,opt,name=creditAmount,proto3" json:"creditAmount,omitempty"`
	Status             string                 `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	DeadlineDate       *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=deadlineDate,proto3" json:"deadlineDate,omitempty"`
	AccountID          uint64                 `protobuf:"varint,9,opt,name=accountID,proto3" json:"accountID,omitempty"`
	AccountAlias       string                 `protobuf:"bytes,10,opt,name=accountAlias,proto3" json:"accountAlias,omitempty"`
	AccountNumber      string                 `protobuf:"bytes,11,opt,name=accountNumber,proto3" json:"accountNumber,omitempty"`
	AccountCurrency    string                 `protobuf:"bytes,12,opt,name=accountCurrency,proto3" json:"accountCurrency,omitempty"`
	EsbExternalID      string                 `protobuf:"bytes,18,opt,name=esbExternalID,proto3" json:"esbExternalID,omitempty"`
	EsbJournalSeq      string                 `protobuf:"bytes,13,opt,name=esbJournalSeq,proto3" json:"esbJournalSeq,omitempty"`
	EsbResponseCode    string                 `protobuf:"bytes,14,opt,name=esbResponseCode,proto3" json:"esbResponseCode,omitempty"`
	EsbResponseMessage string                 `protobuf:"bytes,15,opt,name=esbResponseMessage,proto3" json:"esbResponseMessage,omitempty"`
	EsbResponse        string                 `protobuf:"bytes,16,opt,name=esbResponse,proto3" json:"esbResponse,omitempty"`
	RetryCounter       uint64                 `protobuf:"varint,17,opt,name=retryCounter,proto3" json:"retryCounter,omitempty"`
	CreatedByID        uint64                 `protobuf:"varint,4,opt,name=createdByID,proto3" json:"createdByID,omitempty"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,51,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (x *AbonnementInvoice) Reset() {
	*x = AbonnementInvoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_abonnement_gorm_db_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbonnementInvoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbonnementInvoice) ProtoMessage() {}

func (x *AbonnementInvoice) ProtoReflect() protoreflect.Message {
	mi := &file_abonnement_gorm_db_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbonnementInvoice.ProtoReflect.Descriptor instead.
func (*AbonnementInvoice) Descriptor() ([]byte, []int) {
	return file_abonnement_gorm_db_proto_rawDescGZIP(), []int{4}
}

func (x *AbonnementInvoice) GetInvoiceCode() string {
	if x != nil {
		return x.InvoiceCode
	}
	return ""
}

func (x *AbonnementInvoice) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AbonnementInvoice) GetAbonnementID() uint64 {
	if x != nil {
		return x.AbonnementID
	}
	return 0
}

func (x *AbonnementInvoice) GetAbonnement() *Abonnement {
	if x != nil {
		return x.Abonnement
	}
	return nil
}

func (x *AbonnementInvoice) GetPeriodCode() string {
	if x != nil {
		return x.PeriodCode
	}
	return ""
}

func (x *AbonnementInvoice) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *AbonnementInvoice) GetCreditAmount() string {
	if x != nil {
		return x.CreditAmount
	}
	return ""
}

func (x *AbonnementInvoice) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AbonnementInvoice) GetDeadlineDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DeadlineDate
	}
	return nil
}

func (x *AbonnementInvoice) GetAccountID() uint64 {
	if x != nil {
		return x.AccountID
	}
	return 0
}

func (x *AbonnementInvoice) GetAccountAlias() string {
	if x != nil {
		return x.AccountAlias
	}
	return ""
}

func (x *AbonnementInvoice) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *AbonnementInvoice) GetAccountCurrency() string {
	if x != nil {
		return x.AccountCurrency
	}
	return ""
}

func (x *AbonnementInvoice) GetEsbExternalID() string {
	if x != nil {
		return x.EsbExternalID
	}
	return ""
}

func (x *AbonnementInvoice) GetEsbJournalSeq() string {
	if x != nil {
		return x.EsbJournalSeq
	}
	return ""
}

func (x *AbonnementInvoice) GetEsbResponseCode() string {
	if x != nil {
		return x.EsbResponseCode
	}
	return ""
}

func (x *AbonnementInvoice) GetEsbResponseMessage() string {
	if x != nil {
		return x.EsbResponseMessage
	}
	return ""
}

func (x *AbonnementInvoice) GetEsbResponse() string {
	if x != nil {
		return x.EsbResponse
	}
	return ""
}

func (x *AbonnementInvoice) GetRetryCounter() uint64 {
	if x != nil {
		return x.RetryCounter
	}
	return 0
}

func (x *AbonnementInvoice) GetCreatedByID() uint64 {
	if x != nil {
		return x.CreatedByID
	}
	return 0
}

func (x *AbonnementInvoice) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type CustomAbonnement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type         string      `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Value        string      `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Amount       string      `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	AbonnementID uint64      `protobuf:"varint,5,opt,name=abonnementID,proto3" json:"abonnementID,omitempty"`
	Abonnement   *Abonnement `protobuf:"bytes,102,opt,name=abonnement,proto3" json:"abonnement,omitempty"`
}

func (x *CustomAbonnement) Reset() {
	*x = CustomAbonnement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_abonnement_gorm_db_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomAbonnement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomAbonnement) ProtoMessage() {}

func (x *CustomAbonnement) ProtoReflect() protoreflect.Message {
	mi := &file_abonnement_gorm_db_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomAbonnement.ProtoReflect.Descriptor instead.
func (*CustomAbonnement) Descriptor() ([]byte, []int) {
	return file_abonnement_gorm_db_proto_rawDescGZIP(), []int{5}
}

func (x *CustomAbonnement) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CustomAbonnement) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CustomAbonnement) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CustomAbonnement) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *CustomAbonnement) GetAbonnementID() uint64 {
	if x != nil {
		return x.AbonnementID
	}
	return 0
}

func (x *CustomAbonnement) GetAbonnement() *Abonnement {
	if x != nil {
		return x.Abonnement
	}
	return nil
}

var File_abonnement_gorm_db_proto protoreflect.FileDescriptor

var file_abonnement_gorm_db_proto_rawDesc = []byte{
	0x0a, 0x18, 0x61, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x6f, 0x72,
	0x6d, 0x5f, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x61, 0x62, 0x6f, 0x6e,
	0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67,
	0x6f, 0x72, 0x6d, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x72, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9f, 0x02, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x62, 0x6f, 0x6e, 0x6e,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x62, 0x6f,
	0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x9e, 0x07, 0x0a, 0x0a, 0x41, 0x62, 0x6f,
	0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x0a, 0xba, 0xb9, 0x19, 0x06, 0x0a, 0x04, 0x28, 0x01, 0x40, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0xb9, 0x19,
	0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48, 0x0a,
	0x0c, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x08, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x0c, 0x64, 0x65, 0x61, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40,
	0x01, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2c, 0x0a, 0x0d, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x0a, 0x00, 0x52, 0x0d, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x71, 0x0a, 0x12, 0x61, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x65, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x62,
	0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x17, 0xba, 0xb9, 0x19, 0x13, 0x2a, 0x11, 0x0a, 0x0d, 0x61,
	0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x48, 0x01, 0x52, 0x12,
	0x61, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x12, 0x71, 0x0a, 0x12, 0x61, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x67, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x17, 0xba, 0xb9, 0x19, 0x13, 0x2a, 0x11,
	0x0a, 0x0d, 0x61, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x48,
	0x01, 0x52, 0x12, 0x61, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x6d, 0x0a, 0x11, 0x61, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x66, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x61, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x74, 0x72, 0x79, 0x42, 0x17, 0xba, 0xb9, 0x19, 0x13, 0x2a, 0x11,
	0x0a, 0x0d, 0x61, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x48,
	0x01, 0x52, 0x11, 0x61, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x6e, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x62,
	0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x68, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x61, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x62,
	0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x17, 0xba, 0xb9, 0x19, 0x13, 0x2a, 0x11,
	0x0a, 0x0d, 0x61, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x48,
	0x01, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x3a, 0x13, 0xba, 0xb9, 0x19, 0x0f, 0x08, 0x01, 0x1a, 0x0b, 0x61, 0x62,
	0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xe2, 0x04, 0x0a, 0x0f, 0x41, 0x62,
	0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0xba, 0xb9, 0x19, 0x06, 0x0a,
	0x04, 0x28, 0x01, 0x40, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x62, 0x6f,
	0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x61, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x58, 0x0a,
	0x0a, 0x61, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x61, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x6f, 0x6e, 0x6e, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x15, 0xba, 0xb9, 0x19, 0x11, 0x22, 0x0f, 0x0a, 0x0d, 0x61, 0x62,
	0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x52, 0x0a, 0x61, 0x62, 0x6f,
	0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x62, 0x6f, 0x6e, 0x6e,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x61, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x75, 0x0a, 0x11, 0x61, 0x62, 0x6f,
	0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x67,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x6f,
	0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x1d,
	0xba, 0xb9, 0x19, 0x19, 0x22, 0x17, 0x0a, 0x15, 0x61, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x52, 0x11, 0x61,
	0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x72, 0x65, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x12, 0x38,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x3a, 0x1a, 0xba, 0xb9, 0x19, 0x16, 0x08, 0x01, 0x1a, 0x12, 0x61, 0x62, 0x6f, 0x6e,
	0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xaa,
	0x04, 0x0a, 0x11, 0x41, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x0a, 0xba, 0xb9, 0x19, 0x06, 0x0a, 0x04, 0x28, 0x01, 0x40, 0x01, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x61, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x58, 0x0a, 0x0a, 0x61, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x62, 0x6f, 0x6e, 0x6e,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x15, 0xba, 0xb9, 0x19,
	0x11, 0x22, 0x0f, 0x0a, 0x0d, 0x61, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x52, 0x0a, 0x61, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x1b,
	0xba, 0xb9, 0x19, 0x17, 0x08, 0x01, 0x1a, 0x13, 0x61, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x89, 0x07, 0x0a, 0x11,
	0x41, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x0a, 0xba, 0xb9, 0x19, 0x06, 0x0a, 0x04, 0x28, 0x01, 0x40, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x58, 0x0a, 0x0a, 0x61, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x62, 0x6f, 0x6e, 0x6e, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x15, 0xba, 0xb9, 0x19, 0x11,
	0x22, 0x0f, 0x0a, 0x0d, 0x61, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x52, 0x0a, 0x61, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0c, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x73, 0x62, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x49, 0x44, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x73, 0x62, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x73, 0x62,
	0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x71, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x65, 0x73, 0x62, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x71, 0x12,
	0x28, 0x0a, 0x0f, 0x65, 0x73, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x73, 0x62, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x73, 0x62,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x73, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x0b, 0x65, 0x73, 0x62,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d,
	0xba, 0xb9, 0x19, 0x09, 0x0a, 0x07, 0x12, 0x05, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x52, 0x0b, 0x65,
	0x73, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44,
	0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x1b, 0xba, 0xb9, 0x19, 0x17,
	0x08, 0x01, 0x1a, 0x13, 0x61, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x22, 0x89, 0x02, 0x0a, 0x10, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x41, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0xba, 0xb9, 0x19, 0x06, 0x0a, 0x04,
	0x28, 0x01, 0x40, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x62,
	0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x61, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x58,
	0x0a, 0x0a, 0x61, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x66, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x6f, 0x6e, 0x6e,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x15, 0xba, 0xb9, 0x19, 0x11, 0x22, 0x0f, 0x0a, 0x0d, 0x61,
	0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x52, 0x0a, 0x61, 0x62,
	0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x19, 0xba, 0xb9, 0x19, 0x15, 0x08, 0x01,
	0x1a, 0x11, 0x61, 0x62, 0x6f, 0x6e, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_abonnement_gorm_db_proto_rawDescOnce sync.Once
	file_abonnement_gorm_db_proto_rawDescData = file_abonnement_gorm_db_proto_rawDesc
)

func file_abonnement_gorm_db_proto_rawDescGZIP() []byte {
	file_abonnement_gorm_db_proto_rawDescOnce.Do(func() {
		file_abonnement_gorm_db_proto_rawDescData = protoimpl.X.CompressGZIP(file_abonnement_gorm_db_proto_rawDescData)
	})
	return file_abonnement_gorm_db_proto_rawDescData
}

var file_abonnement_gorm_db_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_abonnement_gorm_db_proto_goTypes = []interface{}{
	(*User)(nil),                  // 0: abonnement.service.v1.User
	(*Abonnement)(nil),            // 1: abonnement.service.v1.Abonnement
	(*AbonnementRetry)(nil),       // 2: abonnement.service.v1.AbonnementRetry
	(*AbonnementAccount)(nil),     // 3: abonnement.service.v1.AbonnementAccount
	(*AbonnementInvoice)(nil),     // 4: abonnement.service.v1.AbonnementInvoice
	(*CustomAbonnement)(nil),      // 5: abonnement.service.v1.CustomAbonnement
	(*timestamppb.Timestamp)(nil), // 6: google.protobuf.Timestamp
}
var file_abonnement_gorm_db_proto_depIdxs = []int32{
	6,  // 0: abonnement.service.v1.User.created_at:type_name -> google.protobuf.Timestamp
	6,  // 1: abonnement.service.v1.User.updated_at:type_name -> google.protobuf.Timestamp
	6,  // 2: abonnement.service.v1.User.deleted_at:type_name -> google.protobuf.Timestamp
	6,  // 3: abonnement.service.v1.Abonnement.deadlineDate:type_name -> google.protobuf.Timestamp
	6,  // 4: abonnement.service.v1.Abonnement.createdAt:type_name -> google.protobuf.Timestamp
	6,  // 5: abonnement.service.v1.Abonnement.updatedAt:type_name -> google.protobuf.Timestamp
	3,  // 6: abonnement.service.v1.Abonnement.abonnementAccounts:type_name -> abonnement.service.v1.AbonnementAccount
	4,  // 7: abonnement.service.v1.Abonnement.abonnementInvoices:type_name -> abonnement.service.v1.AbonnementInvoice
	2,  // 8: abonnement.service.v1.Abonnement.abonnementRetries:type_name -> abonnement.service.v1.AbonnementRetry
	5,  // 9: abonnement.service.v1.Abonnement.customAbonnements:type_name -> abonnement.service.v1.CustomAbonnement
	1,  // 10: abonnement.service.v1.AbonnementRetry.abonnement:type_name -> abonnement.service.v1.Abonnement
	4,  // 11: abonnement.service.v1.AbonnementRetry.abonnementInvoice:type_name -> abonnement.service.v1.AbonnementInvoice
	6,  // 12: abonnement.service.v1.AbonnementRetry.retryDate:type_name -> google.protobuf.Timestamp
	6,  // 13: abonnement.service.v1.AbonnementRetry.createdAt:type_name -> google.protobuf.Timestamp
	6,  // 14: abonnement.service.v1.AbonnementRetry.updatedAt:type_name -> google.protobuf.Timestamp
	1,  // 15: abonnement.service.v1.AbonnementAccount.abonnement:type_name -> abonnement.service.v1.Abonnement
	6,  // 16: abonnement.service.v1.AbonnementAccount.createdAt:type_name -> google.protobuf.Timestamp
	6,  // 17: abonnement.service.v1.AbonnementAccount.updatedAt:type_name -> google.protobuf.Timestamp
	1,  // 18: abonnement.service.v1.AbonnementInvoice.abonnement:type_name -> abonnement.service.v1.Abonnement
	6,  // 19: abonnement.service.v1.AbonnementInvoice.deadlineDate:type_name -> google.protobuf.Timestamp
	6,  // 20: abonnement.service.v1.AbonnementInvoice.createdAt:type_name -> google.protobuf.Timestamp
	1,  // 21: abonnement.service.v1.CustomAbonnement.abonnement:type_name -> abonnement.service.v1.Abonnement
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_abonnement_gorm_db_proto_init() }
func file_abonnement_gorm_db_proto_init() {
	if File_abonnement_gorm_db_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_abonnement_gorm_db_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_abonnement_gorm_db_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Abonnement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_abonnement_gorm_db_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbonnementRetry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_abonnement_gorm_db_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbonnementAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_abonnement_gorm_db_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbonnementInvoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_abonnement_gorm_db_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomAbonnement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_abonnement_gorm_db_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_abonnement_gorm_db_proto_goTypes,
		DependencyIndexes: file_abonnement_gorm_db_proto_depIdxs,
		MessageInfos:      file_abonnement_gorm_db_proto_msgTypes,
	}.Build()
	File_abonnement_gorm_db_proto = out.File
	file_abonnement_gorm_db_proto_rawDesc = nil
	file_abonnement_gorm_db_proto_goTypes = nil
	file_abonnement_gorm_db_proto_depIdxs = nil
}
