// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: bulk_transfer_payload.proto

package pb

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BulkTransferData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileDescription       string              `protobuf:"bytes,1,opt,name=fileDescription,proto3" json:"fileDescription,omitempty"`
	FileExtension         FileExtension       `protobuf:"varint,2,opt,name=fileExtension,proto3,enum=bulk_transfer.service.v1.FileExtension" json:"fileExtension,omitempty"`
	TransactionID         string              `protobuf:"bytes,3,opt,name=transactionID,proto3" json:"transactionID,omitempty"`
	TransactionType       TransactionType     `protobuf:"varint,4,opt,name=transactionType,proto3,enum=bulk_transfer.service.v1.TransactionType" json:"transactionType,omitempty"`
	TransactionSchedule   TransactionSchedule `protobuf:"varint,5,opt,name=transactionSchedule,proto3,enum=bulk_transfer.service.v1.TransactionSchedule" json:"transactionSchedule,omitempty"`
	ScheduledAt           string              `protobuf:"bytes,6,opt,name=scheduledAt,proto3" json:"scheduledAt,omitempty"`
	SenderAccount         string              `protobuf:"bytes,7,opt,name=senderAccount,proto3" json:"senderAccount,omitempty"`
	SenderName            string              `protobuf:"bytes,8,opt,name=senderName,proto3" json:"senderName,omitempty"`
	Currency              string              `protobuf:"bytes,9,opt,name=currency,proto3" json:"currency,omitempty"`
	Status                string              `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	Amount                float64             `protobuf:"fixed64,11,opt,name=amount,proto3" json:"amount,omitempty"`
	InitialAmount         float64             `protobuf:"fixed64,12,opt,name=initialAmount,proto3" json:"initialAmount,omitempty"`
	Step                  MassStep            `protobuf:"varint,13,opt,name=step,proto3,enum=bulk_transfer.service.v1.MassStep" json:"step,omitempty"`
	JournalSequence       string              `protobuf:"bytes,14,opt,name=journalSequence,proto3" json:"journalSequence,omitempty"`
	Total                 uint64              `protobuf:"varint,15,opt,name=total,proto3" json:"total,omitempty"`
	TotalValid            uint64              `protobuf:"varint,16,opt,name=totalValid,proto3" json:"totalValid,omitempty"`
	TotalInvalid          uint64              `protobuf:"varint,17,opt,name=totalInvalid,proto3" json:"totalInvalid,omitempty"`
	TotalSuccess          uint64              `protobuf:"varint,18,opt,name=totalSuccess,proto3" json:"totalSuccess,omitempty"`
	TotalFailed           uint64              `protobuf:"varint,19,opt,name=totalFailed,proto3" json:"totalFailed,omitempty"`
	InquiryStatus         MassStatus          `protobuf:"varint,20,opt,name=inquiryStatus,proto3,enum=bulk_transfer.service.v1.MassStatus" json:"inquiryStatus,omitempty"`
	TransferStatus        MassStatus          `protobuf:"varint,21,opt,name=transferStatus,proto3,enum=bulk_transfer.service.v1.MassStatus" json:"transferStatus,omitempty"`
	InquiryStatusCode     string              `protobuf:"bytes,22,opt,name=inquiryStatusCode,proto3" json:"inquiryStatusCode,omitempty"`
	TransferStatusCode    string              `protobuf:"bytes,23,opt,name=transferStatusCode,proto3" json:"transferStatusCode,omitempty"`
	InquiryStatusMessage  string              `protobuf:"bytes,24,opt,name=inquiryStatusMessage,proto3" json:"inquiryStatusMessage,omitempty"`
	TransferStatusMessage string              `protobuf:"bytes,25,opt,name=transferStatusMessage,proto3" json:"transferStatusMessage,omitempty"`
	UploadFileName        string              `protobuf:"bytes,26,opt,name=uploadFileName,proto3" json:"uploadFileName,omitempty"`
	FtpInquiryFileName    string              `protobuf:"bytes,27,opt,name=ftpInquiryFileName,proto3" json:"ftpInquiryFileName,omitempty"`
	FtpTransferFileName   string              `protobuf:"bytes,28,opt,name=ftpTransferFileName,proto3" json:"ftpTransferFileName,omitempty"`
	InquiryResult         *InquiryResult      `protobuf:"bytes,29,opt,name=inquiryResult,proto3" json:"inquiryResult,omitempty"`
	TransferResult        *TransferResult     `protobuf:"bytes,30,opt,name=transferResult,proto3" json:"transferResult,omitempty"`
	Fee                   float64             `protobuf:"fixed64,31,opt,name=fee,proto3" json:"fee,omitempty"`
	TotalFee              float64             `protobuf:"fixed64,32,opt,name=totalFee,proto3" json:"totalFee,omitempty"`
	FeeTransferSuccess    bool                `protobuf:"varint,33,opt,name=feeTransferSuccess,proto3" json:"feeTransferSuccess,omitempty"`
	FeeJournalSequence    string              `protobuf:"bytes,34,opt,name=feeJournalSequence,proto3" json:"feeJournalSequence,omitempty"`
	RoleIDs               []uint64            `protobuf:"varint,35,rep,packed,name=RoleIDs,proto3" json:"RoleIDs,omitempty"`
	TransactionServiceID  uint64              `protobuf:"varint,36,opt,name=transactionServiceID,proto3" json:"transactionServiceID,omitempty"`
}

func (x *BulkTransferData) Reset() {
	*x = BulkTransferData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkTransferData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkTransferData) ProtoMessage() {}

func (x *BulkTransferData) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkTransferData.ProtoReflect.Descriptor instead.
func (*BulkTransferData) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{0}
}

func (x *BulkTransferData) GetFileDescription() string {
	if x != nil {
		return x.FileDescription
	}
	return ""
}

func (x *BulkTransferData) GetFileExtension() FileExtension {
	if x != nil {
		return x.FileExtension
	}
	return FileExtension_NullExtension
}

func (x *BulkTransferData) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

func (x *BulkTransferData) GetTransactionType() TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return TransactionType_NullTransactionType
}

func (x *BulkTransferData) GetTransactionSchedule() TransactionSchedule {
	if x != nil {
		return x.TransactionSchedule
	}
	return TransactionSchedule_NullTransactionSchedule
}

func (x *BulkTransferData) GetScheduledAt() string {
	if x != nil {
		return x.ScheduledAt
	}
	return ""
}

func (x *BulkTransferData) GetSenderAccount() string {
	if x != nil {
		return x.SenderAccount
	}
	return ""
}

func (x *BulkTransferData) GetSenderName() string {
	if x != nil {
		return x.SenderName
	}
	return ""
}

func (x *BulkTransferData) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BulkTransferData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BulkTransferData) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *BulkTransferData) GetInitialAmount() float64 {
	if x != nil {
		return x.InitialAmount
	}
	return 0
}

func (x *BulkTransferData) GetStep() MassStep {
	if x != nil {
		return x.Step
	}
	return MassStep_NullMassStep
}

func (x *BulkTransferData) GetJournalSequence() string {
	if x != nil {
		return x.JournalSequence
	}
	return ""
}

func (x *BulkTransferData) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *BulkTransferData) GetTotalValid() uint64 {
	if x != nil {
		return x.TotalValid
	}
	return 0
}

func (x *BulkTransferData) GetTotalInvalid() uint64 {
	if x != nil {
		return x.TotalInvalid
	}
	return 0
}

func (x *BulkTransferData) GetTotalSuccess() uint64 {
	if x != nil {
		return x.TotalSuccess
	}
	return 0
}

func (x *BulkTransferData) GetTotalFailed() uint64 {
	if x != nil {
		return x.TotalFailed
	}
	return 0
}

func (x *BulkTransferData) GetInquiryStatus() MassStatus {
	if x != nil {
		return x.InquiryStatus
	}
	return MassStatus_NullMassStatus
}

func (x *BulkTransferData) GetTransferStatus() MassStatus {
	if x != nil {
		return x.TransferStatus
	}
	return MassStatus_NullMassStatus
}

func (x *BulkTransferData) GetInquiryStatusCode() string {
	if x != nil {
		return x.InquiryStatusCode
	}
	return ""
}

func (x *BulkTransferData) GetTransferStatusCode() string {
	if x != nil {
		return x.TransferStatusCode
	}
	return ""
}

func (x *BulkTransferData) GetInquiryStatusMessage() string {
	if x != nil {
		return x.InquiryStatusMessage
	}
	return ""
}

func (x *BulkTransferData) GetTransferStatusMessage() string {
	if x != nil {
		return x.TransferStatusMessage
	}
	return ""
}

func (x *BulkTransferData) GetUploadFileName() string {
	if x != nil {
		return x.UploadFileName
	}
	return ""
}

func (x *BulkTransferData) GetFtpInquiryFileName() string {
	if x != nil {
		return x.FtpInquiryFileName
	}
	return ""
}

func (x *BulkTransferData) GetFtpTransferFileName() string {
	if x != nil {
		return x.FtpTransferFileName
	}
	return ""
}

func (x *BulkTransferData) GetInquiryResult() *InquiryResult {
	if x != nil {
		return x.InquiryResult
	}
	return nil
}

func (x *BulkTransferData) GetTransferResult() *TransferResult {
	if x != nil {
		return x.TransferResult
	}
	return nil
}

func (x *BulkTransferData) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *BulkTransferData) GetTotalFee() float64 {
	if x != nil {
		return x.TotalFee
	}
	return 0
}

func (x *BulkTransferData) GetFeeTransferSuccess() bool {
	if x != nil {
		return x.FeeTransferSuccess
	}
	return false
}

func (x *BulkTransferData) GetFeeJournalSequence() string {
	if x != nil {
		return x.FeeJournalSequence
	}
	return ""
}

func (x *BulkTransferData) GetRoleIDs() []uint64 {
	if x != nil {
		return x.RoleIDs
	}
	return nil
}

func (x *BulkTransferData) GetTransactionServiceID() uint64 {
	if x != nil {
		return x.TransactionServiceID
	}
	return 0
}

type BulkTransferDataList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileDescription     string              `protobuf:"bytes,1,opt,name=fileDescription,proto3" json:"fileDescription,omitempty"`
	FileExtension       FileExtension       `protobuf:"varint,2,opt,name=fileExtension,proto3,enum=bulk_transfer.service.v1.FileExtension" json:"fileExtension,omitempty"`
	TransactionID       string              `protobuf:"bytes,3,opt,name=transactionID,proto3" json:"transactionID,omitempty"`
	TransactionType     TransactionType     `protobuf:"varint,4,opt,name=transactionType,proto3,enum=bulk_transfer.service.v1.TransactionType" json:"transactionType,omitempty"`
	TransactionSchedule TransactionSchedule `protobuf:"varint,5,opt,name=transactionSchedule,proto3,enum=bulk_transfer.service.v1.TransactionSchedule" json:"transactionSchedule,omitempty"`
	ScheduledAt         string              `protobuf:"bytes,6,opt,name=scheduledAt,proto3" json:"scheduledAt,omitempty"`
	SenderAccount       string              `protobuf:"bytes,7,opt,name=senderAccount,proto3" json:"senderAccount,omitempty"`
	SenderName          string              `protobuf:"bytes,8,opt,name=senderName,proto3" json:"senderName,omitempty"`
	Currency            string              `protobuf:"bytes,9,opt,name=currency,proto3" json:"currency,omitempty"`
	Status              string              `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	Amount              float64             `protobuf:"fixed64,11,opt,name=amount,proto3" json:"amount,omitempty"`
	Total               uint64              `protobuf:"varint,12,opt,name=total,proto3" json:"total,omitempty"`
	Step                MassStep            `protobuf:"varint,13,opt,name=step,proto3,enum=bulk_transfer.service.v1.MassStep" json:"step,omitempty"`
	InquiryStatus       MassStatus          `protobuf:"varint,14,opt,name=inquiryStatus,proto3,enum=bulk_transfer.service.v1.MassStatus" json:"inquiryStatus,omitempty"`
	TransferStatus      MassStatus          `protobuf:"varint,15,opt,name=transferStatus,proto3,enum=bulk_transfer.service.v1.MassStatus" json:"transferStatus,omitempty"`
	InquiryStatusCode   string              `protobuf:"bytes,16,opt,name=inquiryStatusCode,proto3" json:"inquiryStatusCode,omitempty"`
	TransferStatusCode  string              `protobuf:"bytes,17,opt,name=transferStatusCode,proto3" json:"transferStatusCode,omitempty"`
	Fee                 float64             `protobuf:"fixed64,18,opt,name=fee,proto3" json:"fee,omitempty"`
	TotalFee            float64             `protobuf:"fixed64,19,opt,name=totalFee,proto3" json:"totalFee,omitempty"`
	FeeTransferSuccess  bool                `protobuf:"varint,20,opt,name=feeTransferSuccess,proto3" json:"feeTransferSuccess,omitempty"`
}

func (x *BulkTransferDataList) Reset() {
	*x = BulkTransferDataList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkTransferDataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkTransferDataList) ProtoMessage() {}

func (x *BulkTransferDataList) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkTransferDataList.ProtoReflect.Descriptor instead.
func (*BulkTransferDataList) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{1}
}

func (x *BulkTransferDataList) GetFileDescription() string {
	if x != nil {
		return x.FileDescription
	}
	return ""
}

func (x *BulkTransferDataList) GetFileExtension() FileExtension {
	if x != nil {
		return x.FileExtension
	}
	return FileExtension_NullExtension
}

func (x *BulkTransferDataList) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

func (x *BulkTransferDataList) GetTransactionType() TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return TransactionType_NullTransactionType
}

func (x *BulkTransferDataList) GetTransactionSchedule() TransactionSchedule {
	if x != nil {
		return x.TransactionSchedule
	}
	return TransactionSchedule_NullTransactionSchedule
}

func (x *BulkTransferDataList) GetScheduledAt() string {
	if x != nil {
		return x.ScheduledAt
	}
	return ""
}

func (x *BulkTransferDataList) GetSenderAccount() string {
	if x != nil {
		return x.SenderAccount
	}
	return ""
}

func (x *BulkTransferDataList) GetSenderName() string {
	if x != nil {
		return x.SenderName
	}
	return ""
}

func (x *BulkTransferDataList) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BulkTransferDataList) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BulkTransferDataList) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *BulkTransferDataList) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *BulkTransferDataList) GetStep() MassStep {
	if x != nil {
		return x.Step
	}
	return MassStep_NullMassStep
}

func (x *BulkTransferDataList) GetInquiryStatus() MassStatus {
	if x != nil {
		return x.InquiryStatus
	}
	return MassStatus_NullMassStatus
}

func (x *BulkTransferDataList) GetTransferStatus() MassStatus {
	if x != nil {
		return x.TransferStatus
	}
	return MassStatus_NullMassStatus
}

func (x *BulkTransferDataList) GetInquiryStatusCode() string {
	if x != nil {
		return x.InquiryStatusCode
	}
	return ""
}

func (x *BulkTransferDataList) GetTransferStatusCode() string {
	if x != nil {
		return x.TransferStatusCode
	}
	return ""
}

func (x *BulkTransferDataList) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *BulkTransferDataList) GetTotalFee() float64 {
	if x != nil {
		return x.TotalFee
	}
	return 0
}

func (x *BulkTransferDataList) GetFeeTransferSuccess() bool {
	if x != nil {
		return x.FeeTransferSuccess
	}
	return false
}

type BulkTransferDataDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileDescription       string                    `protobuf:"bytes,1,opt,name=fileDescription,proto3" json:"fileDescription,omitempty"`
	FileExtension         FileExtension             `protobuf:"varint,2,opt,name=fileExtension,proto3,enum=bulk_transfer.service.v1.FileExtension" json:"fileExtension,omitempty"`
	TransactionID         string                    `protobuf:"bytes,3,opt,name=transactionID,proto3" json:"transactionID,omitempty"`
	TransactionType       TransactionType           `protobuf:"varint,4,opt,name=transactionType,proto3,enum=bulk_transfer.service.v1.TransactionType" json:"transactionType,omitempty"`
	TransactionSchedule   TransactionSchedule       `protobuf:"varint,5,opt,name=transactionSchedule,proto3,enum=bulk_transfer.service.v1.TransactionSchedule" json:"transactionSchedule,omitempty"`
	ScheduledAt           string                    `protobuf:"bytes,6,opt,name=scheduledAt,proto3" json:"scheduledAt,omitempty"`
	SenderAccount         string                    `protobuf:"bytes,7,opt,name=senderAccount,proto3" json:"senderAccount,omitempty"`
	SenderName            string                    `protobuf:"bytes,8,opt,name=senderName,proto3" json:"senderName,omitempty"`
	Currency              string                    `protobuf:"bytes,9,opt,name=currency,proto3" json:"currency,omitempty"`
	Status                string                    `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	Amount                float64                   `protobuf:"fixed64,11,opt,name=amount,proto3" json:"amount,omitempty"`
	InitialAmount         float64                   `protobuf:"fixed64,12,opt,name=initialAmount,proto3" json:"initialAmount,omitempty"`
	Step                  MassStep                  `protobuf:"varint,13,opt,name=step,proto3,enum=bulk_transfer.service.v1.MassStep" json:"step,omitempty"`
	JournalSequence       string                    `protobuf:"bytes,14,opt,name=journalSequence,proto3" json:"journalSequence,omitempty"`
	Total                 uint64                    `protobuf:"varint,15,opt,name=total,proto3" json:"total,omitempty"`
	TotalValid            uint64                    `protobuf:"varint,16,opt,name=totalValid,proto3" json:"totalValid,omitempty"`
	TotalInvalid          uint64                    `protobuf:"varint,17,opt,name=totalInvalid,proto3" json:"totalInvalid,omitempty"`
	TotalSuccess          uint64                    `protobuf:"varint,18,opt,name=totalSuccess,proto3" json:"totalSuccess,omitempty"`
	TotalFailed           uint64                    `protobuf:"varint,19,opt,name=totalFailed,proto3" json:"totalFailed,omitempty"`
	InquiryStatus         MassStatus                `protobuf:"varint,20,opt,name=inquiryStatus,proto3,enum=bulk_transfer.service.v1.MassStatus" json:"inquiryStatus,omitempty"`
	TransferStatus        MassStatus                `protobuf:"varint,21,opt,name=transferStatus,proto3,enum=bulk_transfer.service.v1.MassStatus" json:"transferStatus,omitempty"`
	InquiryStatusCode     string                    `protobuf:"bytes,22,opt,name=inquiryStatusCode,proto3" json:"inquiryStatusCode,omitempty"`
	TransferStatusCode    string                    `protobuf:"bytes,23,opt,name=transferStatusCode,proto3" json:"transferStatusCode,omitempty"`
	InquiryStatusMessage  string                    `protobuf:"bytes,24,opt,name=inquiryStatusMessage,proto3" json:"inquiryStatusMessage,omitempty"`
	TransferStatusMessage string                    `protobuf:"bytes,25,opt,name=transferStatusMessage,proto3" json:"transferStatusMessage,omitempty"`
	Fee                   float64                   `protobuf:"fixed64,26,opt,name=fee,proto3" json:"fee,omitempty"`
	TotalFee              float64                   `protobuf:"fixed64,27,opt,name=totalFee,proto3" json:"totalFee,omitempty"`
	FeeTransferSuccess    bool                      `protobuf:"varint,28,opt,name=feeTransferSuccess,proto3" json:"feeTransferSuccess,omitempty"`
	FeeJournalSequence    string                    `protobuf:"bytes,29,opt,name=feeJournalSequence,proto3" json:"feeJournalSequence,omitempty"`
	Items                 []*BulkTransferItemDetail `protobuf:"bytes,30,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *BulkTransferDataDetail) Reset() {
	*x = BulkTransferDataDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkTransferDataDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkTransferDataDetail) ProtoMessage() {}

func (x *BulkTransferDataDetail) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkTransferDataDetail.ProtoReflect.Descriptor instead.
func (*BulkTransferDataDetail) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{2}
}

func (x *BulkTransferDataDetail) GetFileDescription() string {
	if x != nil {
		return x.FileDescription
	}
	return ""
}

func (x *BulkTransferDataDetail) GetFileExtension() FileExtension {
	if x != nil {
		return x.FileExtension
	}
	return FileExtension_NullExtension
}

func (x *BulkTransferDataDetail) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

func (x *BulkTransferDataDetail) GetTransactionType() TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return TransactionType_NullTransactionType
}

func (x *BulkTransferDataDetail) GetTransactionSchedule() TransactionSchedule {
	if x != nil {
		return x.TransactionSchedule
	}
	return TransactionSchedule_NullTransactionSchedule
}

func (x *BulkTransferDataDetail) GetScheduledAt() string {
	if x != nil {
		return x.ScheduledAt
	}
	return ""
}

func (x *BulkTransferDataDetail) GetSenderAccount() string {
	if x != nil {
		return x.SenderAccount
	}
	return ""
}

func (x *BulkTransferDataDetail) GetSenderName() string {
	if x != nil {
		return x.SenderName
	}
	return ""
}

func (x *BulkTransferDataDetail) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BulkTransferDataDetail) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BulkTransferDataDetail) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *BulkTransferDataDetail) GetInitialAmount() float64 {
	if x != nil {
		return x.InitialAmount
	}
	return 0
}

func (x *BulkTransferDataDetail) GetStep() MassStep {
	if x != nil {
		return x.Step
	}
	return MassStep_NullMassStep
}

func (x *BulkTransferDataDetail) GetJournalSequence() string {
	if x != nil {
		return x.JournalSequence
	}
	return ""
}

func (x *BulkTransferDataDetail) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *BulkTransferDataDetail) GetTotalValid() uint64 {
	if x != nil {
		return x.TotalValid
	}
	return 0
}

func (x *BulkTransferDataDetail) GetTotalInvalid() uint64 {
	if x != nil {
		return x.TotalInvalid
	}
	return 0
}

func (x *BulkTransferDataDetail) GetTotalSuccess() uint64 {
	if x != nil {
		return x.TotalSuccess
	}
	return 0
}

func (x *BulkTransferDataDetail) GetTotalFailed() uint64 {
	if x != nil {
		return x.TotalFailed
	}
	return 0
}

func (x *BulkTransferDataDetail) GetInquiryStatus() MassStatus {
	if x != nil {
		return x.InquiryStatus
	}
	return MassStatus_NullMassStatus
}

func (x *BulkTransferDataDetail) GetTransferStatus() MassStatus {
	if x != nil {
		return x.TransferStatus
	}
	return MassStatus_NullMassStatus
}

func (x *BulkTransferDataDetail) GetInquiryStatusCode() string {
	if x != nil {
		return x.InquiryStatusCode
	}
	return ""
}

func (x *BulkTransferDataDetail) GetTransferStatusCode() string {
	if x != nil {
		return x.TransferStatusCode
	}
	return ""
}

func (x *BulkTransferDataDetail) GetInquiryStatusMessage() string {
	if x != nil {
		return x.InquiryStatusMessage
	}
	return ""
}

func (x *BulkTransferDataDetail) GetTransferStatusMessage() string {
	if x != nil {
		return x.TransferStatusMessage
	}
	return ""
}

func (x *BulkTransferDataDetail) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *BulkTransferDataDetail) GetTotalFee() float64 {
	if x != nil {
		return x.TotalFee
	}
	return 0
}

func (x *BulkTransferDataDetail) GetFeeTransferSuccess() bool {
	if x != nil {
		return x.FeeTransferSuccess
	}
	return false
}

func (x *BulkTransferDataDetail) GetFeeJournalSequence() string {
	if x != nil {
		return x.FeeJournalSequence
	}
	return ""
}

func (x *BulkTransferDataDetail) GetItems() []*BulkTransferItemDetail {
	if x != nil {
		return x.Items
	}
	return nil
}

type BulkTransferItemDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeneficiaryAccount     string                      `protobuf:"bytes,1,opt,name=beneficiaryAccount,proto3" json:"beneficiaryAccount,omitempty"`
	BeneficiaryName        string                      `protobuf:"bytes,2,opt,name=beneficiaryName,proto3" json:"beneficiaryName,omitempty"`
	BeneficiaryNameInquiry string                      `protobuf:"bytes,3,opt,name=beneficiaryNameInquiry,proto3" json:"beneficiaryNameInquiry,omitempty"`
	BeneficiaryEmail       string                      `protobuf:"bytes,4,opt,name=beneficiaryEmail,proto3" json:"beneficiaryEmail,omitempty"`
	AccountType            string                      `protobuf:"bytes,5,opt,name=accountType,proto3" json:"accountType,omitempty"`
	AccountStatus          string                      `protobuf:"bytes,6,opt,name=accountStatus,proto3" json:"accountStatus,omitempty"`
	Currency               string                      `protobuf:"bytes,7,opt,name=currency,proto3" json:"currency,omitempty"`
	CustomerRef            string                      `protobuf:"bytes,9,opt,name=customerRef,proto3" json:"customerRef,omitempty"`
	ValidationSuccess      bool                        `protobuf:"varint,10,opt,name=validationSuccess,proto3" json:"validationSuccess,omitempty"`
	InquirySuccess         bool                        `protobuf:"varint,11,opt,name=inquirySuccess,proto3" json:"inquirySuccess,omitempty"`
	TransferSuccess        bool                        `protobuf:"varint,12,opt,name=transferSuccess,proto3" json:"transferSuccess,omitempty"`
	InquiryStatusCode      string                      `protobuf:"bytes,13,opt,name=inquiryStatusCode,proto3" json:"inquiryStatusCode,omitempty"`
	TransferStatusCode     string                      `protobuf:"bytes,14,opt,name=transferStatusCode,proto3" json:"transferStatusCode,omitempty"`
	Validation             *BulkTransferItemValidation `protobuf:"bytes,15,opt,name=validation,proto3" json:"validation,omitempty"`
}

func (x *BulkTransferItemDetail) Reset() {
	*x = BulkTransferItemDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkTransferItemDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkTransferItemDetail) ProtoMessage() {}

func (x *BulkTransferItemDetail) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkTransferItemDetail.ProtoReflect.Descriptor instead.
func (*BulkTransferItemDetail) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{3}
}

func (x *BulkTransferItemDetail) GetBeneficiaryAccount() string {
	if x != nil {
		return x.BeneficiaryAccount
	}
	return ""
}

func (x *BulkTransferItemDetail) GetBeneficiaryName() string {
	if x != nil {
		return x.BeneficiaryName
	}
	return ""
}

func (x *BulkTransferItemDetail) GetBeneficiaryNameInquiry() string {
	if x != nil {
		return x.BeneficiaryNameInquiry
	}
	return ""
}

func (x *BulkTransferItemDetail) GetBeneficiaryEmail() string {
	if x != nil {
		return x.BeneficiaryEmail
	}
	return ""
}

func (x *BulkTransferItemDetail) GetAccountType() string {
	if x != nil {
		return x.AccountType
	}
	return ""
}

func (x *BulkTransferItemDetail) GetAccountStatus() string {
	if x != nil {
		return x.AccountStatus
	}
	return ""
}

func (x *BulkTransferItemDetail) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BulkTransferItemDetail) GetCustomerRef() string {
	if x != nil {
		return x.CustomerRef
	}
	return ""
}

func (x *BulkTransferItemDetail) GetValidationSuccess() bool {
	if x != nil {
		return x.ValidationSuccess
	}
	return false
}

func (x *BulkTransferItemDetail) GetInquirySuccess() bool {
	if x != nil {
		return x.InquirySuccess
	}
	return false
}

func (x *BulkTransferItemDetail) GetTransferSuccess() bool {
	if x != nil {
		return x.TransferSuccess
	}
	return false
}

func (x *BulkTransferItemDetail) GetInquiryStatusCode() string {
	if x != nil {
		return x.InquiryStatusCode
	}
	return ""
}

func (x *BulkTransferItemDetail) GetTransferStatusCode() string {
	if x != nil {
		return x.TransferStatusCode
	}
	return ""
}

func (x *BulkTransferItemDetail) GetValidation() *BulkTransferItemValidation {
	if x != nil {
		return x.Validation
	}
	return nil
}

type BulkTransferItemData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeneficiaryAccount     string  `protobuf:"bytes,1,opt,name=beneficiaryAccount,proto3" json:"beneficiaryAccount,omitempty"`
	BeneficiaryName        string  `protobuf:"bytes,2,opt,name=beneficiaryName,proto3" json:"beneficiaryName,omitempty"`
	BeneficiaryNameInquiry string  `protobuf:"bytes,3,opt,name=beneficiaryNameInquiry,proto3" json:"beneficiaryNameInquiry,omitempty"`
	BeneficiaryEmail       string  `protobuf:"bytes,4,opt,name=beneficiaryEmail,proto3" json:"beneficiaryEmail,omitempty"`
	Currency               string  `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`
	Amount                 float64 `protobuf:"fixed64,6,opt,name=amount,proto3" json:"amount,omitempty"`
	AccountType            string  `protobuf:"bytes,8,opt,name=accountType,proto3" json:"accountType,omitempty"`
	AccountStatus          string  `protobuf:"bytes,9,opt,name=accountStatus,proto3" json:"accountStatus,omitempty"`
	CustomerRef            string  `protobuf:"bytes,10,opt,name=customerRef,proto3" json:"customerRef,omitempty"`
	ValidationSuccess      bool    `protobuf:"varint,11,opt,name=validationSuccess,proto3" json:"validationSuccess,omitempty"`
	InquirySuccess         bool    `protobuf:"varint,12,opt,name=inquirySuccess,proto3" json:"inquirySuccess,omitempty"`
	TransferSuccess        bool    `protobuf:"varint,13,opt,name=transferSuccess,proto3" json:"transferSuccess,omitempty"`
	InquiryStatusCode      string  `protobuf:"bytes,14,opt,name=inquiryStatusCode,proto3" json:"inquiryStatusCode,omitempty"`
	TransferStatusCode     string  `protobuf:"bytes,15,opt,name=transferStatusCode,proto3" json:"transferStatusCode,omitempty"`
}

func (x *BulkTransferItemData) Reset() {
	*x = BulkTransferItemData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkTransferItemData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkTransferItemData) ProtoMessage() {}

func (x *BulkTransferItemData) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkTransferItemData.ProtoReflect.Descriptor instead.
func (*BulkTransferItemData) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{4}
}

func (x *BulkTransferItemData) GetBeneficiaryAccount() string {
	if x != nil {
		return x.BeneficiaryAccount
	}
	return ""
}

func (x *BulkTransferItemData) GetBeneficiaryName() string {
	if x != nil {
		return x.BeneficiaryName
	}
	return ""
}

func (x *BulkTransferItemData) GetBeneficiaryNameInquiry() string {
	if x != nil {
		return x.BeneficiaryNameInquiry
	}
	return ""
}

func (x *BulkTransferItemData) GetBeneficiaryEmail() string {
	if x != nil {
		return x.BeneficiaryEmail
	}
	return ""
}

func (x *BulkTransferItemData) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BulkTransferItemData) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *BulkTransferItemData) GetAccountType() string {
	if x != nil {
		return x.AccountType
	}
	return ""
}

func (x *BulkTransferItemData) GetAccountStatus() string {
	if x != nil {
		return x.AccountStatus
	}
	return ""
}

func (x *BulkTransferItemData) GetCustomerRef() string {
	if x != nil {
		return x.CustomerRef
	}
	return ""
}

func (x *BulkTransferItemData) GetValidationSuccess() bool {
	if x != nil {
		return x.ValidationSuccess
	}
	return false
}

func (x *BulkTransferItemData) GetInquirySuccess() bool {
	if x != nil {
		return x.InquirySuccess
	}
	return false
}

func (x *BulkTransferItemData) GetTransferSuccess() bool {
	if x != nil {
		return x.TransferSuccess
	}
	return false
}

func (x *BulkTransferItemData) GetInquiryStatusCode() string {
	if x != nil {
		return x.InquiryStatusCode
	}
	return ""
}

func (x *BulkTransferItemData) GetTransferStatusCode() string {
	if x != nil {
		return x.TransferStatusCode
	}
	return ""
}

type BulkTransferItemValidation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeneficiaryAccount *BulkTransferItemValidationData `protobuf:"bytes,1,opt,name=beneficiaryAccount,proto3" json:"beneficiaryAccount,omitempty"`
	BeneficiaryName    *BulkTransferItemValidationData `protobuf:"bytes,2,opt,name=beneficiaryName,proto3" json:"beneficiaryName,omitempty"`
	BeneficiaryEmail   *BulkTransferItemValidationData `protobuf:"bytes,3,opt,name=beneficiaryEmail,proto3" json:"beneficiaryEmail,omitempty"`
	Amount             *BulkTransferItemValidationData `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	CustomerReff       *BulkTransferItemValidationData `protobuf:"bytes,5,opt,name=customerReff,proto3" json:"customerReff,omitempty"`
	Unique             bool                            `protobuf:"varint,6,opt,name=unique,proto3" json:"unique,omitempty"`
}

func (x *BulkTransferItemValidation) Reset() {
	*x = BulkTransferItemValidation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkTransferItemValidation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkTransferItemValidation) ProtoMessage() {}

func (x *BulkTransferItemValidation) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkTransferItemValidation.ProtoReflect.Descriptor instead.
func (*BulkTransferItemValidation) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{5}
}

func (x *BulkTransferItemValidation) GetBeneficiaryAccount() *BulkTransferItemValidationData {
	if x != nil {
		return x.BeneficiaryAccount
	}
	return nil
}

func (x *BulkTransferItemValidation) GetBeneficiaryName() *BulkTransferItemValidationData {
	if x != nil {
		return x.BeneficiaryName
	}
	return nil
}

func (x *BulkTransferItemValidation) GetBeneficiaryEmail() *BulkTransferItemValidationData {
	if x != nil {
		return x.BeneficiaryEmail
	}
	return nil
}

func (x *BulkTransferItemValidation) GetAmount() *BulkTransferItemValidationData {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *BulkTransferItemValidation) GetCustomerReff() *BulkTransferItemValidationData {
	if x != nil {
		return x.CustomerReff
	}
	return nil
}

func (x *BulkTransferItemValidation) GetUnique() bool {
	if x != nil {
		return x.Unique
	}
	return false
}

type BulkTransferItemValidationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid      bool   `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	StatusCode string `protobuf:"bytes,2,opt,name=statusCode,proto3" json:"statusCode,omitempty"`
}

func (x *BulkTransferItemValidationData) Reset() {
	*x = BulkTransferItemValidationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkTransferItemValidationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkTransferItemValidationData) ProtoMessage() {}

func (x *BulkTransferItemValidationData) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkTransferItemValidationData.ProtoReflect.Descriptor instead.
func (*BulkTransferItemValidationData) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{6}
}

func (x *BulkTransferItemValidationData) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *BulkTransferItemValidationData) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

type TaskBulkTransferData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task     *Task                   `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	Data     *BulkTransferDataDetail `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Workflow *ValidateWorkflowData   `protobuf:"bytes,3,opt,name=workflow,proto3" json:"workflow,omitempty"`
}

func (x *TaskBulkTransferData) Reset() {
	*x = TaskBulkTransferData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskBulkTransferData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskBulkTransferData) ProtoMessage() {}

func (x *TaskBulkTransferData) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskBulkTransferData.ProtoReflect.Descriptor instead.
func (*TaskBulkTransferData) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{7}
}

func (x *TaskBulkTransferData) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *TaskBulkTransferData) GetData() *BulkTransferDataDetail {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TaskBulkTransferData) GetWorkflow() *ValidateWorkflowData {
	if x != nil {
		return x.Workflow
	}
	return nil
}

type TaskBulkTransferDataList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task     *Task                 `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	Data     *BulkTransferDataList `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Workflow *ValidateWorkflowData `protobuf:"bytes,3,opt,name=workflow,proto3" json:"workflow,omitempty"`
}

func (x *TaskBulkTransferDataList) Reset() {
	*x = TaskBulkTransferDataList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskBulkTransferDataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskBulkTransferDataList) ProtoMessage() {}

func (x *TaskBulkTransferDataList) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskBulkTransferDataList.ProtoReflect.Descriptor instead.
func (*TaskBulkTransferDataList) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{8}
}

func (x *TaskBulkTransferDataList) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *TaskBulkTransferDataList) GetData() *BulkTransferDataList {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TaskBulkTransferDataList) GetWorkflow() *ValidateWorkflowData {
	if x != nil {
		return x.Workflow
	}
	return nil
}

type DecodeBulkTransferFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DecodeBulkTransferFileRequest) Reset() {
	*x = DecodeBulkTransferFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecodeBulkTransferFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeBulkTransferFileRequest) ProtoMessage() {}

func (x *DecodeBulkTransferFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeBulkTransferFileRequest.ProtoReflect.Descriptor instead.
func (*DecodeBulkTransferFileRequest) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{9}
}

func (x *DecodeBulkTransferFileRequest) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type DecodeBulkTransferFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool                    `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string                  `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *DecodeBulkTransferData `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DecodeBulkTransferFileResponse) Reset() {
	*x = DecodeBulkTransferFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecodeBulkTransferFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeBulkTransferFileResponse) ProtoMessage() {}

func (x *DecodeBulkTransferFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeBulkTransferFileResponse.ProtoReflect.Descriptor instead.
func (*DecodeBulkTransferFileResponse) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{10}
}

func (x *DecodeBulkTransferFileResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *DecodeBulkTransferFileResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DecodeBulkTransferFileResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DecodeBulkTransferFileResponse) GetData() *DecodeBulkTransferData {
	if x != nil {
		return x.Data
	}
	return nil
}

type DecodeBulkTransferData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileType        FileExtension            `protobuf:"varint,1,opt,name=fileType,proto3,enum=bulk_transfer.service.v1.FileExtension" json:"fileType,omitempty"`
	Rows            []*DecodeBulkTransferRow `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty"`
	TotalRow        uint64                   `protobuf:"varint,3,opt,name=totalRow,proto3" json:"totalRow,omitempty"`
	TotalRowFile    uint64                   `protobuf:"varint,4,opt,name=totalRowFile,proto3" json:"totalRowFile,omitempty"`
	TotalAmount     float64                  `protobuf:"fixed64,5,opt,name=totalAmount,proto3" json:"totalAmount,omitempty"`
	TotalAmountFile float64                  `protobuf:"fixed64,6,opt,name=totalAmountFile,proto3" json:"totalAmountFile,omitempty"`
	Date            string                   `protobuf:"bytes,7,opt,name=date,proto3" json:"date,omitempty"`
	DateFile        string                   `protobuf:"bytes,8,opt,name=dateFile,proto3" json:"dateFile,omitempty"`
	SenderAccount   string                   `protobuf:"bytes,9,opt,name=senderAccount,proto3" json:"senderAccount,omitempty"`
}

func (x *DecodeBulkTransferData) Reset() {
	*x = DecodeBulkTransferData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecodeBulkTransferData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeBulkTransferData) ProtoMessage() {}

func (x *DecodeBulkTransferData) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeBulkTransferData.ProtoReflect.Descriptor instead.
func (*DecodeBulkTransferData) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{11}
}

func (x *DecodeBulkTransferData) GetFileType() FileExtension {
	if x != nil {
		return x.FileType
	}
	return FileExtension_NullExtension
}

func (x *DecodeBulkTransferData) GetRows() []*DecodeBulkTransferRow {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *DecodeBulkTransferData) GetTotalRow() uint64 {
	if x != nil {
		return x.TotalRow
	}
	return 0
}

func (x *DecodeBulkTransferData) GetTotalRowFile() uint64 {
	if x != nil {
		return x.TotalRowFile
	}
	return 0
}

func (x *DecodeBulkTransferData) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *DecodeBulkTransferData) GetTotalAmountFile() float64 {
	if x != nil {
		return x.TotalAmountFile
	}
	return 0
}

func (x *DecodeBulkTransferData) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *DecodeBulkTransferData) GetDateFile() string {
	if x != nil {
		return x.DateFile
	}
	return ""
}

func (x *DecodeBulkTransferData) GetSenderAccount() string {
	if x != nil {
		return x.SenderAccount
	}
	return ""
}

type DecodeBulkTransferRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeneficiaryName    string  `protobuf:"bytes,1,opt,name=beneficiaryName,proto3" json:"beneficiaryName,omitempty"`
	BeneficiaryAccount string  `protobuf:"bytes,2,opt,name=beneficiaryAccount,proto3" json:"beneficiaryAccount,omitempty"`
	BeneficiaryEmail   string  `protobuf:"bytes,3,opt,name=beneficiaryEmail,proto3" json:"beneficiaryEmail,omitempty"`
	Amount             float64 `protobuf:"fixed64,4,opt,name=amount,proto3" json:"amount,omitempty"`
	CustomerRef        string  `protobuf:"bytes,5,opt,name=customerRef,proto3" json:"customerRef,omitempty"`
	BeneficiaryBank    string  `protobuf:"bytes,6,opt,name=beneficiaryBank,proto3" json:"beneficiaryBank,omitempty"`
	BeneficiaryAddress string  `protobuf:"bytes,7,opt,name=beneficiaryAddress,proto3" json:"beneficiaryAddress,omitempty"`
}

func (x *DecodeBulkTransferRow) Reset() {
	*x = DecodeBulkTransferRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecodeBulkTransferRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeBulkTransferRow) ProtoMessage() {}

func (x *DecodeBulkTransferRow) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeBulkTransferRow.ProtoReflect.Descriptor instead.
func (*DecodeBulkTransferRow) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{12}
}

func (x *DecodeBulkTransferRow) GetBeneficiaryName() string {
	if x != nil {
		return x.BeneficiaryName
	}
	return ""
}

func (x *DecodeBulkTransferRow) GetBeneficiaryAccount() string {
	if x != nil {
		return x.BeneficiaryAccount
	}
	return ""
}

func (x *DecodeBulkTransferRow) GetBeneficiaryEmail() string {
	if x != nil {
		return x.BeneficiaryEmail
	}
	return ""
}

func (x *DecodeBulkTransferRow) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *DecodeBulkTransferRow) GetCustomerRef() string {
	if x != nil {
		return x.CustomerRef
	}
	return ""
}

func (x *DecodeBulkTransferRow) GetBeneficiaryBank() string {
	if x != nil {
		return x.BeneficiaryBank
	}
	return ""
}

func (x *DecodeBulkTransferRow) GetBeneficiaryAddress() string {
	if x != nil {
		return x.BeneficiaryAddress
	}
	return ""
}

type GetTaskBulkTransferFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     TaskStatus     `protobuf:"varint,1,opt,name=status,proto3,enum=bulk_transfer.service.v1.TaskStatus" json:"status,omitempty"`
	Step       TaskStep       `protobuf:"varint,2,opt,name=step,proto3,enum=bulk_transfer.service.v1.TaskStep" json:"step,omitempty"`
	Limit      int32          `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Page       int32          `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Sort       string         `protobuf:"bytes,5,opt,name=sort,proto3" json:"sort,omitempty"`
	Dir        Direction      `protobuf:"varint,6,opt,name=dir,proto3,enum=bulk_transfer.service.v1.Direction" json:"dir,omitempty"`
	Filter     string         `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty"`
	FilterOr   string         `protobuf:"bytes,8,opt,name=filterOr,proto3" json:"filterOr,omitempty"`
	Query      string         `protobuf:"bytes,9,opt,name=query,proto3" json:"query,omitempty"`
	FileFormat FormatTemplate `protobuf:"varint,101,opt,name=fileFormat,proto3,enum=bulk_transfer.service.v1.FormatTemplate" json:"fileFormat,omitempty"`
}

func (x *GetTaskBulkTransferFileRequest) Reset() {
	*x = GetTaskBulkTransferFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskBulkTransferFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskBulkTransferFileRequest) ProtoMessage() {}

func (x *GetTaskBulkTransferFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskBulkTransferFileRequest.ProtoReflect.Descriptor instead.
func (*GetTaskBulkTransferFileRequest) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{13}
}

func (x *GetTaskBulkTransferFileRequest) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_AllStatus
}

func (x *GetTaskBulkTransferFileRequest) GetStep() TaskStep {
	if x != nil {
		return x.Step
	}
	return TaskStep_AllStep
}

func (x *GetTaskBulkTransferFileRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetTaskBulkTransferFileRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetTaskBulkTransferFileRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *GetTaskBulkTransferFileRequest) GetDir() Direction {
	if x != nil {
		return x.Dir
	}
	return Direction_DESC
}

func (x *GetTaskBulkTransferFileRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *GetTaskBulkTransferFileRequest) GetFilterOr() string {
	if x != nil {
		return x.FilterOr
	}
	return ""
}

func (x *GetTaskBulkTransferFileRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *GetTaskBulkTransferFileRequest) GetFileFormat() FormatTemplate {
	if x != nil {
		return x.FileFormat
	}
	return FormatTemplate_null
}

type GetTaskBulkTransferFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetTaskBulkTransferFileResponse) Reset() {
	*x = GetTaskBulkTransferFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskBulkTransferFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskBulkTransferFileResponse) ProtoMessage() {}

func (x *GetTaskBulkTransferFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskBulkTransferFileResponse.ProtoReflect.Descriptor instead.
func (*GetTaskBulkTransferFileResponse) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{14}
}

func (x *GetTaskBulkTransferFileResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *GetTaskBulkTransferFileResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetTaskBulkTransferFileResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetTaskBulkTransferDetailFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     TaskStatus     `protobuf:"varint,1,opt,name=status,proto3,enum=bulk_transfer.service.v1.TaskStatus" json:"status,omitempty"`
	Step       TaskStep       `protobuf:"varint,2,opt,name=step,proto3,enum=bulk_transfer.service.v1.TaskStep" json:"step,omitempty"`
	Limit      int32          `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Page       int32          `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Sort       string         `protobuf:"bytes,5,opt,name=sort,proto3" json:"sort,omitempty"`
	Dir        Direction      `protobuf:"varint,6,opt,name=dir,proto3,enum=bulk_transfer.service.v1.Direction" json:"dir,omitempty"`
	Filter     string         `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty"`
	FilterOr   string         `protobuf:"bytes,8,opt,name=filterOr,proto3" json:"filterOr,omitempty"`
	Query      string         `protobuf:"bytes,9,opt,name=query,proto3" json:"query,omitempty"`
	TaskID     uint64         `protobuf:"varint,10,opt,name=taskID,proto3" json:"taskID,omitempty"`
	FileFormat FormatTemplate `protobuf:"varint,101,opt,name=fileFormat,proto3,enum=bulk_transfer.service.v1.FormatTemplate" json:"fileFormat,omitempty"`
}

func (x *GetTaskBulkTransferDetailFileRequest) Reset() {
	*x = GetTaskBulkTransferDetailFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskBulkTransferDetailFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskBulkTransferDetailFileRequest) ProtoMessage() {}

func (x *GetTaskBulkTransferDetailFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskBulkTransferDetailFileRequest.ProtoReflect.Descriptor instead.
func (*GetTaskBulkTransferDetailFileRequest) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{15}
}

func (x *GetTaskBulkTransferDetailFileRequest) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_AllStatus
}

func (x *GetTaskBulkTransferDetailFileRequest) GetStep() TaskStep {
	if x != nil {
		return x.Step
	}
	return TaskStep_AllStep
}

func (x *GetTaskBulkTransferDetailFileRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetTaskBulkTransferDetailFileRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetTaskBulkTransferDetailFileRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *GetTaskBulkTransferDetailFileRequest) GetDir() Direction {
	if x != nil {
		return x.Dir
	}
	return Direction_DESC
}

func (x *GetTaskBulkTransferDetailFileRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *GetTaskBulkTransferDetailFileRequest) GetFilterOr() string {
	if x != nil {
		return x.FilterOr
	}
	return ""
}

func (x *GetTaskBulkTransferDetailFileRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *GetTaskBulkTransferDetailFileRequest) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *GetTaskBulkTransferDetailFileRequest) GetFileFormat() FormatTemplate {
	if x != nil {
		return x.FileFormat
	}
	return FormatTemplate_null
}

type GetTaskBulkTransferDetailFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetTaskBulkTransferDetailFileResponse) Reset() {
	*x = GetTaskBulkTransferDetailFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskBulkTransferDetailFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskBulkTransferDetailFileResponse) ProtoMessage() {}

func (x *GetTaskBulkTransferDetailFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskBulkTransferDetailFileResponse.ProtoReflect.Descriptor instead.
func (*GetTaskBulkTransferDetailFileResponse) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{16}
}

func (x *GetTaskBulkTransferDetailFileResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *GetTaskBulkTransferDetailFileResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetTaskBulkTransferDetailFileResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetTaskBulkTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   TaskStatus `protobuf:"varint,1,opt,name=status,proto3,enum=bulk_transfer.service.v1.TaskStatus" json:"status,omitempty"`
	Step     TaskStep   `protobuf:"varint,2,opt,name=step,proto3,enum=bulk_transfer.service.v1.TaskStep" json:"step,omitempty"`
	Limit    int32      `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Page     int32      `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Sort     string     `protobuf:"bytes,5,opt,name=sort,proto3" json:"sort,omitempty"`
	Dir      Direction  `protobuf:"varint,6,opt,name=dir,proto3,enum=bulk_transfer.service.v1.Direction" json:"dir,omitempty"`
	Filter   string     `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty"`
	FilterOr string     `protobuf:"bytes,8,opt,name=filterOr,proto3" json:"filterOr,omitempty"`
	Query    string     `protobuf:"bytes,9,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *GetTaskBulkTransferRequest) Reset() {
	*x = GetTaskBulkTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskBulkTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskBulkTransferRequest) ProtoMessage() {}

func (x *GetTaskBulkTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskBulkTransferRequest.ProtoReflect.Descriptor instead.
func (*GetTaskBulkTransferRequest) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{17}
}

func (x *GetTaskBulkTransferRequest) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_AllStatus
}

func (x *GetTaskBulkTransferRequest) GetStep() TaskStep {
	if x != nil {
		return x.Step
	}
	return TaskStep_AllStep
}

func (x *GetTaskBulkTransferRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetTaskBulkTransferRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetTaskBulkTransferRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *GetTaskBulkTransferRequest) GetDir() Direction {
	if x != nil {
		return x.Dir
	}
	return Direction_DESC
}

func (x *GetTaskBulkTransferRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *GetTaskBulkTransferRequest) GetFilterOr() string {
	if x != nil {
		return x.FilterOr
	}
	return ""
}

func (x *GetTaskBulkTransferRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type GetTaskBulkTransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      bool                        `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code       uint32                      `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message    string                      `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data       []*TaskBulkTransferDataList `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	Pagination *PaginationResponse         `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetTaskBulkTransferResponse) Reset() {
	*x = GetTaskBulkTransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskBulkTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskBulkTransferResponse) ProtoMessage() {}

func (x *GetTaskBulkTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskBulkTransferResponse.ProtoReflect.Descriptor instead.
func (*GetTaskBulkTransferResponse) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{18}
}

func (x *GetTaskBulkTransferResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *GetTaskBulkTransferResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetTaskBulkTransferResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetTaskBulkTransferResponse) GetData() []*TaskBulkTransferDataList {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetTaskBulkTransferResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetTaskBulkTransferDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID uint64    `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Limit  int32     `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Page   int32     `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Sort   string    `protobuf:"bytes,4,opt,name=sort,proto3" json:"sort,omitempty"`
	Dir    Direction `protobuf:"varint,5,opt,name=dir,proto3,enum=bulk_transfer.service.v1.Direction" json:"dir,omitempty"`
	Filter string    `protobuf:"bytes,6,opt,name=filter,proto3" json:"filter,omitempty"`
	Query  string    `protobuf:"bytes,7,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *GetTaskBulkTransferDetailRequest) Reset() {
	*x = GetTaskBulkTransferDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskBulkTransferDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskBulkTransferDetailRequest) ProtoMessage() {}

func (x *GetTaskBulkTransferDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskBulkTransferDetailRequest.ProtoReflect.Descriptor instead.
func (*GetTaskBulkTransferDetailRequest) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{19}
}

func (x *GetTaskBulkTransferDetailRequest) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *GetTaskBulkTransferDetailRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetTaskBulkTransferDetailRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetTaskBulkTransferDetailRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *GetTaskBulkTransferDetailRequest) GetDir() Direction {
	if x != nil {
		return x.Dir
	}
	return Direction_DESC
}

func (x *GetTaskBulkTransferDetailRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *GetTaskBulkTransferDetailRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type GetTaskBulkTransferDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      bool                  `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code       uint32                `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message    string                `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data       *TaskBulkTransferData `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Pagination *PaginationResponse   `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetTaskBulkTransferDetailResponse) Reset() {
	*x = GetTaskBulkTransferDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskBulkTransferDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskBulkTransferDetailResponse) ProtoMessage() {}

func (x *GetTaskBulkTransferDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskBulkTransferDetailResponse.ProtoReflect.Descriptor instead.
func (*GetTaskBulkTransferDetailResponse) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{20}
}

func (x *GetTaskBulkTransferDetailResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *GetTaskBulkTransferDetailResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetTaskBulkTransferDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetTaskBulkTransferDetailResponse) GetData() *TaskBulkTransferData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetTaskBulkTransferDetailResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type CreateTaskBulkTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID              uint64              `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	FileName            string              `protobuf:"bytes,2,opt,name=fileName,proto3" json:"fileName,omitempty"`
	FileDescription     string              `protobuf:"bytes,3,opt,name=fileDescription,proto3" json:"fileDescription,omitempty"`
	TransactionType     TransactionType     `protobuf:"varint,4,opt,name=transactionType,proto3,enum=bulk_transfer.service.v1.TransactionType" json:"transactionType,omitempty"`
	TransactionSchedule TransactionSchedule `protobuf:"varint,5,opt,name=transactionSchedule,proto3,enum=bulk_transfer.service.v1.TransactionSchedule" json:"transactionSchedule,omitempty"`
	ScheduledAt         string              `protobuf:"bytes,6,opt,name=scheduledAt,proto3" json:"scheduledAt,omitempty"`
	IsDraft             bool                `protobuf:"varint,7,opt,name=isDraft,proto3" json:"isDraft,omitempty"`
}

func (x *CreateTaskBulkTransferRequest) Reset() {
	*x = CreateTaskBulkTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTaskBulkTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskBulkTransferRequest) ProtoMessage() {}

func (x *CreateTaskBulkTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskBulkTransferRequest.ProtoReflect.Descriptor instead.
func (*CreateTaskBulkTransferRequest) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{21}
}

func (x *CreateTaskBulkTransferRequest) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *CreateTaskBulkTransferRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *CreateTaskBulkTransferRequest) GetFileDescription() string {
	if x != nil {
		return x.FileDescription
	}
	return ""
}

func (x *CreateTaskBulkTransferRequest) GetTransactionType() TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return TransactionType_NullTransactionType
}

func (x *CreateTaskBulkTransferRequest) GetTransactionSchedule() TransactionSchedule {
	if x != nil {
		return x.TransactionSchedule
	}
	return TransactionSchedule_NullTransactionSchedule
}

func (x *CreateTaskBulkTransferRequest) GetScheduledAt() string {
	if x != nil {
		return x.ScheduledAt
	}
	return ""
}

func (x *CreateTaskBulkTransferRequest) GetIsDraft() bool {
	if x != nil {
		return x.IsDraft
	}
	return false
}

type CreateTaskBulkTransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool                                `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32                              `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string                              `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *CreateTaskBulkTransferResponseData `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateTaskBulkTransferResponse) Reset() {
	*x = CreateTaskBulkTransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTaskBulkTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskBulkTransferResponse) ProtoMessage() {}

func (x *CreateTaskBulkTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskBulkTransferResponse.ProtoReflect.Descriptor instead.
func (*CreateTaskBulkTransferResponse) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{22}
}

func (x *CreateTaskBulkTransferResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *CreateTaskBulkTransferResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateTaskBulkTransferResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateTaskBulkTransferResponse) GetData() *CreateTaskBulkTransferResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateTaskBulkTransferResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID        uint64 `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	TransactionID string `protobuf:"bytes,2,opt,name=transactionID,proto3" json:"transactionID,omitempty"`
	FileType      string `protobuf:"bytes,3,opt,name=fileType,proto3" json:"fileType,omitempty"`
	// repeated DecodeBulkTransferRow rows = 4;
	FileDescription string          `protobuf:"bytes,4,opt,name=fileDescription,proto3" json:"fileDescription,omitempty"`
	TotalRow        uint64          `protobuf:"varint,5,opt,name=totalRow,proto3" json:"totalRow,omitempty"`
	TotalAmount     uint64          `protobuf:"varint,6,opt,name=totalAmount,proto3" json:"totalAmount,omitempty"`
	TotalFee        uint64          `protobuf:"varint,7,opt,name=totalFee,proto3" json:"totalFee,omitempty"`
	SenderAccount   string          `protobuf:"bytes,8,opt,name=senderAccount,proto3" json:"senderAccount,omitempty"`
	SenderName      string          `protobuf:"bytes,9,opt,name=senderName,proto3" json:"senderName,omitempty"`
	Currency        string          `protobuf:"bytes,10,opt,name=currency,proto3" json:"currency,omitempty"`
	Fee             Fee             `protobuf:"varint,11,opt,name=fee,proto3,enum=bulk_transfer.service.v1.Fee" json:"fee,omitempty"`
	InquiryStatus   MassStatus      `protobuf:"varint,12,opt,name=inquiryStatus,proto3,enum=bulk_transfer.service.v1.MassStatus" json:"inquiryStatus,omitempty"`
	TransactionType TransactionType `protobuf:"varint,13,opt,name=transactionType,proto3,enum=bulk_transfer.service.v1.TransactionType" json:"transactionType,omitempty"`
}

func (x *CreateTaskBulkTransferResponseData) Reset() {
	*x = CreateTaskBulkTransferResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTaskBulkTransferResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskBulkTransferResponseData) ProtoMessage() {}

func (x *CreateTaskBulkTransferResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskBulkTransferResponseData.ProtoReflect.Descriptor instead.
func (*CreateTaskBulkTransferResponseData) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{23}
}

func (x *CreateTaskBulkTransferResponseData) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *CreateTaskBulkTransferResponseData) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

func (x *CreateTaskBulkTransferResponseData) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *CreateTaskBulkTransferResponseData) GetFileDescription() string {
	if x != nil {
		return x.FileDescription
	}
	return ""
}

func (x *CreateTaskBulkTransferResponseData) GetTotalRow() uint64 {
	if x != nil {
		return x.TotalRow
	}
	return 0
}

func (x *CreateTaskBulkTransferResponseData) GetTotalAmount() uint64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *CreateTaskBulkTransferResponseData) GetTotalFee() uint64 {
	if x != nil {
		return x.TotalFee
	}
	return 0
}

func (x *CreateTaskBulkTransferResponseData) GetSenderAccount() string {
	if x != nil {
		return x.SenderAccount
	}
	return ""
}

func (x *CreateTaskBulkTransferResponseData) GetSenderName() string {
	if x != nil {
		return x.SenderName
	}
	return ""
}

func (x *CreateTaskBulkTransferResponseData) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *CreateTaskBulkTransferResponseData) GetFee() Fee {
	if x != nil {
		return x.Fee
	}
	return Fee_NullFee
}

func (x *CreateTaskBulkTransferResponseData) GetInquiryStatus() MassStatus {
	if x != nil {
		return x.InquiryStatus
	}
	return MassStatus_NullMassStatus
}

func (x *CreateTaskBulkTransferResponseData) GetTransactionType() TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return TransactionType_NullTransactionType
}

type CreateBulkTransferTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID uint64 `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
}

func (x *CreateBulkTransferTransactionRequest) Reset() {
	*x = CreateBulkTransferTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBulkTransferTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBulkTransferTransactionRequest) ProtoMessage() {}

func (x *CreateBulkTransferTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBulkTransferTransactionRequest.ProtoReflect.Descriptor instead.
func (*CreateBulkTransferTransactionRequest) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{24}
}

func (x *CreateBulkTransferTransactionRequest) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

type CreateBulkTransferTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateBulkTransferTransactionResponse) Reset() {
	*x = CreateBulkTransferTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBulkTransferTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBulkTransferTransactionResponse) ProtoMessage() {}

func (x *CreateBulkTransferTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBulkTransferTransactionResponse.ProtoReflect.Descriptor instead.
func (*CreateBulkTransferTransactionResponse) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{25}
}

func (x *CreateBulkTransferTransactionResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *CreateBulkTransferTransactionResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateBulkTransferTransactionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CancelBulkTransferTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID uint64 `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
}

func (x *CancelBulkTransferTransactionRequest) Reset() {
	*x = CancelBulkTransferTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelBulkTransferTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelBulkTransferTransactionRequest) ProtoMessage() {}

func (x *CancelBulkTransferTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelBulkTransferTransactionRequest.ProtoReflect.Descriptor instead.
func (*CancelBulkTransferTransactionRequest) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{26}
}

func (x *CancelBulkTransferTransactionRequest) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

type CancelBulkTransferTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CancelBulkTransferTransactionResponse) Reset() {
	*x = CancelBulkTransferTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelBulkTransferTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelBulkTransferTransactionResponse) ProtoMessage() {}

func (x *CancelBulkTransferTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelBulkTransferTransactionResponse.ProtoReflect.Descriptor instead.
func (*CancelBulkTransferTransactionResponse) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{27}
}

func (x *CancelBulkTransferTransactionResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *CancelBulkTransferTransactionResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CancelBulkTransferTransactionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ExecBulkTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ExecBulkTransferRequest) Reset() {
	*x = ExecBulkTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecBulkTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecBulkTransferRequest) ProtoMessage() {}

func (x *ExecBulkTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecBulkTransferRequest.ProtoReflect.Descriptor instead.
func (*ExecBulkTransferRequest) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{28}
}

func (x *ExecBulkTransferRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ExecBulkTransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error           bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code            uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message         string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	JournalSequence string `protobuf:"bytes,4,opt,name=journalSequence,proto3" json:"journalSequence,omitempty"`
	Status          string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"` // 1 | 2 | 3 | 4
	ResponseDetail  string `protobuf:"bytes,6,opt,name=responseDetail,proto3" json:"responseDetail,omitempty"`
}

func (x *ExecBulkTransferResponse) Reset() {
	*x = ExecBulkTransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecBulkTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecBulkTransferResponse) ProtoMessage() {}

func (x *ExecBulkTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecBulkTransferResponse.ProtoReflect.Descriptor instead.
func (*ExecBulkTransferResponse) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{29}
}

func (x *ExecBulkTransferResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *ExecBulkTransferResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ExecBulkTransferResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ExecBulkTransferResponse) GetJournalSequence() string {
	if x != nil {
		return x.JournalSequence
	}
	return ""
}

func (x *ExecBulkTransferResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ExecBulkTransferResponse) GetResponseDetail() string {
	if x != nil {
		return x.ResponseDetail
	}
	return ""
}

type ExecFailedBulkTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *ExecFailedBulkTransferRequest) Reset() {
	*x = ExecFailedBulkTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecFailedBulkTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecFailedBulkTransferRequest) ProtoMessage() {}

func (x *ExecFailedBulkTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecFailedBulkTransferRequest.ProtoReflect.Descriptor instead.
func (*ExecFailedBulkTransferRequest) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{30}
}

func (x *ExecFailedBulkTransferRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ExecFailedBulkTransferRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type ExecFailedBulkTransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ExecFailedBulkTransferResponse) Reset() {
	*x = ExecFailedBulkTransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecFailedBulkTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecFailedBulkTransferResponse) ProtoMessage() {}

func (x *ExecFailedBulkTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecFailedBulkTransferResponse.ProtoReflect.Descriptor instead.
func (*ExecFailedBulkTransferResponse) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{31}
}

func (x *ExecFailedBulkTransferResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *ExecFailedBulkTransferResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ExecFailedBulkTransferResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type RunMassTransferJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RunMassTransferJobRequest) Reset() {
	*x = RunMassTransferJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunMassTransferJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunMassTransferJobRequest) ProtoMessage() {}

func (x *RunMassTransferJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunMassTransferJobRequest.ProtoReflect.Descriptor instead.
func (*RunMassTransferJobRequest) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{32}
}

type RunMassTransferJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RunMassTransferJobResponse) Reset() {
	*x = RunMassTransferJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunMassTransferJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunMassTransferJobResponse) ProtoMessage() {}

func (x *RunMassTransferJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunMassTransferJobResponse.ProtoReflect.Descriptor instead.
func (*RunMassTransferJobResponse) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{33}
}

func (x *RunMassTransferJobResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *RunMassTransferJobResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RunMassTransferJobResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type RunCreateMassTransferJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RunCreateMassTransferJobRequest) Reset() {
	*x = RunCreateMassTransferJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCreateMassTransferJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCreateMassTransferJobRequest) ProtoMessage() {}

func (x *RunCreateMassTransferJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCreateMassTransferJobRequest.ProtoReflect.Descriptor instead.
func (*RunCreateMassTransferJobRequest) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{34}
}

type RunCreateMassTransferJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RunCreateMassTransferJobResponse) Reset() {
	*x = RunCreateMassTransferJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCreateMassTransferJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCreateMassTransferJobResponse) ProtoMessage() {}

func (x *RunCreateMassTransferJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCreateMassTransferJobResponse.ProtoReflect.Descriptor instead.
func (*RunCreateMassTransferJobResponse) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{35}
}

func (x *RunCreateMassTransferJobResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *RunCreateMassTransferJobResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RunCreateMassTransferJobResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ExecFileCheckingBulkTransferJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobID uint64 `protobuf:"varint,1,opt,name=jobID,proto3" json:"jobID,omitempty"`
}

func (x *ExecFileCheckingBulkTransferJobRequest) Reset() {
	*x = ExecFileCheckingBulkTransferJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecFileCheckingBulkTransferJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecFileCheckingBulkTransferJobRequest) ProtoMessage() {}

func (x *ExecFileCheckingBulkTransferJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecFileCheckingBulkTransferJobRequest.ProtoReflect.Descriptor instead.
func (*ExecFileCheckingBulkTransferJobRequest) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{36}
}

func (x *ExecFileCheckingBulkTransferJobRequest) GetJobID() uint64 {
	if x != nil {
		return x.JobID
	}
	return 0
}

type ExecFileCheckingBulkTransferJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error        bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Retry        bool   `protobuf:"varint,2,opt,name=retry,proto3" json:"retry,omitempty"`
	RetryAttempt uint32 `protobuf:"varint,3,opt,name=retryAttempt,proto3" json:"retryAttempt,omitempty"`
}

func (x *ExecFileCheckingBulkTransferJobResponse) Reset() {
	*x = ExecFileCheckingBulkTransferJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecFileCheckingBulkTransferJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecFileCheckingBulkTransferJobResponse) ProtoMessage() {}

func (x *ExecFileCheckingBulkTransferJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecFileCheckingBulkTransferJobResponse.ProtoReflect.Descriptor instead.
func (*ExecFileCheckingBulkTransferJobResponse) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{37}
}

func (x *ExecFileCheckingBulkTransferJobResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *ExecFileCheckingBulkTransferJobResponse) GetRetry() bool {
	if x != nil {
		return x.Retry
	}
	return false
}

func (x *ExecFileCheckingBulkTransferJobResponse) GetRetryAttempt() uint32 {
	if x != nil {
		return x.RetryAttempt
	}
	return 0
}

type ExecMassInquiryJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobID uint64 `protobuf:"varint,1,opt,name=jobID,proto3" json:"jobID,omitempty"`
}

func (x *ExecMassInquiryJobRequest) Reset() {
	*x = ExecMassInquiryJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecMassInquiryJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecMassInquiryJobRequest) ProtoMessage() {}

func (x *ExecMassInquiryJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecMassInquiryJobRequest.ProtoReflect.Descriptor instead.
func (*ExecMassInquiryJobRequest) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{38}
}

func (x *ExecMassInquiryJobRequest) GetJobID() uint64 {
	if x != nil {
		return x.JobID
	}
	return 0
}

type ExecMassInquiryJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error        bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Retry        bool   `protobuf:"varint,2,opt,name=retry,proto3" json:"retry,omitempty"`
	RetryAttempt uint32 `protobuf:"varint,3,opt,name=retryAttempt,proto3" json:"retryAttempt,omitempty"`
}

func (x *ExecMassInquiryJobResponse) Reset() {
	*x = ExecMassInquiryJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecMassInquiryJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecMassInquiryJobResponse) ProtoMessage() {}

func (x *ExecMassInquiryJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecMassInquiryJobResponse.ProtoReflect.Descriptor instead.
func (*ExecMassInquiryJobResponse) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{39}
}

func (x *ExecMassInquiryJobResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *ExecMassInquiryJobResponse) GetRetry() bool {
	if x != nil {
		return x.Retry
	}
	return false
}

func (x *ExecMassInquiryJobResponse) GetRetryAttempt() uint32 {
	if x != nil {
		return x.RetryAttempt
	}
	return 0
}

type ExecMassTransferJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobID uint64 `protobuf:"varint,1,opt,name=jobID,proto3" json:"jobID,omitempty"`
}

func (x *ExecMassTransferJobRequest) Reset() {
	*x = ExecMassTransferJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecMassTransferJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecMassTransferJobRequest) ProtoMessage() {}

func (x *ExecMassTransferJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecMassTransferJobRequest.ProtoReflect.Descriptor instead.
func (*ExecMassTransferJobRequest) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{40}
}

func (x *ExecMassTransferJobRequest) GetJobID() uint64 {
	if x != nil {
		return x.JobID
	}
	return 0
}

type ExecMassTransferJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error        bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Retry        bool   `protobuf:"varint,2,opt,name=retry,proto3" json:"retry,omitempty"`
	RetryAttempt uint32 `protobuf:"varint,3,opt,name=retryAttempt,proto3" json:"retryAttempt,omitempty"`
}

func (x *ExecMassTransferJobResponse) Reset() {
	*x = ExecMassTransferJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecMassTransferJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecMassTransferJobResponse) ProtoMessage() {}

func (x *ExecMassTransferJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecMassTransferJobResponse.ProtoReflect.Descriptor instead.
func (*ExecMassTransferJobResponse) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{41}
}

func (x *ExecMassTransferJobResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *ExecMassTransferJobResponse) GetRetry() bool {
	if x != nil {
		return x.Retry
	}
	return false
}

func (x *ExecMassTransferJobResponse) GetRetryAttempt() uint32 {
	if x != nil {
		return x.RetryAttempt
	}
	return 0
}

type SetTaskBulkTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID  uint64 `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Action  string `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	Comment string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	Reasons string `protobuf:"bytes,4,opt,name=reasons,proto3" json:"reasons,omitempty"`
}

func (x *SetTaskBulkTransferRequest) Reset() {
	*x = SetTaskBulkTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTaskBulkTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTaskBulkTransferRequest) ProtoMessage() {}

func (x *SetTaskBulkTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTaskBulkTransferRequest.ProtoReflect.Descriptor instead.
func (*SetTaskBulkTransferRequest) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{42}
}

func (x *SetTaskBulkTransferRequest) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *SetTaskBulkTransferRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *SetTaskBulkTransferRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *SetTaskBulkTransferRequest) GetReasons() string {
	if x != nil {
		return x.Reasons
	}
	return ""
}

type SetTaskBulkTransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Task  `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SetTaskBulkTransferResponse) Reset() {
	*x = SetTaskBulkTransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTaskBulkTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTaskBulkTransferResponse) ProtoMessage() {}

func (x *SetTaskBulkTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTaskBulkTransferResponse.ProtoReflect.Descriptor instead.
func (*SetTaskBulkTransferResponse) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{43}
}

func (x *SetTaskBulkTransferResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *SetTaskBulkTransferResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SetTaskBulkTransferResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SetTaskBulkTransferResponse) GetData() *Task {
	if x != nil {
		return x.Data
	}
	return nil
}

type InquiryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *InquiryResult) Reset() {
	*x = InquiryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InquiryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InquiryResult) ProtoMessage() {}

func (x *InquiryResult) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InquiryResult.ProtoReflect.Descriptor instead.
func (*InquiryResult) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{44}
}

func (x *InquiryResult) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type InquiryResultItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	SequenceNumber string `protobuf:"bytes,2,opt,name=sequenceNumber,proto3" json:"sequenceNumber,omitempty"`
	AccountNumber  string `protobuf:"bytes,3,opt,name=accountNumber,proto3" json:"accountNumber,omitempty"`
	AccountType    string `protobuf:"bytes,4,opt,name=accountType,proto3" json:"accountType,omitempty"`
	Currency       string `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`
	AccountStatus  string `protobuf:"bytes,6,opt,name=accountStatus,proto3" json:"accountStatus,omitempty"`
	ProductCode    string `protobuf:"bytes,7,opt,name=productCode,proto3" json:"productCode,omitempty"`
	CifNumber      string `protobuf:"bytes,8,opt,name=cifNumber,proto3" json:"cifNumber,omitempty"`
	Balance        string `protobuf:"bytes,9,opt,name=balance,proto3" json:"balance,omitempty"`
	Hold           string `protobuf:"bytes,10,opt,name=hold,proto3" json:"hold,omitempty"`
	AccountName    string `protobuf:"bytes,11,opt,name=accountName,proto3" json:"accountName,omitempty"`
}

func (x *InquiryResultItem) Reset() {
	*x = InquiryResultItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InquiryResultItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InquiryResultItem) ProtoMessage() {}

func (x *InquiryResultItem) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InquiryResultItem.ProtoReflect.Descriptor instead.
func (*InquiryResultItem) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{45}
}

func (x *InquiryResultItem) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *InquiryResultItem) GetSequenceNumber() string {
	if x != nil {
		return x.SequenceNumber
	}
	return ""
}

func (x *InquiryResultItem) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *InquiryResultItem) GetAccountType() string {
	if x != nil {
		return x.AccountType
	}
	return ""
}

func (x *InquiryResultItem) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *InquiryResultItem) GetAccountStatus() string {
	if x != nil {
		return x.AccountStatus
	}
	return ""
}

func (x *InquiryResultItem) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *InquiryResultItem) GetCifNumber() string {
	if x != nil {
		return x.CifNumber
	}
	return ""
}

func (x *InquiryResultItem) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *InquiryResultItem) GetHold() string {
	if x != nil {
		return x.Hold
	}
	return ""
}

func (x *InquiryResultItem) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

type CreateMassInquiryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID uint64 `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
}

func (x *CreateMassInquiryRequest) Reset() {
	*x = CreateMassInquiryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMassInquiryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMassInquiryRequest) ProtoMessage() {}

func (x *CreateMassInquiryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMassInquiryRequest.ProtoReflect.Descriptor instead.
func (*CreateMassInquiryRequest) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{46}
}

func (x *CreateMassInquiryRequest) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

type CreateMassInquiryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateMassInquiryResponse) Reset() {
	*x = CreateMassInquiryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMassInquiryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMassInquiryResponse) ProtoMessage() {}

func (x *CreateMassInquiryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMassInquiryResponse.ProtoReflect.Descriptor instead.
func (*CreateMassInquiryResponse) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{47}
}

func (x *CreateMassInquiryResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *CreateMassInquiryResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateMassInquiryResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CreateMassTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID uint64 `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
}

func (x *CreateMassTransferRequest) Reset() {
	*x = CreateMassTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMassTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMassTransferRequest) ProtoMessage() {}

func (x *CreateMassTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMassTransferRequest.ProtoReflect.Descriptor instead.
func (*CreateMassTransferRequest) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{48}
}

func (x *CreateMassTransferRequest) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

type CreateMassTransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool                            `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32                          `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string                          `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *CreateMassTransferResponseData `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateMassTransferResponse) Reset() {
	*x = CreateMassTransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMassTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMassTransferResponse) ProtoMessage() {}

func (x *CreateMassTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMassTransferResponse.ProtoReflect.Descriptor instead.
func (*CreateMassTransferResponse) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{49}
}

func (x *CreateMassTransferResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *CreateMassTransferResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateMassTransferResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateMassTransferResponse) GetData() *CreateMassTransferResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateMassTransferResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JournalSequence string            `protobuf:"bytes,1,opt,name=journalSequence,proto3" json:"journalSequence,omitempty"`
	TaskData        *BulkTransferData `protobuf:"bytes,2,opt,name=taskData,proto3" json:"taskData,omitempty"`
}

func (x *CreateMassTransferResponseData) Reset() {
	*x = CreateMassTransferResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulk_transfer_payload_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMassTransferResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMassTransferResponseData) ProtoMessage() {}

func (x *CreateMassTransferResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_bulk_transfer_payload_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMassTransferResponseData.ProtoReflect.Descriptor instead.
func (*CreateMassTransferResponseData) Descriptor() ([]byte, []int) {
	return file_bulk_transfer_payload_proto_rawDescGZIP(), []int{50}
}

func (x *CreateMassTransferResponseData) GetJournalSequence() string {
	if x != nil {
		return x.JournalSequence
	}
	return ""
}

func (x *CreateMassTransferResponseData) GetTaskData() *BulkTransferData {
	if x != nil {
		return x.TaskData
	}
	return nil
}

var File_bulk_transfer_payload_proto protoreflect.FileDescriptor

var file_bulk_transfer_payload_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x62,
	0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x67, 0x6f, 0x72, 0x6d, 0x5f, 0x64, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x72, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2b, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xac,
	0x0d, 0x0a, 0x10, 0x42, 0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69,
	0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x0d, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x66,
	0x69, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x53, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x62, 0x75,
	0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x73, 0x73,
	0x53, 0x74, 0x65, 0x70, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x6a, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x0d, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x62, 0x75,
	0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0d, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x4c, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c,
	0x0a, 0x11, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x71, 0x75, 0x69,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x12,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x14,
	0x69, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x71, 0x75,
	0x69, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x34, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x66, 0x74, 0x70, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x74, 0x70, 0x49,
	0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x13, 0x66, 0x74, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x66, 0x74, 0x70,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x4d, 0x0a, 0x0d, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x0d, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x50, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x66, 0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x66, 0x65, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x66, 0x65, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x2e, 0x0a, 0x12, 0x66, 0x65, 0x65, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x65, 0x65,
	0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x44, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x07, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x44, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x44, 0x18, 0x24, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x22, 0xc3, 0x07,
	0x0a, 0x14, 0x42, 0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x53, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29,
	0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5f, 0x0a, 0x13, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x73, 0x73, 0x53, 0x74, 0x65, 0x70, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x4a, 0x0a,
	0x0d, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x61, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x69, 0x6e, 0x71, 0x75,
	0x69, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4c, 0x0a, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x73,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6e, 0x71, 0x75, 0x69,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x46, 0x65, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x46, 0x65, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x66, 0x65, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x66, 0x65, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x22, 0x81, 0x0b, 0x0a, 0x16, 0x42, 0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x28,
	0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x53, 0x0a,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x5f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2d, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x13,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x62, 0x75,
	0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x73, 0x73, 0x53, 0x74, 0x65, 0x70, 0x52,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12,
	0x4a, 0x0a, 0x0d, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x61, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x69, 0x6e,
	0x71, 0x75, 0x69, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4c, 0x0a, 0x0e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6e, 0x71,
	0x75, 0x69, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x6e, 0x71, 0x75, 0x69,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x66, 0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x66, 0x65, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x66, 0x65, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x2e, 0x0a, 0x12, 0x66, 0x65, 0x65, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x65, 0x65,
	0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x46, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x90, 0x05, 0x0a, 0x16, 0x42, 0x75, 0x6c, 0x6b,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72,
	0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16,
	0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x49,
	0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x62, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x71,
	0x75, 0x69, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x72, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x52, 0x65, 0x66, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x2c, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e,
	0x71, 0x75, 0x69, 0x72, 0x79, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x54, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xdf, 0x04, 0x0a, 0x14, 0x42,
	0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x12, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a,
	0x16, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x62,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e,
	0x71, 0x75, 0x69, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x72, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x25, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0d, 0xe2,
	0xdf, 0x1f, 0x09, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x2c,
	0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x69, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2c,
	0x0a, 0x11, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x71, 0x75, 0x69,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x12,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x98, 0x04, 0x0a,
	0x1a, 0x42, 0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65,
	0x6d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x12, 0x62,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49,
	0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x12, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x62, 0x0a, 0x0f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x64, 0x0a, 0x10, 0x62, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x62,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x50, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x5c, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x66,
	0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49,
	0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x66, 0x66, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x22, 0x56, 0x0a, 0x1e, 0x42, 0x75, 0x6c, 0x6b, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0xdc, 0x01, 0x0a, 0x14, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x44, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x75, 0x6c,
	0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x4a, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0xde,
	0x01, 0x0a, 0x18, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x74,
	0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x75, 0x6c, 0x6b,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12,
	0x42, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x22,
	0x33, 0x0a, 0x1d, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xaa, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x42,
	0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x75, 0x6c, 0x6b,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x75, 0x6c, 0x6b, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x84, 0x03, 0x0a, 0x16, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x75, 0x6c, 0x6b,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x43, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x42, 0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x6f, 0x77,
	0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x6f, 0x77, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x77, 0x46, 0x69,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x6f, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb1, 0x02, 0x0a, 0x15, 0x44, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x42, 0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52,
	0x6f, 0x77, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12,
	0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10,
	0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x72, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x66, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52,
	0x65, 0x66, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72,
	0x79, 0x42, 0x61, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x2e, 0x0a, 0x12,
	0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xbd, 0x0f, 0x0a,
	0x1e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x62, 0x75,
	0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x52,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x54, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32, 0x39, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x70, 0x65, 0x72, 0x20, 0x70, 0x61, 0x67, 0x65, 0x2e, 0x20,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x27, 0x2d,
	0x31, 0x27, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x55, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x32, 0x3c,
	0x50, 0x61, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x67,
	0x65, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x27, 0x2d, 0x31, 0x27, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32, 0x19, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x64, 0x61, 0x74,
	0x61, 0x20, 0x62, 0x79, 0x20, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x64, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x2d, 0x92, 0x41, 0x2a, 0x32, 0x28, 0x53,
	0x6f, 0x72, 0x74, 0x20, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75,
	0x6d, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x41, 0x53, 0x43, 0x20,
	0x6f, 0x72, 0x20, 0x44, 0x45, 0x53, 0x43, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x8e, 0x04, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0xf5, 0x03,
	0x92, 0x41, 0xf1, 0x03, 0x32, 0xee, 0x03, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x27, 0x41,
	0x4e, 0x44, 0x27, 0x20, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x0a, 0x20, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x3a, 0x20, 0x5b, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x2c, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5d, 0x20, 0x0a, 0x20, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3d, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x3a, 0x31, 0x2c, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x41, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x3d, 0x3e, 0x20, 0x57, 0x68, 0x65,
	0x72, 0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x20, 0x3d, 0x20, 0x31, 0x20, 0x41,
	0x4e, 0x44, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x41, 0x6e, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x20, 0x0a, 0x20, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79,
	0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20,
	0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65,
	0x79, 0x3a, 0x25, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b,
	0x65, 0x79, 0x20, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27,
	0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x21, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x49, 0x4c, 0x49, 0x4b, 0x45,
	0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b,
	0x65, 0x79, 0x3a, 0x3e, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27,
	0x6b, 0x65, 0x79, 0x20, 0x3e, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20,
	0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x3c, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20,
	0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x3a, 0x3e, 0x3d, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x31, 0x2c, 0x6b, 0x65, 0x79, 0x32, 0x3a, 0x3c, 0x3d, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x32, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x20, 0x3e, 0x3d, 0x20,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x20, 0x41, 0x4e, 0x44, 0x20, 0x6b, 0x65, 0x79, 0x32, 0x20,
	0x3c, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x27, 0x20, 0x42, 0x45, 0x54, 0x57, 0x45,
	0x45, 0x4e, 0x20, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27,
	0x6b, 0x65, 0x79, 0x31, 0x2e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x3a,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2d,
	0x3e, 0x3e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x20, 0x3d, 0x20, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x27, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x91, 0x04,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0xf4, 0x03, 0x92, 0x41, 0xf0, 0x03, 0x32, 0xed, 0x03, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x20, 0x27, 0x4f, 0x52, 0x27, 0x20, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x0a, 0x20,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x20, 0x5b, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x2c, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5d, 0x20, 0x0a, 0x20,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3d,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x3a, 0x31, 0x2c, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x41,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x3d, 0x3e, 0x20, 0x57,
	0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x20, 0x3d, 0x20, 0x31,
	0x20, 0x41, 0x4e, 0x44, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x41, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x20, 0x0a, 0x20, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b,
	0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65,
	0x79, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27,
	0x6b, 0x65, 0x79, 0x3a, 0x25, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20,
	0x27, 0x6b, 0x65, 0x79, 0x20, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x21, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x49, 0x4c, 0x49,
	0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20,
	0x27, 0x6b, 0x65, 0x79, 0x3a, 0x3e, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e,
	0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3e, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20,
	0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x3c, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x3a, 0x3e, 0x3d,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x2c, 0x6b, 0x65, 0x79, 0x32, 0x3a, 0x3c, 0x3d, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x32, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x20, 0x3e,
	0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x20, 0x41, 0x4e, 0x44, 0x20, 0x6b, 0x65, 0x79,
	0x32, 0x20, 0x3c, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x27, 0x20, 0x42, 0x45, 0x54,
	0x57, 0x45, 0x45, 0x4e, 0x20, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x20, 0x0a, 0x20, 0x2d,
	0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79,
	0x31, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79,
	0x31, 0x2d, 0x3e, 0x3e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x20, 0x3d,
	0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f,
	0x72, 0x12, 0xee, 0x02, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x42, 0xd7, 0x02, 0x92, 0x41, 0xd3, 0x02, 0x32, 0xd0, 0x02, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x20, 0x27, 0x4f, 0x52, 0x27, 0x20, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x0a,
	0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x20, 0x5b, 0x6b, 0x65, 0x79, 0x31, 0x2c, 0x6b,
	0x65, 0x79, 0x32, 0x2c, 0x6b, 0x65, 0x79, 0x33, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5d, 0x20,
	0x0a, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x3d, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x41, 0x6e, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x3d, 0x3e, 0x20, 0x57, 0x68, 0x65, 0x72, 0x65,
	0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x20, 0x4f, 0x52, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d,
	0x20, 0x27, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x20,
	0x0a, 0x20, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x0a,
	0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d,
	0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20,
	0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79,
	0x3a, 0x25, 0x21, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65,
	0x79, 0x20, 0x49, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27,
	0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2e, 0x6e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x4b, 0x65, 0x79, 0x31, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20,
	0x27, 0x6b, 0x65, 0x79, 0x31, 0x2d, 0x3e, 0x3e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65,
	0x79, 0x31, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x48, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x65, 0x0a, 0x1f,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xdb, 0x0f, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x42,
	0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x62,
	0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x52, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x12, 0x54, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32, 0x39, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x64, 0x61,
	0x74, 0x61, 0x20, 0x70, 0x65, 0x72, 0x20, 0x70, 0x61, 0x67, 0x65, 0x2e, 0x20, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x27, 0x2d, 0x31, 0x27, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x55, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x32, 0x3c, 0x50, 0x61, 0x67,
	0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x20, 0x27, 0x2d, 0x31, 0x27, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x32, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92,
	0x41, 0x1b, 0x32, 0x19, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x62,
	0x79, 0x20, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x12, 0x64, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x2d, 0x92, 0x41, 0x2a, 0x32, 0x28, 0x53, 0x6f, 0x72, 0x74,
	0x20, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x20, 0x73,
	0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x41, 0x53, 0x43, 0x20, 0x6f, 0x72, 0x20,
	0x44, 0x45, 0x53, 0x43, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x8e, 0x04, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0xf5, 0x03, 0x92, 0x41, 0xf1,
	0x03, 0x32, 0xee, 0x03, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x27, 0x41, 0x4e, 0x44, 0x27,
	0x20, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x0a, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x3a, 0x20, 0x5b, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2c, 0x6b, 0x65,
	0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5d, 0x20, 0x0a, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x3a, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3d, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x3a, 0x31, 0x2c, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x3d, 0x3e, 0x20, 0x57, 0x68, 0x65, 0x72, 0x65, 0x20,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x20, 0x3d, 0x20, 0x31, 0x20, 0x41, 0x4e, 0x44, 0x20,
	0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x27, 0x20, 0x0a, 0x20, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3d, 0x20, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25,
	0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20,
	0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20,
	0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x21, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20,
	0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x49, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a,
	0x3e, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79,
	0x20, 0x3e, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27,
	0x6b, 0x65, 0x79, 0x3a, 0x3c, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20,
	0x27, 0x6b, 0x65, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a,
	0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x3a, 0x3e, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x31, 0x2c, 0x6b, 0x65, 0x79, 0x32, 0x3a, 0x3c, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x27,
	0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x20, 0x3e, 0x3d, 0x20, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x31, 0x20, 0x41, 0x4e, 0x44, 0x20, 0x6b, 0x65, 0x79, 0x32, 0x20, 0x3c, 0x3d, 0x20,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x27, 0x20, 0x42, 0x45, 0x54, 0x57, 0x45, 0x45, 0x4e, 0x20,
	0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79,
	0x31, 0x2e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x3a, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2d, 0x3e, 0x3e, 0x6e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x27, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x91, 0x04, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0xf4, 0x03,
	0x92, 0x41, 0xf0, 0x03, 0x32, 0xed, 0x03, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x27, 0x4f,
	0x52, 0x27, 0x20, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x0a, 0x20, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x3a, 0x20, 0x5b, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2c,
	0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5d, 0x20, 0x0a, 0x20, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x3a, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3d, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x3a, 0x31, 0x2c, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x41, 0x6e, 0x6e, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x3d, 0x3e, 0x20, 0x57, 0x68, 0x65, 0x72,
	0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x20, 0x3d, 0x20, 0x31, 0x20, 0x41, 0x4e,
	0x44, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x20, 0x0a, 0x20, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3d,
	0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79,
	0x3a, 0x25, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65,
	0x79, 0x20, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20,
	0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x21, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x49, 0x4c, 0x49, 0x4b, 0x45, 0x20,
	0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65,
	0x79, 0x3a, 0x3e, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b,
	0x65, 0x79, 0x20, 0x3e, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d,
	0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x3c, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d,
	0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27,
	0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x3a, 0x3e, 0x3d, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x31, 0x2c, 0x6b, 0x65, 0x79, 0x32, 0x3a, 0x3c, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x32, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x20, 0x3e, 0x3d, 0x20, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x31, 0x20, 0x41, 0x4e, 0x44, 0x20, 0x6b, 0x65, 0x79, 0x32, 0x20, 0x3c,
	0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x27, 0x20, 0x42, 0x45, 0x54, 0x57, 0x45, 0x45,
	0x4e, 0x20, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b,
	0x65, 0x79, 0x31, 0x2e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x3a, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2d, 0x3e,
	0x3e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x20, 0x3d, 0x20, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x27, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x12, 0xee,
	0x02, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0xd7,
	0x02, 0x92, 0x41, 0xd3, 0x02, 0x32, 0xd0, 0x02, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x27,
	0x4f, 0x52, 0x27, 0x20, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x0a, 0x20, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x3a, 0x20, 0x5b, 0x6b, 0x65, 0x79, 0x31, 0x2c, 0x6b, 0x65, 0x79, 0x32,
	0x2c, 0x6b, 0x65, 0x79, 0x33, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5d, 0x20, 0x0a, 0x20, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x3d, 0x6e, 0x61,
	0x6d, 0x65, 0x2c, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x20, 0x3d, 0x3e, 0x20, 0x57, 0x68, 0x65, 0x72, 0x65, 0x20, 0x6e, 0x61,
	0x6d, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x27, 0x20, 0x4f, 0x52, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x41,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x20, 0x0a, 0x20, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x0a, 0x20, 0x2d, 0x20,
	0x27, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27,
	0x6b, 0x65, 0x79, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d,
	0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d,
	0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x21,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x49,
	0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20,
	0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65,
	0x79, 0x31, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65,
	0x79, 0x31, 0x2d, 0x3e, 0x3e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x20,
	0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x48, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x62, 0x75,
	0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x22, 0x6b, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x75, 0x6c, 0x6b,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xef,
	0x0e, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x75, 0x6c, 0x6b, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x62, 0x75, 0x6c, 0x6b,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x52, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x12, 0x54, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32, 0x39, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x64,
	0x61, 0x74, 0x61, 0x20, 0x70, 0x65, 0x72, 0x20, 0x70, 0x61, 0x67, 0x65, 0x2e, 0x20, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x27, 0x2d, 0x31, 0x27,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x55, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x32, 0x3c, 0x50, 0x61,
	0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74,
	0x20, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x20, 0x27, 0x2d, 0x31, 0x27, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x32, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e,
	0x92, 0x41, 0x1b, 0x32, 0x19, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20,
	0x62, 0x79, 0x20, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x12, 0x64, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x2d, 0x92, 0x41, 0x2a, 0x32, 0x28, 0x53, 0x6f, 0x72,
	0x74, 0x20, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x20,
	0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x41, 0x53, 0x43, 0x20, 0x6f, 0x72,
	0x20, 0x44, 0x45, 0x53, 0x43, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x8e, 0x04, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0xf5, 0x03, 0x92, 0x41,
	0xf1, 0x03, 0x32, 0xee, 0x03, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x27, 0x41, 0x4e, 0x44,
	0x27, 0x20, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x0a, 0x20, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x3a, 0x20, 0x5b, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2c, 0x6b,
	0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5d, 0x20, 0x0a, 0x20, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x3a, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3d, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x3a, 0x31, 0x2c, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x41, 0x6e, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x3d, 0x3e, 0x20, 0x57, 0x68, 0x65, 0x72, 0x65,
	0x20, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x20, 0x3d, 0x20, 0x31, 0x20, 0x41, 0x4e, 0x44,
	0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x20, 0x0a, 0x20, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3d, 0x20,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a,
	0x25, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79,
	0x20, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a,
	0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x21, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27,
	0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x49, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79,
	0x3a, 0x3e, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65,
	0x79, 0x20, 0x3e, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20,
	0x27, 0x6b, 0x65, 0x79, 0x3a, 0x3c, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e,
	0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20,
	0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x3a, 0x3e, 0x3d, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x31, 0x2c, 0x6b, 0x65, 0x79, 0x32, 0x3a, 0x3c, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32,
	0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x20, 0x3e, 0x3d, 0x20, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x31, 0x20, 0x41, 0x4e, 0x44, 0x20, 0x6b, 0x65, 0x79, 0x32, 0x20, 0x3c, 0x3d,
	0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x27, 0x20, 0x42, 0x45, 0x54, 0x57, 0x45, 0x45, 0x4e,
	0x20, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65,
	0x79, 0x31, 0x2e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x3a, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2d, 0x3e, 0x3e,
	0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x27, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x91, 0x04, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0xf4,
	0x03, 0x92, 0x41, 0xf0, 0x03, 0x32, 0xed, 0x03, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x27,
	0x4f, 0x52, 0x27, 0x20, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x0a, 0x20, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x3a, 0x20, 0x5b, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x2c, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5d, 0x20, 0x0a, 0x20, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3d, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x3a, 0x31, 0x2c, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x41, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x3d, 0x3e, 0x20, 0x57, 0x68, 0x65,
	0x72, 0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x20, 0x3d, 0x20, 0x31, 0x20, 0x41,
	0x4e, 0x44, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x41, 0x6e, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x20, 0x0a, 0x20, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79,
	0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20,
	0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65,
	0x79, 0x3a, 0x25, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b,
	0x65, 0x79, 0x20, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27,
	0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x21, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x49, 0x4c, 0x49, 0x4b, 0x45,
	0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b,
	0x65, 0x79, 0x3a, 0x3e, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27,
	0x6b, 0x65, 0x79, 0x20, 0x3e, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20,
	0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x3c, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20,
	0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x3a, 0x3e, 0x3d, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x31, 0x2c, 0x6b, 0x65, 0x79, 0x32, 0x3a, 0x3c, 0x3d, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x32, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x20, 0x3e, 0x3d, 0x20,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x20, 0x41, 0x4e, 0x44, 0x20, 0x6b, 0x65, 0x79, 0x32, 0x20,
	0x3c, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x27, 0x20, 0x42, 0x45, 0x54, 0x57, 0x45,
	0x45, 0x4e, 0x20, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27,
	0x6b, 0x65, 0x79, 0x31, 0x2e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x3a,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2d,
	0x3e, 0x3e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x20, 0x3d, 0x20, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x27, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x12,
	0xee, 0x02, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42,
	0xd7, 0x02, 0x92, 0x41, 0xd3, 0x02, 0x32, 0xd0, 0x02, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20,
	0x27, 0x4f, 0x52, 0x27, 0x20, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x0a, 0x20, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x20, 0x5b, 0x6b, 0x65, 0x79, 0x31, 0x2c, 0x6b, 0x65, 0x79,
	0x32, 0x2c, 0x6b, 0x65, 0x79, 0x33, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5d, 0x20, 0x0a, 0x20,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x3d, 0x6e,
	0x61, 0x6d, 0x65, 0x2c, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x3d, 0x3e, 0x20, 0x57, 0x68, 0x65, 0x72, 0x65, 0x20, 0x6e,
	0x61, 0x6d, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x27, 0x20, 0x4f, 0x52, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27,
	0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x20, 0x0a, 0x20,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x0a, 0x20, 0x2d,
	0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20,
	0x27, 0x6b, 0x65, 0x79, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20,
	0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20,
	0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25,
	0x21, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20,
	0x49, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a,
	0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b,
	0x65, 0x79, 0x31, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b,
	0x65, 0x79, 0x31, 0x2d, 0x3e, 0x3e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31,
	0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x22, 0xf7, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x75, 0x6c, 0x6b,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x42, 0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4c, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x83, 0x0a, 0x0a, 0x20, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x54, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32, 0x39, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x70, 0x65, 0x72, 0x20, 0x70, 0x61, 0x67, 0x65,
	0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20,
	0x27, 0x2d, 0x31, 0x27, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x55, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x41, 0x92, 0x41, 0x3e,
	0x32, 0x3c, 0x50, 0x61, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x74, 0x6f,
	0x20, 0x67, 0x65, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x27, 0x2d, 0x31, 0x27, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x61, 0x67, 0x65, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32, 0x19, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x64,
	0x61, 0x74, 0x61, 0x20, 0x62, 0x79, 0x20, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x20, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x64, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x2d, 0x92, 0x41, 0x2a, 0x32,
	0x28, 0x53, 0x6f, 0x72, 0x74, 0x20, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x75, 0x6d, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x41, 0x53,
	0x43, 0x20, 0x6f, 0x72, 0x20, 0x44, 0x45, 0x53, 0x43, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x8e,
	0x04, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0xf5, 0x03, 0x92, 0x41, 0xf1, 0x03, 0x32, 0xee, 0x03, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20,
	0x27, 0x41, 0x4e, 0x44, 0x27, 0x20, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x0a, 0x20,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x20, 0x5b, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x2c, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5d, 0x20, 0x0a, 0x20,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3d,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x3a, 0x31, 0x2c, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x41,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x3d, 0x3e, 0x20, 0x57,
	0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x20, 0x3d, 0x20, 0x31,
	0x20, 0x41, 0x4e, 0x44, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x41, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x20, 0x0a, 0x20, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b,
	0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65,
	0x79, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27,
	0x6b, 0x65, 0x79, 0x3a, 0x25, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20,
	0x27, 0x6b, 0x65, 0x79, 0x20, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x21, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x49, 0x4c, 0x49,
	0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20,
	0x27, 0x6b, 0x65, 0x79, 0x3a, 0x3e, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e,
	0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3e, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20,
	0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x3c, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x3a, 0x3e, 0x3d,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x2c, 0x6b, 0x65, 0x79, 0x32, 0x3a, 0x3c, 0x3d, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x32, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x20, 0x3e,
	0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x20, 0x41, 0x4e, 0x44, 0x20, 0x6b, 0x65, 0x79,
	0x32, 0x20, 0x3c, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x27, 0x20, 0x42, 0x45, 0x54,
	0x57, 0x45, 0x45, 0x4e, 0x20, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x20, 0x0a, 0x20, 0x2d,
	0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79,
	0x31, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79,
	0x31, 0x2d, 0x3e, 0x3e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x20, 0x3d,
	0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0xee, 0x02, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0xd7, 0x02, 0x92, 0x41, 0xd3, 0x02, 0x32, 0xd0, 0x02, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20,
	0x27, 0x4f, 0x52, 0x27, 0x20, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x0a, 0x20, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x20, 0x5b, 0x6b, 0x65, 0x79, 0x31, 0x2c, 0x6b, 0x65, 0x79,
	0x32, 0x2c, 0x6b, 0x65, 0x79, 0x33, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5d, 0x20, 0x0a, 0x20,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x3d, 0x6e,
	0x61, 0x6d, 0x65, 0x2c, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x3d, 0x3e, 0x20, 0x57, 0x68, 0x65, 0x72, 0x65, 0x20, 0x6e,
	0x61, 0x6d, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x27, 0x20, 0x4f, 0x52, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27,
	0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x20, 0x0a, 0x20,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x0a, 0x20, 0x2d,
	0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20,
	0x27, 0x6b, 0x65, 0x79, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20,
	0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20,
	0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25,
	0x21, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20,
	0x49, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a,
	0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b,
	0x65, 0x79, 0x31, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b,
	0x65, 0x79, 0x31, 0x2d, 0x3e, 0x3e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31,
	0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x22, 0xf9, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x75, 0x6c, 0x6b,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4c,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xef, 0x02, 0x0a,
	0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x75, 0x6c, 0x6b, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x6c,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x5f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d,
	0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x13, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x44, 0x72, 0x61, 0x66, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x44, 0x72, 0x61, 0x66, 0x74, 0x22, 0xb6,
	0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x75, 0x6c,
	0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x50, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbb, 0x04, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x6f, 0x77, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x65,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x65,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x2f, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x52,
	0x03, 0x66, 0x65, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x62, 0x75,
	0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0d, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x53, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x62, 0x75, 0x6c, 0x6b,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3e, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x22, 0x6b, 0x0a, 0x25, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x3e, 0x0a, 0x24, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x75, 0x6c, 0x6b,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x22, 0x6b, 0x0a, 0x25, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x75, 0x6c, 0x6b,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x29, 0x0a, 0x17, 0x45, 0x78, 0x65, 0x63, 0x42, 0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc8, 0x01, 0x0a, 0x18, 0x45,
	0x78, 0x65, 0x63, 0x42, 0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6a,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x47, 0x0a, 0x1d, 0x45, 0x78, 0x65, 0x63, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x42, 0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x64,
	0x0a, 0x1e, 0x45, 0x78, 0x65, 0x63, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x42, 0x75, 0x6c, 0x6b,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x52, 0x75, 0x6e, 0x4d, 0x61, 0x73, 0x73, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x60, 0x0a, 0x1a, 0x52, 0x75, 0x6e, 0x4d, 0x61, 0x73, 0x73, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x21, 0x0a, 0x1f, 0x52, 0x75, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x73, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x66, 0x0a, 0x20, 0x52, 0x75, 0x6e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3e,
	0x0a, 0x26, 0x45, 0x78, 0x65, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x42, 0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x22, 0x79,
	0x0a, 0x27, 0x45, 0x78, 0x65, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x42, 0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x41, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x22, 0x31, 0x0a, 0x19, 0x45, 0x78, 0x65,
	0x63, 0x4d, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x22, 0x6c, 0x0a, 0x1a,
	0x45, 0x78, 0x65, 0x63, 0x4d, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x41,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x22, 0x32, 0x0a, 0x1a, 0x45, 0x78,
	0x65, 0x63, 0x4d, 0x61, 0x73, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x22, 0x6d,
	0x0a, 0x1b, 0x45, 0x78, 0x65, 0x63, 0x4d, 0x61, 0x73, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x22, 0xb6, 0x01,
	0x0a, 0x1a, 0x53, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x44, 0x12, 0x4c, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0x92, 0x41, 0x31, 0x32, 0x2f, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x20, 0x27, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x27, 0x2c, 0x20, 0x27, 0x72,
	0x65, 0x77, 0x6f, 0x72, 0x6b, 0x27, 0x2c, 0x20, 0x27, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x27,
	0x2c, 0x20, 0x27, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x27, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x42, 0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x27,
	0x0a, 0x0d, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xed, 0x02, 0x0a, 0x11, 0x49, 0x6e, 0x71, 0x75,
	0x69, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a,
	0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x69, 0x66,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x69,
	0x66, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x32, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x22, 0x5f, 0x0a, 0x19, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x33, 0x0a, 0x19,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x44, 0x22, 0xae, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x73,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x92, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73,
	0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x46, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x6c,
	0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x74,
	0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bulk_transfer_payload_proto_rawDescOnce sync.Once
	file_bulk_transfer_payload_proto_rawDescData = file_bulk_transfer_payload_proto_rawDesc
)

func file_bulk_transfer_payload_proto_rawDescGZIP() []byte {
	file_bulk_transfer_payload_proto_rawDescOnce.Do(func() {
		file_bulk_transfer_payload_proto_rawDescData = protoimpl.X.CompressGZIP(file_bulk_transfer_payload_proto_rawDescData)
	})
	return file_bulk_transfer_payload_proto_rawDescData
}

var file_bulk_transfer_payload_proto_msgTypes = make([]protoimpl.MessageInfo, 51)
var file_bulk_transfer_payload_proto_goTypes = []interface{}{
	(*BulkTransferData)(nil),                        // 0: bulk_transfer.service.v1.BulkTransferData
	(*BulkTransferDataList)(nil),                    // 1: bulk_transfer.service.v1.BulkTransferDataList
	(*BulkTransferDataDetail)(nil),                  // 2: bulk_transfer.service.v1.BulkTransferDataDetail
	(*BulkTransferItemDetail)(nil),                  // 3: bulk_transfer.service.v1.BulkTransferItemDetail
	(*BulkTransferItemData)(nil),                    // 4: bulk_transfer.service.v1.BulkTransferItemData
	(*BulkTransferItemValidation)(nil),              // 5: bulk_transfer.service.v1.BulkTransferItemValidation
	(*BulkTransferItemValidationData)(nil),          // 6: bulk_transfer.service.v1.BulkTransferItemValidationData
	(*TaskBulkTransferData)(nil),                    // 7: bulk_transfer.service.v1.TaskBulkTransferData
	(*TaskBulkTransferDataList)(nil),                // 8: bulk_transfer.service.v1.TaskBulkTransferDataList
	(*DecodeBulkTransferFileRequest)(nil),           // 9: bulk_transfer.service.v1.DecodeBulkTransferFileRequest
	(*DecodeBulkTransferFileResponse)(nil),          // 10: bulk_transfer.service.v1.DecodeBulkTransferFileResponse
	(*DecodeBulkTransferData)(nil),                  // 11: bulk_transfer.service.v1.DecodeBulkTransferData
	(*DecodeBulkTransferRow)(nil),                   // 12: bulk_transfer.service.v1.DecodeBulkTransferRow
	(*GetTaskBulkTransferFileRequest)(nil),          // 13: bulk_transfer.service.v1.GetTaskBulkTransferFileRequest
	(*GetTaskBulkTransferFileResponse)(nil),         // 14: bulk_transfer.service.v1.GetTaskBulkTransferFileResponse
	(*GetTaskBulkTransferDetailFileRequest)(nil),    // 15: bulk_transfer.service.v1.GetTaskBulkTransferDetailFileRequest
	(*GetTaskBulkTransferDetailFileResponse)(nil),   // 16: bulk_transfer.service.v1.GetTaskBulkTransferDetailFileResponse
	(*GetTaskBulkTransferRequest)(nil),              // 17: bulk_transfer.service.v1.GetTaskBulkTransferRequest
	(*GetTaskBulkTransferResponse)(nil),             // 18: bulk_transfer.service.v1.GetTaskBulkTransferResponse
	(*GetTaskBulkTransferDetailRequest)(nil),        // 19: bulk_transfer.service.v1.GetTaskBulkTransferDetailRequest
	(*GetTaskBulkTransferDetailResponse)(nil),       // 20: bulk_transfer.service.v1.GetTaskBulkTransferDetailResponse
	(*CreateTaskBulkTransferRequest)(nil),           // 21: bulk_transfer.service.v1.CreateTaskBulkTransferRequest
	(*CreateTaskBulkTransferResponse)(nil),          // 22: bulk_transfer.service.v1.CreateTaskBulkTransferResponse
	(*CreateTaskBulkTransferResponseData)(nil),      // 23: bulk_transfer.service.v1.CreateTaskBulkTransferResponseData
	(*CreateBulkTransferTransactionRequest)(nil),    // 24: bulk_transfer.service.v1.CreateBulkTransferTransactionRequest
	(*CreateBulkTransferTransactionResponse)(nil),   // 25: bulk_transfer.service.v1.CreateBulkTransferTransactionResponse
	(*CancelBulkTransferTransactionRequest)(nil),    // 26: bulk_transfer.service.v1.CancelBulkTransferTransactionRequest
	(*CancelBulkTransferTransactionResponse)(nil),   // 27: bulk_transfer.service.v1.CancelBulkTransferTransactionResponse
	(*ExecBulkTransferRequest)(nil),                 // 28: bulk_transfer.service.v1.ExecBulkTransferRequest
	(*ExecBulkTransferResponse)(nil),                // 29: bulk_transfer.service.v1.ExecBulkTransferResponse
	(*ExecFailedBulkTransferRequest)(nil),           // 30: bulk_transfer.service.v1.ExecFailedBulkTransferRequest
	(*ExecFailedBulkTransferResponse)(nil),          // 31: bulk_transfer.service.v1.ExecFailedBulkTransferResponse
	(*RunMassTransferJobRequest)(nil),               // 32: bulk_transfer.service.v1.RunMassTransferJobRequest
	(*RunMassTransferJobResponse)(nil),              // 33: bulk_transfer.service.v1.RunMassTransferJobResponse
	(*RunCreateMassTransferJobRequest)(nil),         // 34: bulk_transfer.service.v1.RunCreateMassTransferJobRequest
	(*RunCreateMassTransferJobResponse)(nil),        // 35: bulk_transfer.service.v1.RunCreateMassTransferJobResponse
	(*ExecFileCheckingBulkTransferJobRequest)(nil),  // 36: bulk_transfer.service.v1.ExecFileCheckingBulkTransferJobRequest
	(*ExecFileCheckingBulkTransferJobResponse)(nil), // 37: bulk_transfer.service.v1.ExecFileCheckingBulkTransferJobResponse
	(*ExecMassInquiryJobRequest)(nil),               // 38: bulk_transfer.service.v1.ExecMassInquiryJobRequest
	(*ExecMassInquiryJobResponse)(nil),              // 39: bulk_transfer.service.v1.ExecMassInquiryJobResponse
	(*ExecMassTransferJobRequest)(nil),              // 40: bulk_transfer.service.v1.ExecMassTransferJobRequest
	(*ExecMassTransferJobResponse)(nil),             // 41: bulk_transfer.service.v1.ExecMassTransferJobResponse
	(*SetTaskBulkTransferRequest)(nil),              // 42: bulk_transfer.service.v1.SetTaskBulkTransferRequest
	(*SetTaskBulkTransferResponse)(nil),             // 43: bulk_transfer.service.v1.SetTaskBulkTransferResponse
	(*InquiryResult)(nil),                           // 44: bulk_transfer.service.v1.InquiryResult
	(*InquiryResultItem)(nil),                       // 45: bulk_transfer.service.v1.InquiryResultItem
	(*CreateMassInquiryRequest)(nil),                // 46: bulk_transfer.service.v1.CreateMassInquiryRequest
	(*CreateMassInquiryResponse)(nil),               // 47: bulk_transfer.service.v1.CreateMassInquiryResponse
	(*CreateMassTransferRequest)(nil),               // 48: bulk_transfer.service.v1.CreateMassTransferRequest
	(*CreateMassTransferResponse)(nil),              // 49: bulk_transfer.service.v1.CreateMassTransferResponse
	(*CreateMassTransferResponseData)(nil),          // 50: bulk_transfer.service.v1.CreateMassTransferResponseData
	(FileExtension)(0),                              // 51: bulk_transfer.service.v1.FileExtension
	(TransactionType)(0),                            // 52: bulk_transfer.service.v1.TransactionType
	(TransactionSchedule)(0),                        // 53: bulk_transfer.service.v1.TransactionSchedule
	(MassStep)(0),                                   // 54: bulk_transfer.service.v1.MassStep
	(MassStatus)(0),                                 // 55: bulk_transfer.service.v1.MassStatus
	(*TransferResult)(nil),                          // 56: bulk_transfer.service.v1.TransferResult
	(*Task)(nil),                                    // 57: bulk_transfer.service.v1.Task
	(*ValidateWorkflowData)(nil),                    // 58: bulk_transfer.service.v1.ValidateWorkflowData
	(TaskStatus)(0),                                 // 59: bulk_transfer.service.v1.TaskStatus
	(TaskStep)(0),                                   // 60: bulk_transfer.service.v1.TaskStep
	(Direction)(0),                                  // 61: bulk_transfer.service.v1.Direction
	(FormatTemplate)(0),                             // 62: bulk_transfer.service.v1.FormatTemplate
	(*PaginationResponse)(nil),                      // 63: bulk_transfer.service.v1.PaginationResponse
	(Fee)(0),                                        // 64: bulk_transfer.service.v1.Fee
}
var file_bulk_transfer_payload_proto_depIdxs = []int32{
	51, // 0: bulk_transfer.service.v1.BulkTransferData.fileExtension:type_name -> bulk_transfer.service.v1.FileExtension
	52, // 1: bulk_transfer.service.v1.BulkTransferData.transactionType:type_name -> bulk_transfer.service.v1.TransactionType
	53, // 2: bulk_transfer.service.v1.BulkTransferData.transactionSchedule:type_name -> bulk_transfer.service.v1.TransactionSchedule
	54, // 3: bulk_transfer.service.v1.BulkTransferData.step:type_name -> bulk_transfer.service.v1.MassStep
	55, // 4: bulk_transfer.service.v1.BulkTransferData.inquiryStatus:type_name -> bulk_transfer.service.v1.MassStatus
	55, // 5: bulk_transfer.service.v1.BulkTransferData.transferStatus:type_name -> bulk_transfer.service.v1.MassStatus
	44, // 6: bulk_transfer.service.v1.BulkTransferData.inquiryResult:type_name -> bulk_transfer.service.v1.InquiryResult
	56, // 7: bulk_transfer.service.v1.BulkTransferData.transferResult:type_name -> bulk_transfer.service.v1.TransferResult
	51, // 8: bulk_transfer.service.v1.BulkTransferDataList.fileExtension:type_name -> bulk_transfer.service.v1.FileExtension
	52, // 9: bulk_transfer.service.v1.BulkTransferDataList.transactionType:type_name -> bulk_transfer.service.v1.TransactionType
	53, // 10: bulk_transfer.service.v1.BulkTransferDataList.transactionSchedule:type_name -> bulk_transfer.service.v1.TransactionSchedule
	54, // 11: bulk_transfer.service.v1.BulkTransferDataList.step:type_name -> bulk_transfer.service.v1.MassStep
	55, // 12: bulk_transfer.service.v1.BulkTransferDataList.inquiryStatus:type_name -> bulk_transfer.service.v1.MassStatus
	55, // 13: bulk_transfer.service.v1.BulkTransferDataList.transferStatus:type_name -> bulk_transfer.service.v1.MassStatus
	51, // 14: bulk_transfer.service.v1.BulkTransferDataDetail.fileExtension:type_name -> bulk_transfer.service.v1.FileExtension
	52, // 15: bulk_transfer.service.v1.BulkTransferDataDetail.transactionType:type_name -> bulk_transfer.service.v1.TransactionType
	53, // 16: bulk_transfer.service.v1.BulkTransferDataDetail.transactionSchedule:type_name -> bulk_transfer.service.v1.TransactionSchedule
	54, // 17: bulk_transfer.service.v1.BulkTransferDataDetail.step:type_name -> bulk_transfer.service.v1.MassStep
	55, // 18: bulk_transfer.service.v1.BulkTransferDataDetail.inquiryStatus:type_name -> bulk_transfer.service.v1.MassStatus
	55, // 19: bulk_transfer.service.v1.BulkTransferDataDetail.transferStatus:type_name -> bulk_transfer.service.v1.MassStatus
	3,  // 20: bulk_transfer.service.v1.BulkTransferDataDetail.items:type_name -> bulk_transfer.service.v1.BulkTransferItemDetail
	5,  // 21: bulk_transfer.service.v1.BulkTransferItemDetail.validation:type_name -> bulk_transfer.service.v1.BulkTransferItemValidation
	6,  // 22: bulk_transfer.service.v1.BulkTransferItemValidation.beneficiaryAccount:type_name -> bulk_transfer.service.v1.BulkTransferItemValidationData
	6,  // 23: bulk_transfer.service.v1.BulkTransferItemValidation.beneficiaryName:type_name -> bulk_transfer.service.v1.BulkTransferItemValidationData
	6,  // 24: bulk_transfer.service.v1.BulkTransferItemValidation.beneficiaryEmail:type_name -> bulk_transfer.service.v1.BulkTransferItemValidationData
	6,  // 25: bulk_transfer.service.v1.BulkTransferItemValidation.amount:type_name -> bulk_transfer.service.v1.BulkTransferItemValidationData
	6,  // 26: bulk_transfer.service.v1.BulkTransferItemValidation.customerReff:type_name -> bulk_transfer.service.v1.BulkTransferItemValidationData
	57, // 27: bulk_transfer.service.v1.TaskBulkTransferData.task:type_name -> bulk_transfer.service.v1.Task
	2,  // 28: bulk_transfer.service.v1.TaskBulkTransferData.data:type_name -> bulk_transfer.service.v1.BulkTransferDataDetail
	58, // 29: bulk_transfer.service.v1.TaskBulkTransferData.workflow:type_name -> bulk_transfer.service.v1.ValidateWorkflowData
	57, // 30: bulk_transfer.service.v1.TaskBulkTransferDataList.task:type_name -> bulk_transfer.service.v1.Task
	1,  // 31: bulk_transfer.service.v1.TaskBulkTransferDataList.data:type_name -> bulk_transfer.service.v1.BulkTransferDataList
	58, // 32: bulk_transfer.service.v1.TaskBulkTransferDataList.workflow:type_name -> bulk_transfer.service.v1.ValidateWorkflowData
	11, // 33: bulk_transfer.service.v1.DecodeBulkTransferFileResponse.data:type_name -> bulk_transfer.service.v1.DecodeBulkTransferData
	51, // 34: bulk_transfer.service.v1.DecodeBulkTransferData.fileType:type_name -> bulk_transfer.service.v1.FileExtension
	12, // 35: bulk_transfer.service.v1.DecodeBulkTransferData.rows:type_name -> bulk_transfer.service.v1.DecodeBulkTransferRow
	59, // 36: bulk_transfer.service.v1.GetTaskBulkTransferFileRequest.status:type_name -> bulk_transfer.service.v1.TaskStatus
	60, // 37: bulk_transfer.service.v1.GetTaskBulkTransferFileRequest.step:type_name -> bulk_transfer.service.v1.TaskStep
	61, // 38: bulk_transfer.service.v1.GetTaskBulkTransferFileRequest.dir:type_name -> bulk_transfer.service.v1.Direction
	62, // 39: bulk_transfer.service.v1.GetTaskBulkTransferFileRequest.fileFormat:type_name -> bulk_transfer.service.v1.FormatTemplate
	59, // 40: bulk_transfer.service.v1.GetTaskBulkTransferDetailFileRequest.status:type_name -> bulk_transfer.service.v1.TaskStatus
	60, // 41: bulk_transfer.service.v1.GetTaskBulkTransferDetailFileRequest.step:type_name -> bulk_transfer.service.v1.TaskStep
	61, // 42: bulk_transfer.service.v1.GetTaskBulkTransferDetailFileRequest.dir:type_name -> bulk_transfer.service.v1.Direction
	62, // 43: bulk_transfer.service.v1.GetTaskBulkTransferDetailFileRequest.fileFormat:type_name -> bulk_transfer.service.v1.FormatTemplate
	59, // 44: bulk_transfer.service.v1.GetTaskBulkTransferRequest.status:type_name -> bulk_transfer.service.v1.TaskStatus
	60, // 45: bulk_transfer.service.v1.GetTaskBulkTransferRequest.step:type_name -> bulk_transfer.service.v1.TaskStep
	61, // 46: bulk_transfer.service.v1.GetTaskBulkTransferRequest.dir:type_name -> bulk_transfer.service.v1.Direction
	8,  // 47: bulk_transfer.service.v1.GetTaskBulkTransferResponse.data:type_name -> bulk_transfer.service.v1.TaskBulkTransferDataList
	63, // 48: bulk_transfer.service.v1.GetTaskBulkTransferResponse.pagination:type_name -> bulk_transfer.service.v1.PaginationResponse
	61, // 49: bulk_transfer.service.v1.GetTaskBulkTransferDetailRequest.dir:type_name -> bulk_transfer.service.v1.Direction
	7,  // 50: bulk_transfer.service.v1.GetTaskBulkTransferDetailResponse.data:type_name -> bulk_transfer.service.v1.TaskBulkTransferData
	63, // 51: bulk_transfer.service.v1.GetTaskBulkTransferDetailResponse.pagination:type_name -> bulk_transfer.service.v1.PaginationResponse
	52, // 52: bulk_transfer.service.v1.CreateTaskBulkTransferRequest.transactionType:type_name -> bulk_transfer.service.v1.TransactionType
	53, // 53: bulk_transfer.service.v1.CreateTaskBulkTransferRequest.transactionSchedule:type_name -> bulk_transfer.service.v1.TransactionSchedule
	23, // 54: bulk_transfer.service.v1.CreateTaskBulkTransferResponse.data:type_name -> bulk_transfer.service.v1.CreateTaskBulkTransferResponseData
	64, // 55: bulk_transfer.service.v1.CreateTaskBulkTransferResponseData.fee:type_name -> bulk_transfer.service.v1.Fee
	55, // 56: bulk_transfer.service.v1.CreateTaskBulkTransferResponseData.inquiryStatus:type_name -> bulk_transfer.service.v1.MassStatus
	52, // 57: bulk_transfer.service.v1.CreateTaskBulkTransferResponseData.transactionType:type_name -> bulk_transfer.service.v1.TransactionType
	57, // 58: bulk_transfer.service.v1.SetTaskBulkTransferResponse.data:type_name -> bulk_transfer.service.v1.Task
	50, // 59: bulk_transfer.service.v1.CreateMassTransferResponse.data:type_name -> bulk_transfer.service.v1.CreateMassTransferResponseData
	0,  // 60: bulk_transfer.service.v1.CreateMassTransferResponseData.taskData:type_name -> bulk_transfer.service.v1.BulkTransferData
	61, // [61:61] is the sub-list for method output_type
	61, // [61:61] is the sub-list for method input_type
	61, // [61:61] is the sub-list for extension type_name
	61, // [61:61] is the sub-list for extension extendee
	0,  // [0:61] is the sub-list for field type_name
}

func init() { file_bulk_transfer_payload_proto_init() }
func file_bulk_transfer_payload_proto_init() {
	if File_bulk_transfer_payload_proto != nil {
		return
	}
	file_bulk_transfer_gorm_db_proto_init()
	file_bulk_transfer_core_proto_init()
	file_bulk_transfer_core_payload_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bulk_transfer_payload_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkTransferData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkTransferDataList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkTransferDataDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkTransferItemDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkTransferItemData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkTransferItemValidation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkTransferItemValidationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskBulkTransferData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskBulkTransferDataList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecodeBulkTransferFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecodeBulkTransferFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecodeBulkTransferData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecodeBulkTransferRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskBulkTransferFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskBulkTransferFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskBulkTransferDetailFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskBulkTransferDetailFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskBulkTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskBulkTransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskBulkTransferDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskBulkTransferDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTaskBulkTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTaskBulkTransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTaskBulkTransferResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBulkTransferTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBulkTransferTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelBulkTransferTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelBulkTransferTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecBulkTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecBulkTransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecFailedBulkTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecFailedBulkTransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunMassTransferJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunMassTransferJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCreateMassTransferJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCreateMassTransferJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecFileCheckingBulkTransferJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecFileCheckingBulkTransferJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecMassInquiryJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecMassInquiryJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecMassTransferJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecMassTransferJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTaskBulkTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTaskBulkTransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InquiryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InquiryResultItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMassInquiryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMassInquiryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMassTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMassTransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulk_transfer_payload_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMassTransferResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bulk_transfer_payload_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   51,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bulk_transfer_payload_proto_goTypes,
		DependencyIndexes: file_bulk_transfer_payload_proto_depIdxs,
		MessageInfos:      file_bulk_transfer_payload_proto_msgTypes,
	}.Build()
	File_bulk_transfer_payload_proto = out.File
	file_bulk_transfer_payload_proto_rawDesc = nil
	file_bulk_transfer_payload_proto_goTypes = nil
	file_bulk_transfer_payload_proto_depIdxs = nil
}
