// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: kliring_api.proto

package pb

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiServiceClient is the client API for ApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiServiceClient interface {
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	GetKliringTaskSingleTemplate(ctx context.Context, in *GetKliringTaskSingleTemplateRequest, opts ...grpc.CallOption) (*GetKliringTaskSingleTemplateResponse, error)
	GetKliringTaskSingleTemplateDetail(ctx context.Context, in *GetKliringTaskSingleTemplateDetailRequest, opts ...grpc.CallOption) (*GetKliringTaskSingleTemplateDetailResponse, error)
	CreateKliringTaskSingleTemplate(ctx context.Context, in *KliringSingleTemplate, opts ...grpc.CallOption) (*CreateKliringTaskSingleTemplateResponse, error)
	DeleteKliringTaskSingleTemplate(ctx context.Context, in *DeleteKliringTaskSingleTemplateRequest, opts ...grpc.CallOption) (*DeleteKliringTaskSingleTemplateResponse, error)
	GetKliringTask(ctx context.Context, in *GetKliringTaskRequest, opts ...grpc.CallOption) (*GetKliringTaskResponse, error)
	GetKliringTaskDetail(ctx context.Context, in *GetKliringTaskDetailRequest, opts ...grpc.CallOption) (*GetKliringTaskDetailResponse, error)
	GetKliringTaskFile(ctx context.Context, in *GetKliringTaskFileRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	UpdateKliringTask(ctx context.Context, in *UpdateKliringTaskRequest, opts ...grpc.CallOption) (*UpdateKliringTaskResponse, error)
	CreateKliringTaskSingle(ctx context.Context, in *CreateKliringTaskSingleRequest, opts ...grpc.CallOption) (*CreateKliringTaskSingleResponse, error)
	CreateKliringTaskMultiple(ctx context.Context, in *CreateKliringTaskMultipleRequest, opts ...grpc.CallOption) (*CreateKliringTaskMultipleResponse, error)
	ExecKliring(ctx context.Context, in *ExecKliringRequest, opts ...grpc.CallOption) (*ExecKliringResponse, error)
	CreateKliringTransaction(ctx context.Context, in *CreateKliringTransactionRequest, opts ...grpc.CallOption) (*CreateKliringTransactionResponse, error)
	CancelKliringTransaction(ctx context.Context, in *CancelKliringTransactionRequest, opts ...grpc.CallOption) (*CancelKliringTransactionResponse, error)
}

type apiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiServiceClient(cc grpc.ClientConnInterface) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/kliring.service.v1.ApiService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetKliringTaskSingleTemplate(ctx context.Context, in *GetKliringTaskSingleTemplateRequest, opts ...grpc.CallOption) (*GetKliringTaskSingleTemplateResponse, error) {
	out := new(GetKliringTaskSingleTemplateResponse)
	err := c.cc.Invoke(ctx, "/kliring.service.v1.ApiService/GetKliringTaskSingleTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetKliringTaskSingleTemplateDetail(ctx context.Context, in *GetKliringTaskSingleTemplateDetailRequest, opts ...grpc.CallOption) (*GetKliringTaskSingleTemplateDetailResponse, error) {
	out := new(GetKliringTaskSingleTemplateDetailResponse)
	err := c.cc.Invoke(ctx, "/kliring.service.v1.ApiService/GetKliringTaskSingleTemplateDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateKliringTaskSingleTemplate(ctx context.Context, in *KliringSingleTemplate, opts ...grpc.CallOption) (*CreateKliringTaskSingleTemplateResponse, error) {
	out := new(CreateKliringTaskSingleTemplateResponse)
	err := c.cc.Invoke(ctx, "/kliring.service.v1.ApiService/CreateKliringTaskSingleTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DeleteKliringTaskSingleTemplate(ctx context.Context, in *DeleteKliringTaskSingleTemplateRequest, opts ...grpc.CallOption) (*DeleteKliringTaskSingleTemplateResponse, error) {
	out := new(DeleteKliringTaskSingleTemplateResponse)
	err := c.cc.Invoke(ctx, "/kliring.service.v1.ApiService/DeleteKliringTaskSingleTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetKliringTask(ctx context.Context, in *GetKliringTaskRequest, opts ...grpc.CallOption) (*GetKliringTaskResponse, error) {
	out := new(GetKliringTaskResponse)
	err := c.cc.Invoke(ctx, "/kliring.service.v1.ApiService/GetKliringTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetKliringTaskDetail(ctx context.Context, in *GetKliringTaskDetailRequest, opts ...grpc.CallOption) (*GetKliringTaskDetailResponse, error) {
	out := new(GetKliringTaskDetailResponse)
	err := c.cc.Invoke(ctx, "/kliring.service.v1.ApiService/GetKliringTaskDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetKliringTaskFile(ctx context.Context, in *GetKliringTaskFileRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/kliring.service.v1.ApiService/GetKliringTaskFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateKliringTask(ctx context.Context, in *UpdateKliringTaskRequest, opts ...grpc.CallOption) (*UpdateKliringTaskResponse, error) {
	out := new(UpdateKliringTaskResponse)
	err := c.cc.Invoke(ctx, "/kliring.service.v1.ApiService/UpdateKliringTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateKliringTaskSingle(ctx context.Context, in *CreateKliringTaskSingleRequest, opts ...grpc.CallOption) (*CreateKliringTaskSingleResponse, error) {
	out := new(CreateKliringTaskSingleResponse)
	err := c.cc.Invoke(ctx, "/kliring.service.v1.ApiService/CreateKliringTaskSingle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateKliringTaskMultiple(ctx context.Context, in *CreateKliringTaskMultipleRequest, opts ...grpc.CallOption) (*CreateKliringTaskMultipleResponse, error) {
	out := new(CreateKliringTaskMultipleResponse)
	err := c.cc.Invoke(ctx, "/kliring.service.v1.ApiService/CreateKliringTaskMultiple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ExecKliring(ctx context.Context, in *ExecKliringRequest, opts ...grpc.CallOption) (*ExecKliringResponse, error) {
	out := new(ExecKliringResponse)
	err := c.cc.Invoke(ctx, "/kliring.service.v1.ApiService/ExecKliring", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateKliringTransaction(ctx context.Context, in *CreateKliringTransactionRequest, opts ...grpc.CallOption) (*CreateKliringTransactionResponse, error) {
	out := new(CreateKliringTransactionResponse)
	err := c.cc.Invoke(ctx, "/kliring.service.v1.ApiService/CreateKliringTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CancelKliringTransaction(ctx context.Context, in *CancelKliringTransactionRequest, opts ...grpc.CallOption) (*CancelKliringTransactionResponse, error) {
	out := new(CancelKliringTransactionResponse)
	err := c.cc.Invoke(ctx, "/kliring.service.v1.ApiService/CancelKliringTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServiceServer is the server API for ApiService service.
// All implementations must embed UnimplementedApiServiceServer
// for forward compatibility
type ApiServiceServer interface {
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	GetKliringTaskSingleTemplate(context.Context, *GetKliringTaskSingleTemplateRequest) (*GetKliringTaskSingleTemplateResponse, error)
	GetKliringTaskSingleTemplateDetail(context.Context, *GetKliringTaskSingleTemplateDetailRequest) (*GetKliringTaskSingleTemplateDetailResponse, error)
	CreateKliringTaskSingleTemplate(context.Context, *KliringSingleTemplate) (*CreateKliringTaskSingleTemplateResponse, error)
	DeleteKliringTaskSingleTemplate(context.Context, *DeleteKliringTaskSingleTemplateRequest) (*DeleteKliringTaskSingleTemplateResponse, error)
	GetKliringTask(context.Context, *GetKliringTaskRequest) (*GetKliringTaskResponse, error)
	GetKliringTaskDetail(context.Context, *GetKliringTaskDetailRequest) (*GetKliringTaskDetailResponse, error)
	GetKliringTaskFile(context.Context, *GetKliringTaskFileRequest) (*httpbody.HttpBody, error)
	UpdateKliringTask(context.Context, *UpdateKliringTaskRequest) (*UpdateKliringTaskResponse, error)
	CreateKliringTaskSingle(context.Context, *CreateKliringTaskSingleRequest) (*CreateKliringTaskSingleResponse, error)
	CreateKliringTaskMultiple(context.Context, *CreateKliringTaskMultipleRequest) (*CreateKliringTaskMultipleResponse, error)
	ExecKliring(context.Context, *ExecKliringRequest) (*ExecKliringResponse, error)
	CreateKliringTransaction(context.Context, *CreateKliringTransactionRequest) (*CreateKliringTransactionResponse, error)
	CancelKliringTransaction(context.Context, *CancelKliringTransactionRequest) (*CancelKliringTransactionResponse, error)
	mustEmbedUnimplementedApiServiceServer()
}

// UnimplementedApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApiServiceServer struct {
}

func (UnimplementedApiServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedApiServiceServer) GetKliringTaskSingleTemplate(context.Context, *GetKliringTaskSingleTemplateRequest) (*GetKliringTaskSingleTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKliringTaskSingleTemplate not implemented")
}
func (UnimplementedApiServiceServer) GetKliringTaskSingleTemplateDetail(context.Context, *GetKliringTaskSingleTemplateDetailRequest) (*GetKliringTaskSingleTemplateDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKliringTaskSingleTemplateDetail not implemented")
}
func (UnimplementedApiServiceServer) CreateKliringTaskSingleTemplate(context.Context, *KliringSingleTemplate) (*CreateKliringTaskSingleTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKliringTaskSingleTemplate not implemented")
}
func (UnimplementedApiServiceServer) DeleteKliringTaskSingleTemplate(context.Context, *DeleteKliringTaskSingleTemplateRequest) (*DeleteKliringTaskSingleTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKliringTaskSingleTemplate not implemented")
}
func (UnimplementedApiServiceServer) GetKliringTask(context.Context, *GetKliringTaskRequest) (*GetKliringTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKliringTask not implemented")
}
func (UnimplementedApiServiceServer) GetKliringTaskDetail(context.Context, *GetKliringTaskDetailRequest) (*GetKliringTaskDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKliringTaskDetail not implemented")
}
func (UnimplementedApiServiceServer) GetKliringTaskFile(context.Context, *GetKliringTaskFileRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKliringTaskFile not implemented")
}
func (UnimplementedApiServiceServer) UpdateKliringTask(context.Context, *UpdateKliringTaskRequest) (*UpdateKliringTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKliringTask not implemented")
}
func (UnimplementedApiServiceServer) CreateKliringTaskSingle(context.Context, *CreateKliringTaskSingleRequest) (*CreateKliringTaskSingleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKliringTaskSingle not implemented")
}
func (UnimplementedApiServiceServer) CreateKliringTaskMultiple(context.Context, *CreateKliringTaskMultipleRequest) (*CreateKliringTaskMultipleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKliringTaskMultiple not implemented")
}
func (UnimplementedApiServiceServer) ExecKliring(context.Context, *ExecKliringRequest) (*ExecKliringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecKliring not implemented")
}
func (UnimplementedApiServiceServer) CreateKliringTransaction(context.Context, *CreateKliringTransactionRequest) (*CreateKliringTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKliringTransaction not implemented")
}
func (UnimplementedApiServiceServer) CancelKliringTransaction(context.Context, *CancelKliringTransactionRequest) (*CancelKliringTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelKliringTransaction not implemented")
}
func (UnimplementedApiServiceServer) mustEmbedUnimplementedApiServiceServer() {}

// UnsafeApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServiceServer will
// result in compilation errors.
type UnsafeApiServiceServer interface {
	mustEmbedUnimplementedApiServiceServer()
}

func RegisterApiServiceServer(s grpc.ServiceRegistrar, srv ApiServiceServer) {
	s.RegisterService(&ApiService_ServiceDesc, srv)
}

func _ApiService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kliring.service.v1.ApiService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetKliringTaskSingleTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKliringTaskSingleTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetKliringTaskSingleTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kliring.service.v1.ApiService/GetKliringTaskSingleTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetKliringTaskSingleTemplate(ctx, req.(*GetKliringTaskSingleTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetKliringTaskSingleTemplateDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKliringTaskSingleTemplateDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetKliringTaskSingleTemplateDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kliring.service.v1.ApiService/GetKliringTaskSingleTemplateDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetKliringTaskSingleTemplateDetail(ctx, req.(*GetKliringTaskSingleTemplateDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateKliringTaskSingleTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KliringSingleTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateKliringTaskSingleTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kliring.service.v1.ApiService/CreateKliringTaskSingleTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateKliringTaskSingleTemplate(ctx, req.(*KliringSingleTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DeleteKliringTaskSingleTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKliringTaskSingleTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DeleteKliringTaskSingleTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kliring.service.v1.ApiService/DeleteKliringTaskSingleTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DeleteKliringTaskSingleTemplate(ctx, req.(*DeleteKliringTaskSingleTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetKliringTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKliringTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetKliringTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kliring.service.v1.ApiService/GetKliringTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetKliringTask(ctx, req.(*GetKliringTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetKliringTaskDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKliringTaskDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetKliringTaskDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kliring.service.v1.ApiService/GetKliringTaskDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetKliringTaskDetail(ctx, req.(*GetKliringTaskDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetKliringTaskFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKliringTaskFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetKliringTaskFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kliring.service.v1.ApiService/GetKliringTaskFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetKliringTaskFile(ctx, req.(*GetKliringTaskFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UpdateKliringTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKliringTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UpdateKliringTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kliring.service.v1.ApiService/UpdateKliringTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UpdateKliringTask(ctx, req.(*UpdateKliringTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateKliringTaskSingle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKliringTaskSingleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateKliringTaskSingle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kliring.service.v1.ApiService/CreateKliringTaskSingle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateKliringTaskSingle(ctx, req.(*CreateKliringTaskSingleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateKliringTaskMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKliringTaskMultipleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateKliringTaskMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kliring.service.v1.ApiService/CreateKliringTaskMultiple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateKliringTaskMultiple(ctx, req.(*CreateKliringTaskMultipleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ExecKliring_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecKliringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ExecKliring(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kliring.service.v1.ApiService/ExecKliring",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ExecKliring(ctx, req.(*ExecKliringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateKliringTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKliringTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateKliringTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kliring.service.v1.ApiService/CreateKliringTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateKliringTransaction(ctx, req.(*CreateKliringTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CancelKliringTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelKliringTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CancelKliringTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kliring.service.v1.ApiService/CancelKliringTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CancelKliringTransaction(ctx, req.(*CancelKliringTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiService_ServiceDesc is the grpc.ServiceDesc for ApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kliring.service.v1.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _ApiService_HealthCheck_Handler,
		},
		{
			MethodName: "GetKliringTaskSingleTemplate",
			Handler:    _ApiService_GetKliringTaskSingleTemplate_Handler,
		},
		{
			MethodName: "GetKliringTaskSingleTemplateDetail",
			Handler:    _ApiService_GetKliringTaskSingleTemplateDetail_Handler,
		},
		{
			MethodName: "CreateKliringTaskSingleTemplate",
			Handler:    _ApiService_CreateKliringTaskSingleTemplate_Handler,
		},
		{
			MethodName: "DeleteKliringTaskSingleTemplate",
			Handler:    _ApiService_DeleteKliringTaskSingleTemplate_Handler,
		},
		{
			MethodName: "GetKliringTask",
			Handler:    _ApiService_GetKliringTask_Handler,
		},
		{
			MethodName: "GetKliringTaskDetail",
			Handler:    _ApiService_GetKliringTaskDetail_Handler,
		},
		{
			MethodName: "GetKliringTaskFile",
			Handler:    _ApiService_GetKliringTaskFile_Handler,
		},
		{
			MethodName: "UpdateKliringTask",
			Handler:    _ApiService_UpdateKliringTask_Handler,
		},
		{
			MethodName: "CreateKliringTaskSingle",
			Handler:    _ApiService_CreateKliringTaskSingle_Handler,
		},
		{
			MethodName: "CreateKliringTaskMultiple",
			Handler:    _ApiService_CreateKliringTaskMultiple_Handler,
		},
		{
			MethodName: "ExecKliring",
			Handler:    _ApiService_ExecKliring_Handler,
		},
		{
			MethodName: "CreateKliringTransaction",
			Handler:    _ApiService_CreateKliringTransaction_Handler,
		},
		{
			MethodName: "CancelKliringTransaction",
			Handler:    _ApiService_CancelKliringTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kliring_api.proto",
}
