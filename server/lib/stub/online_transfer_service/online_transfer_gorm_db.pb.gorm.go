package pb

import (
	context "context"
	fmt "fmt"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	gorm "github.com/jinzhu/gorm"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	strings "strings"
	time "time"
)

type OnlineTransferTransactionORM struct {
	CreatedAt            *time.Time `gorm:"not null"`
	Data                 string     `gorm:"type:jsonb"`
	Id                   uint64     `gorm:"primary_key;not null"`
	TaskID               uint64
	TransactionID        string
	TransactionServiceID uint64
	UpdatedAt            *time.Time `gorm:"not null"`
}

// TableName overrides the default tablename generated by GORM
func (OnlineTransferTransactionORM) TableName() string {
	return "online_transfer_transactions"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *OnlineTransferTransaction) ToORM(ctx context.Context) (OnlineTransferTransactionORM, error) {
	to := OnlineTransferTransactionORM{}
	var err error
	if prehook, ok := interface{}(m).(OnlineTransferTransactionWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.TaskID = m.TaskID
	to.TransactionID = m.TransactionID
	to.TransactionServiceID = m.TransactionServiceID
	to.Data = m.Data
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	if posthook, ok := interface{}(m).(OnlineTransferTransactionWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *OnlineTransferTransactionORM) ToPB(ctx context.Context) (OnlineTransferTransaction, error) {
	to := OnlineTransferTransaction{}
	var err error
	if prehook, ok := interface{}(m).(OnlineTransferTransactionWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.TaskID = m.TaskID
	to.TransactionID = m.TransactionID
	to.TransactionServiceID = m.TransactionServiceID
	to.Data = m.Data
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	if posthook, ok := interface{}(m).(OnlineTransferTransactionWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type OnlineTransferTransaction the arg will be the target, the caller the one being converted from

// OnlineTransferTransactionBeforeToORM called before default ToORM code
type OnlineTransferTransactionWithBeforeToORM interface {
	BeforeToORM(context.Context, *OnlineTransferTransactionORM) error
}

// OnlineTransferTransactionAfterToORM called after default ToORM code
type OnlineTransferTransactionWithAfterToORM interface {
	AfterToORM(context.Context, *OnlineTransferTransactionORM) error
}

// OnlineTransferTransactionBeforeToPB called before default ToPB code
type OnlineTransferTransactionWithBeforeToPB interface {
	BeforeToPB(context.Context, *OnlineTransferTransaction) error
}

// OnlineTransferTransactionAfterToPB called after default ToPB code
type OnlineTransferTransactionWithAfterToPB interface {
	AfterToPB(context.Context, *OnlineTransferTransaction) error
}

type OnlineTransferSingleTemplateORM struct {
	AccountType             int32
	Amount                  float64
	BankCode                string
	BankName                string
	CreatedAt               *time.Time `gorm:"not null"`
	Currency                int32
	DealCode                string
	Email                   string
	ExchangeRate            float64
	ExchangeRateCurrency    string
	Fee                     int32
	FeeAmount               float64
	Id                      uint64 `gorm:"primary_key;not null"`
	JournalSquence          string
	PhoneNumber             string
	ReceivedAmount          float64
	ReceiverAccountAlias    string
	ReceiverAccountBalance  string
	ReceiverAccountCurrency string
	ReceiverAccountEmail    string
	ReceiverAccountName     string
	ReceiverAccountNumber   string
	RecurringDate           string
	RecurringDay            string
	RecurringFrequency      int32
	RecurringPeriodEnd      *time.Time
	RecurringPeriodStart    *time.Time
	RecurringTime           string
	Remark                  string
	ScheduledAt             *time.Time
	ScheduledDate           string
	ScheduledTime           string
	SenderAccountAlias      string
	SenderAccountBalance    string
	SenderAccountCurrency   string
	SenderAccountName       string
	SenderAccountNumber     string
	Status                  string
	StatusMessage           string
	TemplateName            string
	TransactionSchedule     int32
	UpdatedAt               *time.Time `gorm:"not null"`
}

// TableName overrides the default tablename generated by GORM
func (OnlineTransferSingleTemplateORM) TableName() string {
	return "online_transfer_single_templates"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *OnlineTransferSingleTemplate) ToORM(ctx context.Context) (OnlineTransferSingleTemplateORM, error) {
	to := OnlineTransferSingleTemplateORM{}
	var err error
	if prehook, ok := interface{}(m).(OnlineTransferSingleTemplateWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.SenderAccountNumber = m.SenderAccountNumber
	to.SenderAccountCurrency = m.SenderAccountCurrency
	to.SenderAccountName = m.SenderAccountName
	to.SenderAccountAlias = m.SenderAccountAlias
	to.SenderAccountBalance = m.SenderAccountBalance
	to.ReceiverAccountNumber = m.ReceiverAccountNumber
	to.ReceiverAccountCurrency = m.ReceiverAccountCurrency
	to.ReceiverAccountName = m.ReceiverAccountName
	to.ReceiverAccountAlias = m.ReceiverAccountAlias
	to.ReceiverAccountBalance = m.ReceiverAccountBalance
	to.ReceiverAccountEmail = m.ReceiverAccountEmail
	to.DealCode = m.DealCode
	to.Currency = int32(m.Currency)
	to.Fee = int32(m.Fee)
	to.Amount = m.Amount
	to.TransactionSchedule = int32(m.TransactionSchedule)
	to.ScheduledDate = m.ScheduledDate
	to.ScheduledTime = m.ScheduledTime
	to.ExchangeRate = m.ExchangeRate
	to.ReceivedAmount = m.ReceivedAmount
	to.ExchangeRateCurrency = m.ExchangeRateCurrency
	to.RecurringFrequency = int32(m.RecurringFrequency)
	if m.RecurringPeriodStart != nil {
		t := m.RecurringPeriodStart.AsTime()
		to.RecurringPeriodStart = &t
	}
	if m.RecurringPeriodEnd != nil {
		t := m.RecurringPeriodEnd.AsTime()
		to.RecurringPeriodEnd = &t
	}
	to.RecurringDay = m.RecurringDay
	to.RecurringDate = m.RecurringDate
	to.RecurringTime = m.RecurringTime
	to.Remark = m.Remark
	to.JournalSquence = m.JournalSquence
	to.Status = m.Status
	to.StatusMessage = m.StatusMessage
	to.FeeAmount = m.FeeAmount
	if m.ScheduledAt != nil {
		t := m.ScheduledAt.AsTime()
		to.ScheduledAt = &t
	}
	to.TemplateName = m.TemplateName
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	to.AccountType = int32(m.AccountType)
	to.PhoneNumber = m.PhoneNumber
	to.Email = m.Email
	to.BankCode = m.BankCode
	to.BankName = m.BankName
	if posthook, ok := interface{}(m).(OnlineTransferSingleTemplateWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *OnlineTransferSingleTemplateORM) ToPB(ctx context.Context) (OnlineTransferSingleTemplate, error) {
	to := OnlineTransferSingleTemplate{}
	var err error
	if prehook, ok := interface{}(m).(OnlineTransferSingleTemplateWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.SenderAccountNumber = m.SenderAccountNumber
	to.SenderAccountCurrency = m.SenderAccountCurrency
	to.SenderAccountName = m.SenderAccountName
	to.SenderAccountAlias = m.SenderAccountAlias
	to.SenderAccountBalance = m.SenderAccountBalance
	to.ReceiverAccountNumber = m.ReceiverAccountNumber
	to.ReceiverAccountCurrency = m.ReceiverAccountCurrency
	to.ReceiverAccountName = m.ReceiverAccountName
	to.ReceiverAccountAlias = m.ReceiverAccountAlias
	to.ReceiverAccountBalance = m.ReceiverAccountBalance
	to.ReceiverAccountEmail = m.ReceiverAccountEmail
	to.DealCode = m.DealCode
	to.Currency = CurrencyType(m.Currency)
	to.Fee = Fee(m.Fee)
	to.Amount = m.Amount
	to.TransactionSchedule = TransactionSchedule(m.TransactionSchedule)
	to.ScheduledDate = m.ScheduledDate
	to.ScheduledTime = m.ScheduledTime
	to.ExchangeRate = m.ExchangeRate
	to.ReceivedAmount = m.ReceivedAmount
	to.ExchangeRateCurrency = m.ExchangeRateCurrency
	to.RecurringFrequency = RecurringFrequency(m.RecurringFrequency)
	if m.RecurringPeriodStart != nil {
		to.RecurringPeriodStart = timestamppb.New(*m.RecurringPeriodStart)
	}
	if m.RecurringPeriodEnd != nil {
		to.RecurringPeriodEnd = timestamppb.New(*m.RecurringPeriodEnd)
	}
	to.RecurringDay = m.RecurringDay
	to.RecurringDate = m.RecurringDate
	to.RecurringTime = m.RecurringTime
	to.Remark = m.Remark
	to.JournalSquence = m.JournalSquence
	to.Status = m.Status
	to.StatusMessage = m.StatusMessage
	to.FeeAmount = m.FeeAmount
	if m.ScheduledAt != nil {
		to.ScheduledAt = timestamppb.New(*m.ScheduledAt)
	}
	to.TemplateName = m.TemplateName
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	to.AccountType = AccountType(m.AccountType)
	to.PhoneNumber = m.PhoneNumber
	to.Email = m.Email
	to.BankCode = m.BankCode
	to.BankName = m.BankName
	if posthook, ok := interface{}(m).(OnlineTransferSingleTemplateWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type OnlineTransferSingleTemplate the arg will be the target, the caller the one being converted from

// OnlineTransferSingleTemplateBeforeToORM called before default ToORM code
type OnlineTransferSingleTemplateWithBeforeToORM interface {
	BeforeToORM(context.Context, *OnlineTransferSingleTemplateORM) error
}

// OnlineTransferSingleTemplateAfterToORM called after default ToORM code
type OnlineTransferSingleTemplateWithAfterToORM interface {
	AfterToORM(context.Context, *OnlineTransferSingleTemplateORM) error
}

// OnlineTransferSingleTemplateBeforeToPB called before default ToPB code
type OnlineTransferSingleTemplateWithBeforeToPB interface {
	BeforeToPB(context.Context, *OnlineTransferSingleTemplate) error
}

// OnlineTransferSingleTemplateAfterToPB called after default ToPB code
type OnlineTransferSingleTemplateWithAfterToPB interface {
	AfterToPB(context.Context, *OnlineTransferSingleTemplate) error
}

// DefaultCreateOnlineTransferTransaction executes a basic gorm create call
func DefaultCreateOnlineTransferTransaction(ctx context.Context, in *OnlineTransferTransaction, db *gorm.DB) (*OnlineTransferTransaction, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(OnlineTransferTransactionORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(OnlineTransferTransactionORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type OnlineTransferTransactionORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type OnlineTransferTransactionORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadOnlineTransferTransaction(ctx context.Context, in *OnlineTransferTransaction, db *gorm.DB) (*OnlineTransferTransaction, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(OnlineTransferTransactionORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &OnlineTransferTransactionORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(OnlineTransferTransactionORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := OnlineTransferTransactionORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(OnlineTransferTransactionORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type OnlineTransferTransactionORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type OnlineTransferTransactionORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type OnlineTransferTransactionORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteOnlineTransferTransaction(ctx context.Context, in *OnlineTransferTransaction, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(OnlineTransferTransactionORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&OnlineTransferTransactionORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(OnlineTransferTransactionORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type OnlineTransferTransactionORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type OnlineTransferTransactionORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteOnlineTransferTransactionSet(ctx context.Context, in []*OnlineTransferTransaction, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []uint64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&OnlineTransferTransactionORM{})).(OnlineTransferTransactionORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&OnlineTransferTransactionORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&OnlineTransferTransactionORM{})).(OnlineTransferTransactionORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type OnlineTransferTransactionORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*OnlineTransferTransaction, *gorm.DB) (*gorm.DB, error)
}
type OnlineTransferTransactionORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*OnlineTransferTransaction, *gorm.DB) error
}

// DefaultStrictUpdateOnlineTransferTransaction clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateOnlineTransferTransaction(ctx context.Context, in *OnlineTransferTransaction, db *gorm.DB) (*OnlineTransferTransaction, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateOnlineTransferTransaction")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &OnlineTransferTransactionORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(OnlineTransferTransactionORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(OnlineTransferTransactionORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(OnlineTransferTransactionORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type OnlineTransferTransactionORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type OnlineTransferTransactionORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type OnlineTransferTransactionORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchOnlineTransferTransaction executes a basic gorm update call with patch behavior
func DefaultPatchOnlineTransferTransaction(ctx context.Context, in *OnlineTransferTransaction, updateMask *field_mask.FieldMask, db *gorm.DB) (*OnlineTransferTransaction, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj OnlineTransferTransaction
	var err error
	if hook, ok := interface{}(&pbObj).(OnlineTransferTransactionWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadOnlineTransferTransaction(ctx, &OnlineTransferTransaction{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(OnlineTransferTransactionWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskOnlineTransferTransaction(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(OnlineTransferTransactionWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateOnlineTransferTransaction(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(OnlineTransferTransactionWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type OnlineTransferTransactionWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *OnlineTransferTransaction, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type OnlineTransferTransactionWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *OnlineTransferTransaction, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type OnlineTransferTransactionWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *OnlineTransferTransaction, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type OnlineTransferTransactionWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *OnlineTransferTransaction, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetOnlineTransferTransaction executes a bulk gorm update call with patch behavior
func DefaultPatchSetOnlineTransferTransaction(ctx context.Context, objects []*OnlineTransferTransaction, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*OnlineTransferTransaction, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*OnlineTransferTransaction, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchOnlineTransferTransaction(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskOnlineTransferTransaction patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskOnlineTransferTransaction(ctx context.Context, patchee *OnlineTransferTransaction, patcher *OnlineTransferTransaction, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*OnlineTransferTransaction, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"TaskID" {
			patchee.TaskID = patcher.TaskID
			continue
		}
		if f == prefix+"TransactionID" {
			patchee.TransactionID = patcher.TransactionID
			continue
		}
		if f == prefix+"TransactionServiceID" {
			patchee.TransactionServiceID = patcher.TransactionServiceID
			continue
		}
		if f == prefix+"Data" {
			patchee.Data = patcher.Data
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListOnlineTransferTransaction executes a gorm list call
func DefaultListOnlineTransferTransaction(ctx context.Context, db *gorm.DB) ([]*OnlineTransferTransaction, error) {
	in := OnlineTransferTransaction{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(OnlineTransferTransactionORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &OnlineTransferTransactionORM{}, &OnlineTransferTransaction{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(OnlineTransferTransactionORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []OnlineTransferTransactionORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(OnlineTransferTransactionORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*OnlineTransferTransaction{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type OnlineTransferTransactionORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type OnlineTransferTransactionORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type OnlineTransferTransactionORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]OnlineTransferTransactionORM) error
}

// DefaultCreateOnlineTransferSingleTemplate executes a basic gorm create call
func DefaultCreateOnlineTransferSingleTemplate(ctx context.Context, in *OnlineTransferSingleTemplate, db *gorm.DB) (*OnlineTransferSingleTemplate, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(OnlineTransferSingleTemplateORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(OnlineTransferSingleTemplateORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type OnlineTransferSingleTemplateORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type OnlineTransferSingleTemplateORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadOnlineTransferSingleTemplate(ctx context.Context, in *OnlineTransferSingleTemplate, db *gorm.DB) (*OnlineTransferSingleTemplate, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(OnlineTransferSingleTemplateORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &OnlineTransferSingleTemplateORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(OnlineTransferSingleTemplateORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := OnlineTransferSingleTemplateORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(OnlineTransferSingleTemplateORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type OnlineTransferSingleTemplateORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type OnlineTransferSingleTemplateORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type OnlineTransferSingleTemplateORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteOnlineTransferSingleTemplate(ctx context.Context, in *OnlineTransferSingleTemplate, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(OnlineTransferSingleTemplateORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&OnlineTransferSingleTemplateORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(OnlineTransferSingleTemplateORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type OnlineTransferSingleTemplateORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type OnlineTransferSingleTemplateORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteOnlineTransferSingleTemplateSet(ctx context.Context, in []*OnlineTransferSingleTemplate, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []uint64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&OnlineTransferSingleTemplateORM{})).(OnlineTransferSingleTemplateORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&OnlineTransferSingleTemplateORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&OnlineTransferSingleTemplateORM{})).(OnlineTransferSingleTemplateORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type OnlineTransferSingleTemplateORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*OnlineTransferSingleTemplate, *gorm.DB) (*gorm.DB, error)
}
type OnlineTransferSingleTemplateORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*OnlineTransferSingleTemplate, *gorm.DB) error
}

// DefaultStrictUpdateOnlineTransferSingleTemplate clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateOnlineTransferSingleTemplate(ctx context.Context, in *OnlineTransferSingleTemplate, db *gorm.DB) (*OnlineTransferSingleTemplate, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateOnlineTransferSingleTemplate")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &OnlineTransferSingleTemplateORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(OnlineTransferSingleTemplateORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(OnlineTransferSingleTemplateORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(OnlineTransferSingleTemplateORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type OnlineTransferSingleTemplateORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type OnlineTransferSingleTemplateORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type OnlineTransferSingleTemplateORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchOnlineTransferSingleTemplate executes a basic gorm update call with patch behavior
func DefaultPatchOnlineTransferSingleTemplate(ctx context.Context, in *OnlineTransferSingleTemplate, updateMask *field_mask.FieldMask, db *gorm.DB) (*OnlineTransferSingleTemplate, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj OnlineTransferSingleTemplate
	var err error
	if hook, ok := interface{}(&pbObj).(OnlineTransferSingleTemplateWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadOnlineTransferSingleTemplate(ctx, &OnlineTransferSingleTemplate{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(OnlineTransferSingleTemplateWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskOnlineTransferSingleTemplate(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(OnlineTransferSingleTemplateWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateOnlineTransferSingleTemplate(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(OnlineTransferSingleTemplateWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type OnlineTransferSingleTemplateWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *OnlineTransferSingleTemplate, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type OnlineTransferSingleTemplateWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *OnlineTransferSingleTemplate, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type OnlineTransferSingleTemplateWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *OnlineTransferSingleTemplate, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type OnlineTransferSingleTemplateWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *OnlineTransferSingleTemplate, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetOnlineTransferSingleTemplate executes a bulk gorm update call with patch behavior
func DefaultPatchSetOnlineTransferSingleTemplate(ctx context.Context, objects []*OnlineTransferSingleTemplate, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*OnlineTransferSingleTemplate, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*OnlineTransferSingleTemplate, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchOnlineTransferSingleTemplate(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskOnlineTransferSingleTemplate patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskOnlineTransferSingleTemplate(ctx context.Context, patchee *OnlineTransferSingleTemplate, patcher *OnlineTransferSingleTemplate, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*OnlineTransferSingleTemplate, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedRecurringPeriodStart bool
	var updatedRecurringPeriodEnd bool
	var updatedScheduledAt bool
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"SenderAccountNumber" {
			patchee.SenderAccountNumber = patcher.SenderAccountNumber
			continue
		}
		if f == prefix+"SenderAccountCurrency" {
			patchee.SenderAccountCurrency = patcher.SenderAccountCurrency
			continue
		}
		if f == prefix+"SenderAccountName" {
			patchee.SenderAccountName = patcher.SenderAccountName
			continue
		}
		if f == prefix+"SenderAccountAlias" {
			patchee.SenderAccountAlias = patcher.SenderAccountAlias
			continue
		}
		if f == prefix+"SenderAccountBalance" {
			patchee.SenderAccountBalance = patcher.SenderAccountBalance
			continue
		}
		if f == prefix+"ReceiverAccountNumber" {
			patchee.ReceiverAccountNumber = patcher.ReceiverAccountNumber
			continue
		}
		if f == prefix+"ReceiverAccountCurrency" {
			patchee.ReceiverAccountCurrency = patcher.ReceiverAccountCurrency
			continue
		}
		if f == prefix+"ReceiverAccountName" {
			patchee.ReceiverAccountName = patcher.ReceiverAccountName
			continue
		}
		if f == prefix+"ReceiverAccountAlias" {
			patchee.ReceiverAccountAlias = patcher.ReceiverAccountAlias
			continue
		}
		if f == prefix+"ReceiverAccountBalance" {
			patchee.ReceiverAccountBalance = patcher.ReceiverAccountBalance
			continue
		}
		if f == prefix+"ReceiverAccountEmail" {
			patchee.ReceiverAccountEmail = patcher.ReceiverAccountEmail
			continue
		}
		if f == prefix+"DealCode" {
			patchee.DealCode = patcher.DealCode
			continue
		}
		if f == prefix+"Currency" {
			patchee.Currency = patcher.Currency
			continue
		}
		if f == prefix+"Fee" {
			patchee.Fee = patcher.Fee
			continue
		}
		if f == prefix+"Amount" {
			patchee.Amount = patcher.Amount
			continue
		}
		if f == prefix+"TransactionSchedule" {
			patchee.TransactionSchedule = patcher.TransactionSchedule
			continue
		}
		if f == prefix+"ScheduledDate" {
			patchee.ScheduledDate = patcher.ScheduledDate
			continue
		}
		if f == prefix+"ScheduledTime" {
			patchee.ScheduledTime = patcher.ScheduledTime
			continue
		}
		if f == prefix+"ExchangeRate" {
			patchee.ExchangeRate = patcher.ExchangeRate
			continue
		}
		if f == prefix+"ReceivedAmount" {
			patchee.ReceivedAmount = patcher.ReceivedAmount
			continue
		}
		if f == prefix+"ExchangeRateCurrency" {
			patchee.ExchangeRateCurrency = patcher.ExchangeRateCurrency
			continue
		}
		if f == prefix+"RecurringFrequency" {
			patchee.RecurringFrequency = patcher.RecurringFrequency
			continue
		}
		if !updatedRecurringPeriodStart && strings.HasPrefix(f, prefix+"RecurringPeriodStart.") {
			if patcher.RecurringPeriodStart == nil {
				patchee.RecurringPeriodStart = nil
				continue
			}
			if patchee.RecurringPeriodStart == nil {
				patchee.RecurringPeriodStart = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"RecurringPeriodStart."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.RecurringPeriodStart, patchee.RecurringPeriodStart, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"RecurringPeriodStart" {
			updatedRecurringPeriodStart = true
			patchee.RecurringPeriodStart = patcher.RecurringPeriodStart
			continue
		}
		if !updatedRecurringPeriodEnd && strings.HasPrefix(f, prefix+"RecurringPeriodEnd.") {
			if patcher.RecurringPeriodEnd == nil {
				patchee.RecurringPeriodEnd = nil
				continue
			}
			if patchee.RecurringPeriodEnd == nil {
				patchee.RecurringPeriodEnd = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"RecurringPeriodEnd."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.RecurringPeriodEnd, patchee.RecurringPeriodEnd, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"RecurringPeriodEnd" {
			updatedRecurringPeriodEnd = true
			patchee.RecurringPeriodEnd = patcher.RecurringPeriodEnd
			continue
		}
		if f == prefix+"RecurringDay" {
			patchee.RecurringDay = patcher.RecurringDay
			continue
		}
		if f == prefix+"RecurringDate" {
			patchee.RecurringDate = patcher.RecurringDate
			continue
		}
		if f == prefix+"RecurringTime" {
			patchee.RecurringTime = patcher.RecurringTime
			continue
		}
		if f == prefix+"Remark" {
			patchee.Remark = patcher.Remark
			continue
		}
		if f == prefix+"JournalSquence" {
			patchee.JournalSquence = patcher.JournalSquence
			continue
		}
		if f == prefix+"Status" {
			patchee.Status = patcher.Status
			continue
		}
		if f == prefix+"StatusMessage" {
			patchee.StatusMessage = patcher.StatusMessage
			continue
		}
		if f == prefix+"FeeAmount" {
			patchee.FeeAmount = patcher.FeeAmount
			continue
		}
		if !updatedScheduledAt && strings.HasPrefix(f, prefix+"ScheduledAt.") {
			if patcher.ScheduledAt == nil {
				patchee.ScheduledAt = nil
				continue
			}
			if patchee.ScheduledAt == nil {
				patchee.ScheduledAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"ScheduledAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.ScheduledAt, patchee.ScheduledAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"ScheduledAt" {
			updatedScheduledAt = true
			patchee.ScheduledAt = patcher.ScheduledAt
			continue
		}
		if f == prefix+"TemplateName" {
			patchee.TemplateName = patcher.TemplateName
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
		if f == prefix+"AccountType" {
			patchee.AccountType = patcher.AccountType
			continue
		}
		if f == prefix+"PhoneNumber" {
			patchee.PhoneNumber = patcher.PhoneNumber
			continue
		}
		if f == prefix+"Email" {
			patchee.Email = patcher.Email
			continue
		}
		if f == prefix+"BankCode" {
			patchee.BankCode = patcher.BankCode
			continue
		}
		if f == prefix+"BankName" {
			patchee.BankName = patcher.BankName
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListOnlineTransferSingleTemplate executes a gorm list call
func DefaultListOnlineTransferSingleTemplate(ctx context.Context, db *gorm.DB) ([]*OnlineTransferSingleTemplate, error) {
	in := OnlineTransferSingleTemplate{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(OnlineTransferSingleTemplateORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &OnlineTransferSingleTemplateORM{}, &OnlineTransferSingleTemplate{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(OnlineTransferSingleTemplateORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []OnlineTransferSingleTemplateORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(OnlineTransferSingleTemplateORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*OnlineTransferSingleTemplate{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type OnlineTransferSingleTemplateORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type OnlineTransferSingleTemplateORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type OnlineTransferSingleTemplateORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]OnlineTransferSingleTemplateORM) error
}
