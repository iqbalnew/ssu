// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: liquidity_gorm_db.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Liquidity

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeletedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "DeletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on LiquiditySchemes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LiquiditySchemes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LiquiditySchemes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LiquiditySchemesMultiError, or nil if none found.
func (m *LiquiditySchemes) ValidateAll() error {
	return m.validate(true)
}

func (m *LiquiditySchemes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Code

	// no validation rules for Description

	// no validation rules for CurrencyID

	// no validation rules for CurrencyCode

	// no validation rules for CompanyID

	// no validation rules for CompanyGroupID

	// no validation rules for SchemeType

	if all {
		switch v := interface{}(m.GetStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LiquiditySchemesValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LiquiditySchemesValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LiquiditySchemesValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LiquiditySchemesValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LiquiditySchemesValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LiquiditySchemesValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Priority

	// no validation rules for IsActive

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LiquiditySchemesValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LiquiditySchemesValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LiquiditySchemesValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedByID

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LiquiditySchemesValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LiquiditySchemesValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LiquiditySchemesValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UpdatedByID

	if all {
		switch v := interface{}(m.GetDeletedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LiquiditySchemesValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LiquiditySchemesValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LiquiditySchemesValidationError{
				field:  "DeletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DeletedByID

	for idx, item := range m.GetCashflow() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LiquiditySchemesValidationError{
						field:  fmt.Sprintf("Cashflow[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LiquiditySchemesValidationError{
						field:  fmt.Sprintf("Cashflow[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LiquiditySchemesValidationError{
					field:  fmt.Sprintf("Cashflow[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LiquiditySchemesMultiError(errors)
	}

	return nil
}

// LiquiditySchemesMultiError is an error wrapping multiple validation errors
// returned by LiquiditySchemes.ValidateAll() if the designated constraints
// aren't met.
type LiquiditySchemesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LiquiditySchemesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LiquiditySchemesMultiError) AllErrors() []error { return m }

// LiquiditySchemesValidationError is the validation error returned by
// LiquiditySchemes.Validate if the designated constraints aren't met.
type LiquiditySchemesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LiquiditySchemesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LiquiditySchemesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LiquiditySchemesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LiquiditySchemesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LiquiditySchemesValidationError) ErrorName() string { return "LiquiditySchemesValidationError" }

// Error satisfies the builtin error interface
func (e LiquiditySchemesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLiquiditySchemes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LiquiditySchemesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LiquiditySchemesValidationError{}

// Validate checks the field values on LiquidityCashflow with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LiquidityCashflow) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LiquidityCashflow with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LiquidityCashflowMultiError, or nil if none found.
func (m *LiquidityCashflow) ValidateAll() error {
	return m.validate(true)
}

func (m *LiquidityCashflow) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	// no validation rules for Period

	// no validation rules for PeriodTimes

	// no validation rules for TBAType

	// no validation rules for TBAValue

	// no validation rules for TBARoundedBase

	// no validation rules for TBATopValue

	// no validation rules for TBABottomValue

	// no validation rules for Recurring

	// no validation rules for RecurringValue

	// no validation rules for RecurringDate

	// no validation rules for RecurringDays

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LiquidityCashflowValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LiquidityCashflowValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LiquidityCashflowValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LiquidityCashflowValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LiquidityCashflowValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LiquidityCashflowValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeletedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LiquidityCashflowValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LiquidityCashflowValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LiquidityCashflowValidationError{
				field:  "DeletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LiquidityCashflowValidationError{
						field:  fmt.Sprintf("Sources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LiquidityCashflowValidationError{
						field:  fmt.Sprintf("Sources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LiquidityCashflowValidationError{
					field:  fmt.Sprintf("Sources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetBeneficiaries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LiquidityCashflowValidationError{
						field:  fmt.Sprintf("Beneficiaries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LiquidityCashflowValidationError{
						field:  fmt.Sprintf("Beneficiaries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LiquidityCashflowValidationError{
					field:  fmt.Sprintf("Beneficiaries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LiquidityCashflowMultiError(errors)
	}

	return nil
}

// LiquidityCashflowMultiError is an error wrapping multiple validation errors
// returned by LiquidityCashflow.ValidateAll() if the designated constraints
// aren't met.
type LiquidityCashflowMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LiquidityCashflowMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LiquidityCashflowMultiError) AllErrors() []error { return m }

// LiquidityCashflowValidationError is the validation error returned by
// LiquidityCashflow.Validate if the designated constraints aren't met.
type LiquidityCashflowValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LiquidityCashflowValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LiquidityCashflowValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LiquidityCashflowValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LiquidityCashflowValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LiquidityCashflowValidationError) ErrorName() string {
	return "LiquidityCashflowValidationError"
}

// Error satisfies the builtin error interface
func (e LiquidityCashflowValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLiquidityCashflow.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LiquidityCashflowValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LiquidityCashflowValidationError{}

// Validate checks the field values on LiquiditySources with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LiquiditySources) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LiquiditySources with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LiquiditySourcesMultiError, or nil if none found.
func (m *LiquiditySources) ValidateAll() error {
	return m.validate(true)
}

func (m *LiquiditySources) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AccountID

	// no validation rules for AccountAlias

	// no validation rules for AccountNumber

	// no validation rules for TBAFillDefisit

	// no validation rules for TBAFillToTop

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LiquiditySourcesValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LiquiditySourcesValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LiquiditySourcesValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LiquiditySourcesValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LiquiditySourcesValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LiquiditySourcesValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeletedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LiquiditySourcesValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LiquiditySourcesValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LiquiditySourcesValidationError{
				field:  "DeletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LiquiditySourcesMultiError(errors)
	}

	return nil
}

// LiquiditySourcesMultiError is an error wrapping multiple validation errors
// returned by LiquiditySources.ValidateAll() if the designated constraints
// aren't met.
type LiquiditySourcesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LiquiditySourcesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LiquiditySourcesMultiError) AllErrors() []error { return m }

// LiquiditySourcesValidationError is the validation error returned by
// LiquiditySources.Validate if the designated constraints aren't met.
type LiquiditySourcesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LiquiditySourcesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LiquiditySourcesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LiquiditySourcesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LiquiditySourcesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LiquiditySourcesValidationError) ErrorName() string { return "LiquiditySourcesValidationError" }

// Error satisfies the builtin error interface
func (e LiquiditySourcesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLiquiditySources.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LiquiditySourcesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LiquiditySourcesValidationError{}

// Validate checks the field values on LiquidityBeneficiaries with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LiquidityBeneficiaries) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LiquidityBeneficiaries with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LiquidityBeneficiariesMultiError, or nil if none found.
func (m *LiquidityBeneficiaries) ValidateAll() error {
	return m.validate(true)
}

func (m *LiquidityBeneficiaries) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AccountID

	// no validation rules for AccountAlias

	// no validation rules for AccountNumber

	// no validation rules for TBAValue

	// no validation rules for TBAFillDefisit

	// no validation rules for TBAFillToTop

	// no validation rules for Remark

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LiquidityBeneficiariesValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LiquidityBeneficiariesValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LiquidityBeneficiariesValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LiquidityBeneficiariesValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LiquidityBeneficiariesValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LiquidityBeneficiariesValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeletedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LiquidityBeneficiariesValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LiquidityBeneficiariesValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LiquidityBeneficiariesValidationError{
				field:  "DeletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LiquidityBeneficiariesMultiError(errors)
	}

	return nil
}

// LiquidityBeneficiariesMultiError is an error wrapping multiple validation
// errors returned by LiquidityBeneficiaries.ValidateAll() if the designated
// constraints aren't met.
type LiquidityBeneficiariesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LiquidityBeneficiariesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LiquidityBeneficiariesMultiError) AllErrors() []error { return m }

// LiquidityBeneficiariesValidationError is the validation error returned by
// LiquidityBeneficiaries.Validate if the designated constraints aren't met.
type LiquidityBeneficiariesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LiquidityBeneficiariesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LiquidityBeneficiariesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LiquidityBeneficiariesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LiquidityBeneficiariesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LiquidityBeneficiariesValidationError) ErrorName() string {
	return "LiquidityBeneficiariesValidationError"
}

// Error satisfies the builtin error interface
func (e LiquidityBeneficiariesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLiquidityBeneficiaries.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LiquidityBeneficiariesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LiquidityBeneficiariesValidationError{}

// Validate checks the field values on LiquiditySchedules with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LiquiditySchedules) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LiquiditySchedules with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LiquiditySchedulesMultiError, or nil if none found.
func (m *LiquiditySchedules) ValidateAll() error {
	return m.validate(true)
}

func (m *LiquiditySchedules) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CashflowID

	if all {
		switch v := interface{}(m.GetCashflow()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LiquiditySchedulesValidationError{
					field:  "Cashflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LiquiditySchedulesValidationError{
					field:  "Cashflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCashflow()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LiquiditySchedulesValidationError{
				field:  "Cashflow",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LiquidityID

	if all {
		switch v := interface{}(m.GetLiquidity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LiquiditySchedulesValidationError{
					field:  "Liquidity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LiquiditySchedulesValidationError{
					field:  "Liquidity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLiquidity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LiquiditySchedulesValidationError{
				field:  "Liquidity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TaskId

	// no validation rules for Executed

	if all {
		switch v := interface{}(m.GetScheduleTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LiquiditySchedulesValidationError{
					field:  "ScheduleTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LiquiditySchedulesValidationError{
					field:  "ScheduleTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScheduleTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LiquiditySchedulesValidationError{
				field:  "ScheduleTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LiquiditySchedulesValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LiquiditySchedulesValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LiquiditySchedulesValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LiquiditySchedulesValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LiquiditySchedulesValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LiquiditySchedulesValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeletedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LiquiditySchedulesValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LiquiditySchedulesValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LiquiditySchedulesValidationError{
				field:  "DeletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LiquiditySchedulesMultiError(errors)
	}

	return nil
}

// LiquiditySchedulesMultiError is an error wrapping multiple validation errors
// returned by LiquiditySchedules.ValidateAll() if the designated constraints
// aren't met.
type LiquiditySchedulesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LiquiditySchedulesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LiquiditySchedulesMultiError) AllErrors() []error { return m }

// LiquiditySchedulesValidationError is the validation error returned by
// LiquiditySchedules.Validate if the designated constraints aren't met.
type LiquiditySchedulesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LiquiditySchedulesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LiquiditySchedulesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LiquiditySchedulesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LiquiditySchedulesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LiquiditySchedulesValidationError) ErrorName() string {
	return "LiquiditySchedulesValidationError"
}

// Error satisfies the builtin error interface
func (e LiquiditySchedulesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLiquiditySchedules.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LiquiditySchedulesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LiquiditySchedulesValidationError{}

// Validate checks the field values on Histories with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Histories) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Histories with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HistoriesMultiError, or nil
// if none found.
func (m *Histories) ValidateAll() error {
	return m.validate(true)
}

func (m *Histories) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TransactionId

	// no validation rules for TaskId

	// no validation rules for Status

	// no validation rules for FeeData

	// no validation rules for FeeStatus

	// no validation rules for JournalSquence

	// no validation rules for StatusMessage

	// no validation rules for FeeStatusMessage

	// no validation rules for Data

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HistoriesValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HistoriesValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HistoriesValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HistoriesValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HistoriesValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HistoriesValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HistoriesMultiError(errors)
	}

	return nil
}

// HistoriesMultiError is an error wrapping multiple validation errors returned
// by Histories.ValidateAll() if the designated constraints aren't met.
type HistoriesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HistoriesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HistoriesMultiError) AllErrors() []error { return m }

// HistoriesValidationError is the validation error returned by
// Histories.Validate if the designated constraints aren't met.
type HistoriesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HistoriesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HistoriesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HistoriesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HistoriesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HistoriesValidationError) ErrorName() string { return "HistoriesValidationError" }

// Error satisfies the builtin error interface
func (e HistoriesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHistories.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HistoriesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HistoriesValidationError{}

// Validate checks the field values on TBAValue with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TBAValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TBAValue with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TBAValueMultiError, or nil
// if none found.
func (m *TBAValue) ValidateAll() error {
	return m.validate(true)
}

func (m *TBAValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for SchemaType

	// no validation rules for CashFlowType

	// no validation rules for Name

	// no validation rules for Mechanism

	if len(errors) > 0 {
		return TBAValueMultiError(errors)
	}

	return nil
}

// TBAValueMultiError is an error wrapping multiple validation errors returned
// by TBAValue.ValidateAll() if the designated constraints aren't met.
type TBAValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TBAValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TBAValueMultiError) AllErrors() []error { return m }

// TBAValueValidationError is the validation error returned by
// TBAValue.Validate if the designated constraints aren't met.
type TBAValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TBAValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TBAValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TBAValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TBAValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TBAValueValidationError) ErrorName() string { return "TBAValueValidationError" }

// Error satisfies the builtin error interface
func (e TBAValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTBAValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TBAValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TBAValueValidationError{}
