// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: liquidity_core_payload.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Participant with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Participant) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Participant with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ParticipantMultiError, or
// nil if none found.
func (m *Participant) ValidateAll() error {
	return m.validate(true)
}

func (m *Participant) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for UserName

	// no validation rules for RoleID

	// no validation rules for IsReject

	if all {
		switch v := interface{}(m.GetApprovedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ParticipantValidationError{
					field:  "ApprovedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ParticipantValidationError{
					field:  "ApprovedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApprovedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ParticipantValidationError{
				field:  "ApprovedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Step

	if len(errors) > 0 {
		return ParticipantMultiError(errors)
	}

	return nil
}

// ParticipantMultiError is an error wrapping multiple validation errors
// returned by Participant.ValidateAll() if the designated constraints aren't met.
type ParticipantMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParticipantMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParticipantMultiError) AllErrors() []error { return m }

// ParticipantValidationError is the validation error returned by
// Participant.Validate if the designated constraints aren't met.
type ParticipantValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParticipantValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParticipantValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParticipantValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParticipantValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParticipantValidationError) ErrorName() string { return "ParticipantValidationError" }

// Error satisfies the builtin error interface
func (e ParticipantValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParticipant.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParticipantValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParticipantValidationError{}

// Validate checks the field values on Participants with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Participants) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Participants with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ParticipantsMultiError, or
// nil if none found.
func (m *Participants) ValidateAll() error {
	return m.validate(true)
}

func (m *Participants) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApprovedCount

	// no validation rules for RejectedCount

	// no validation rules for Requirement

	for idx, item := range m.GetParticipants() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ParticipantsValidationError{
						field:  fmt.Sprintf("Participants[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ParticipantsValidationError{
						field:  fmt.Sprintf("Participants[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ParticipantsValidationError{
					field:  fmt.Sprintf("Participants[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ParticipantsMultiError(errors)
	}

	return nil
}

// ParticipantsMultiError is an error wrapping multiple validation errors
// returned by Participants.ValidateAll() if the designated constraints aren't met.
type ParticipantsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParticipantsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParticipantsMultiError) AllErrors() []error { return m }

// ParticipantsValidationError is the validation error returned by
// Participants.Validate if the designated constraints aren't met.
type ParticipantsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParticipantsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParticipantsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParticipantsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParticipantsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParticipantsValidationError) ErrorName() string { return "ParticipantsValidationError" }

// Error satisfies the builtin error interface
func (e ParticipantsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParticipants.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParticipantsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParticipantsValidationError{}

// Validate checks the field values on Flow with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Flow) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Flow with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FlowMultiError, or nil if none found.
func (m *Flow) ValidateAll() error {
	return m.validate(true)
}

func (m *Flow) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkflowLogicID

	if all {
		switch v := interface{}(m.GetVerifier()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FlowValidationError{
					field:  "Verifier",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FlowValidationError{
					field:  "Verifier",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVerifier()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FlowValidationError{
				field:  "Verifier",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetApprover()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FlowValidationError{
					field:  "Approver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FlowValidationError{
					field:  "Approver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApprover()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FlowValidationError{
				field:  "Approver",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReleaser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FlowValidationError{
					field:  "Releaser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FlowValidationError{
					field:  "Releaser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReleaser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FlowValidationError{
				field:  "Releaser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsRejected

	if all {
		switch v := interface{}(m.GetCompletedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FlowValidationError{
					field:  "CompletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FlowValidationError{
					field:  "CompletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FlowValidationError{
				field:  "CompletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FlowMultiError(errors)
	}

	return nil
}

// FlowMultiError is an error wrapping multiple validation errors returned by
// Flow.ValidateAll() if the designated constraints aren't met.
type FlowMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FlowMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FlowMultiError) AllErrors() []error { return m }

// FlowValidationError is the validation error returned by Flow.Validate if the
// designated constraints aren't met.
type FlowValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlowValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlowValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlowValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlowValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlowValidationError) ErrorName() string { return "FlowValidationError" }

// Error satisfies the builtin error interface
func (e FlowValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlow.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlowValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlowValidationError{}

// Validate checks the field values on WorkflowRecords with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WorkflowRecords) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowRecords with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkflowRecordsMultiError, or nil if none found.
func (m *WorkflowRecords) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowRecords) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLastUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowRecordsValidationError{
					field:  "LastUpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowRecordsValidationError{
					field:  "LastUpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowRecordsValidationError{
				field:  "LastUpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TopRange

	// no validation rules for BottomRange

	for idx, item := range m.GetFlows() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WorkflowRecordsValidationError{
						field:  fmt.Sprintf("Flows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WorkflowRecordsValidationError{
						field:  fmt.Sprintf("Flows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WorkflowRecordsValidationError{
					field:  fmt.Sprintf("Flows[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return WorkflowRecordsMultiError(errors)
	}

	return nil
}

// WorkflowRecordsMultiError is an error wrapping multiple validation errors
// returned by WorkflowRecords.ValidateAll() if the designated constraints
// aren't met.
type WorkflowRecordsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowRecordsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowRecordsMultiError) AllErrors() []error { return m }

// WorkflowRecordsValidationError is the validation error returned by
// WorkflowRecords.Validate if the designated constraints aren't met.
type WorkflowRecordsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowRecordsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowRecordsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowRecordsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowRecordsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowRecordsValidationError) ErrorName() string { return "WorkflowRecordsValidationError" }

// Error satisfies the builtin error interface
func (e WorkflowRecordsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowRecords.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowRecordsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowRecordsValidationError{}

// Validate checks the field values on UserData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserDataMultiError, or nil
// if none found.
func (m *UserData) ValidateAll() error {
	return m.validate(true)
}

func (m *UserData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for Username

	if len(errors) > 0 {
		return UserDataMultiError(errors)
	}

	return nil
}

// UserDataMultiError is an error wrapping multiple validation errors returned
// by UserData.ValidateAll() if the designated constraints aren't met.
type UserDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDataMultiError) AllErrors() []error { return m }

// UserDataValidationError is the validation error returned by
// UserData.Validate if the designated constraints aren't met.
type UserDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDataValidationError) ErrorName() string { return "UserDataValidationError" }

// Error satisfies the builtin error interface
func (e UserDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDataValidationError{}

// Validate checks the field values on WorkflowHeader with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WorkflowHeader) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowHeader with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WorkflowHeaderMultiError,
// or nil if none found.
func (m *WorkflowHeader) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowHeader) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductID

	// no validation rules for ProductName

	// no validation rules for CurrencyID

	// no validation rules for CurrencyName

	// no validation rules for CompanyID

	// no validation rules for CompanyName

	// no validation rules for TransactionalNumber

	// no validation rules for WorkflowID

	// no validation rules for UaID

	if len(errors) > 0 {
		return WorkflowHeaderMultiError(errors)
	}

	return nil
}

// WorkflowHeaderMultiError is an error wrapping multiple validation errors
// returned by WorkflowHeader.ValidateAll() if the designated constraints
// aren't met.
type WorkflowHeaderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowHeaderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowHeaderMultiError) AllErrors() []error { return m }

// WorkflowHeaderValidationError is the validation error returned by
// WorkflowHeader.Validate if the designated constraints aren't met.
type WorkflowHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowHeaderValidationError) ErrorName() string { return "WorkflowHeaderValidationError" }

// Error satisfies the builtin error interface
func (e WorkflowHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowHeaderValidationError{}

// Validate checks the field values on WorkflowPayload with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WorkflowPayload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkflowPayloadMultiError, or nil if none found.
func (m *WorkflowPayload) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowPayload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowPayloadValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowPayloadValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowPayloadValidationError{
				field:  "Header",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRecords()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowPayloadValidationError{
					field:  "Records",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowPayloadValidationError{
					field:  "Records",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRecords()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowPayloadValidationError{
				field:  "Records",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedBy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowPayloadValidationError{
					field:  "CreatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowPayloadValidationError{
					field:  "CreatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowPayloadValidationError{
				field:  "CreatedBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowPayloadValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowPayloadValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowPayloadValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsDefault

	// no validation rules for IsTransactional

	// no validation rules for CurrentStep

	if len(errors) > 0 {
		return WorkflowPayloadMultiError(errors)
	}

	return nil
}

// WorkflowPayloadMultiError is an error wrapping multiple validation errors
// returned by WorkflowPayload.ValidateAll() if the designated constraints
// aren't met.
type WorkflowPayloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowPayloadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowPayloadMultiError) AllErrors() []error { return m }

// WorkflowPayloadValidationError is the validation error returned by
// WorkflowPayload.Validate if the designated constraints aren't met.
type WorkflowPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowPayloadValidationError) ErrorName() string { return "WorkflowPayloadValidationError" }

// Error satisfies the builtin error interface
func (e WorkflowPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowPayloadValidationError{}

// Validate checks the field values on ValidateWorkflowData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidateWorkflowData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateWorkflowData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidateWorkflowDataMultiError, or nil if none found.
func (m *ValidateWorkflowData) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateWorkflowData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkflow()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ValidateWorkflowDataValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ValidateWorkflowDataValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflow()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ValidateWorkflowDataValidationError{
				field:  "Workflow",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for NextStatus

	// no validation rules for NextStep

	if len(errors) > 0 {
		return ValidateWorkflowDataMultiError(errors)
	}

	return nil
}

// ValidateWorkflowDataMultiError is an error wrapping multiple validation
// errors returned by ValidateWorkflowData.ValidateAll() if the designated
// constraints aren't met.
type ValidateWorkflowDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateWorkflowDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateWorkflowDataMultiError) AllErrors() []error { return m }

// ValidateWorkflowDataValidationError is the validation error returned by
// ValidateWorkflowData.Validate if the designated constraints aren't met.
type ValidateWorkflowDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateWorkflowDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateWorkflowDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateWorkflowDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateWorkflowDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateWorkflowDataValidationError) ErrorName() string {
	return "ValidateWorkflowDataValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateWorkflowDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateWorkflowData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateWorkflowDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateWorkflowDataValidationError{}

// Validate checks the field values on Task with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Task) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Task with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TaskMultiError, or nil if none found.
func (m *Task) ValidateAll() error {
	return m.validate(true)
}

func (m *Task) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskID

	// no validation rules for Type

	// no validation rules for Status

	// no validation rules for Step

	// no validation rules for FeatureID

	// no validation rules for LastApprovedByID

	// no validation rules for LastRejectedByID

	// no validation rules for LastApprovedByName

	// no validation rules for LastRejectedByName

	// no validation rules for CreatedByName

	// no validation rules for UpdatedByName

	// no validation rules for Reasons

	// no validation rules for Comment

	// no validation rules for CompanyID

	// no validation rules for HoldingID

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TaskMultiError(errors)
	}

	return nil
}

// TaskMultiError is an error wrapping multiple validation errors returned by
// Task.ValidateAll() if the designated constraints aren't met.
type TaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskMultiError) AllErrors() []error { return m }

// TaskValidationError is the validation error returned by Task.Validate if the
// designated constraints aren't met.
type TaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskValidationError) ErrorName() string { return "TaskValidationError" }

// Error satisfies the builtin error interface
func (e TaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskValidationError{}

// Validate checks the field values on HealthCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HealthCheckRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HealthCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HealthCheckRequestMultiError, or nil if none found.
func (m *HealthCheckRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HealthCheckRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return HealthCheckRequestMultiError(errors)
	}

	return nil
}

// HealthCheckRequestMultiError is an error wrapping multiple validation errors
// returned by HealthCheckRequest.ValidateAll() if the designated constraints
// aren't met.
type HealthCheckRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthCheckRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthCheckRequestMultiError) AllErrors() []error { return m }

// HealthCheckRequestValidationError is the validation error returned by
// HealthCheckRequest.Validate if the designated constraints aren't met.
type HealthCheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthCheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthCheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthCheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthCheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthCheckRequestValidationError) ErrorName() string {
	return "HealthCheckRequestValidationError"
}

// Error satisfies the builtin error interface
func (e HealthCheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthCheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthCheckRequestValidationError{}

// Validate checks the field values on HealthCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HealthCheckResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HealthCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HealthCheckResponseMultiError, or nil if none found.
func (m *HealthCheckResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HealthCheckResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return HealthCheckResponseMultiError(errors)
	}

	return nil
}

// HealthCheckResponseMultiError is an error wrapping multiple validation
// errors returned by HealthCheckResponse.ValidateAll() if the designated
// constraints aren't met.
type HealthCheckResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthCheckResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthCheckResponseMultiError) AllErrors() []error { return m }

// HealthCheckResponseValidationError is the validation error returned by
// HealthCheckResponse.Validate if the designated constraints aren't met.
type HealthCheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthCheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthCheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthCheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthCheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthCheckResponseValidationError) ErrorName() string {
	return "HealthCheckResponseValidationError"
}

// Error satisfies the builtin error interface
func (e HealthCheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthCheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthCheckResponseValidationError{}
