// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: liquidity_gorm_db.proto

package pb

import (
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CurrencyType int32

const (
	CurrencyType_NullCurrencyType   CurrencyType = 0
	CurrencyType_DebitCurrencyType  CurrencyType = 1
	CurrencyType_CreditCurrencyType CurrencyType = 2
)

// Enum value maps for CurrencyType.
var (
	CurrencyType_name = map[int32]string{
		0: "NullCurrencyType",
		1: "DebitCurrencyType",
		2: "CreditCurrencyType",
	}
	CurrencyType_value = map[string]int32{
		"NullCurrencyType":   0,
		"DebitCurrencyType":  1,
		"CreditCurrencyType": 2,
	}
)

func (x CurrencyType) Enum() *CurrencyType {
	p := new(CurrencyType)
	*p = x
	return p
}

func (x CurrencyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CurrencyType) Descriptor() protoreflect.EnumDescriptor {
	return file_liquidity_gorm_db_proto_enumTypes[0].Descriptor()
}

func (CurrencyType) Type() protoreflect.EnumType {
	return &file_liquidity_gorm_db_proto_enumTypes[0]
}

func (x CurrencyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CurrencyType.Descriptor instead.
func (CurrencyType) EnumDescriptor() ([]byte, []int) {
	return file_liquidity_gorm_db_proto_rawDescGZIP(), []int{0}
}

type Fee int32

const (
	Fee_OUR Fee = 0
	Fee_BEN Fee = 1
)

// Enum value maps for Fee.
var (
	Fee_name = map[int32]string{
		0: "OUR",
		1: "BEN",
	}
	Fee_value = map[string]int32{
		"OUR": 0,
		"BEN": 1,
	}
)

func (x Fee) Enum() *Fee {
	p := new(Fee)
	*p = x
	return p
}

func (x Fee) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Fee) Descriptor() protoreflect.EnumDescriptor {
	return file_liquidity_gorm_db_proto_enumTypes[1].Descriptor()
}

func (Fee) Type() protoreflect.EnumType {
	return &file_liquidity_gorm_db_proto_enumTypes[1]
}

func (x Fee) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Fee.Descriptor instead.
func (Fee) EnumDescriptor() ([]byte, []int) {
	return file_liquidity_gorm_db_proto_rawDescGZIP(), []int{1}
}

type TransactionSchedule int32

const (
	TransactionSchedule_NullTransactionSchedule TransactionSchedule = 0
	TransactionSchedule_Immediate               TransactionSchedule = 1
	TransactionSchedule_Scheduled               TransactionSchedule = 2
	TransactionSchedule_Recurring               TransactionSchedule = 3
)

// Enum value maps for TransactionSchedule.
var (
	TransactionSchedule_name = map[int32]string{
		0: "NullTransactionSchedule",
		1: "Immediate",
		2: "Scheduled",
		3: "Recurring",
	}
	TransactionSchedule_value = map[string]int32{
		"NullTransactionSchedule": 0,
		"Immediate":               1,
		"Scheduled":               2,
		"Recurring":               3,
	}
)

func (x TransactionSchedule) Enum() *TransactionSchedule {
	p := new(TransactionSchedule)
	*p = x
	return p
}

func (x TransactionSchedule) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionSchedule) Descriptor() protoreflect.EnumDescriptor {
	return file_liquidity_gorm_db_proto_enumTypes[2].Descriptor()
}

func (TransactionSchedule) Type() protoreflect.EnumType {
	return &file_liquidity_gorm_db_proto_enumTypes[2]
}

func (x TransactionSchedule) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionSchedule.Descriptor instead.
func (TransactionSchedule) EnumDescriptor() ([]byte, []int) {
	return file_liquidity_gorm_db_proto_rawDescGZIP(), []int{2}
}

type RecurringFrequency int32

const (
	RecurringFrequency_NullRecurringFrequency RecurringFrequency = 0
	RecurringFrequency_Daily                  RecurringFrequency = 1
	RecurringFrequency_Weekly                 RecurringFrequency = 2
	RecurringFrequency_Monthly                RecurringFrequency = 3
)

// Enum value maps for RecurringFrequency.
var (
	RecurringFrequency_name = map[int32]string{
		0: "NullRecurringFrequency",
		1: "Daily",
		2: "Weekly",
		3: "Monthly",
	}
	RecurringFrequency_value = map[string]int32{
		"NullRecurringFrequency": 0,
		"Daily":                  1,
		"Weekly":                 2,
		"Monthly":                3,
	}
)

func (x RecurringFrequency) Enum() *RecurringFrequency {
	p := new(RecurringFrequency)
	*p = x
	return p
}

func (x RecurringFrequency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecurringFrequency) Descriptor() protoreflect.EnumDescriptor {
	return file_liquidity_gorm_db_proto_enumTypes[3].Descriptor()
}

func (RecurringFrequency) Type() protoreflect.EnumType {
	return &file_liquidity_gorm_db_proto_enumTypes[3]
}

func (x RecurringFrequency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecurringFrequency.Descriptor instead.
func (RecurringFrequency) EnumDescriptor() ([]byte, []int) {
	return file_liquidity_gorm_db_proto_rawDescGZIP(), []int{3}
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username  string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password  string                 `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Liquidity string                 `protobuf:"bytes,4,opt,name=liquidity,proto3" json:"liquidity,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_liquidity_gorm_db_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_liquidity_gorm_db_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_liquidity_gorm_db_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *User) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *User) GetLiquidity() string {
	if x != nil {
		return x.Liquidity
	}
	return ""
}

func (x *User) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *User) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *User) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

type LiquiditySchemes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code           string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Description    string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	CurrencyID     uint64                 `protobuf:"varint,4,opt,name=currencyID,proto3" json:"currencyID,omitempty"`
	CurrencyCode   string                 `protobuf:"bytes,19,opt,name=currencyCode,proto3" json:"currencyCode,omitempty"`
	CompanyID      uint64                 `protobuf:"varint,5,opt,name=companyID,proto3" json:"companyID,omitempty"`
	CompanyGroupID uint64                 `protobuf:"varint,6,opt,name=companyGroupID,proto3" json:"companyGroupID,omitempty"`
	SchemeType     string                 `protobuf:"bytes,7,opt,name=schemeType,proto3" json:"schemeType,omitempty"`
	StartDate      *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate        *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=endDate,proto3" json:"endDate,omitempty"`
	Priority       int32                  `protobuf:"varint,10,opt,name=priority,proto3" json:"priority,omitempty"`
	Disabled       bool                   `protobuf:"varint,11,opt,name=disabled,proto3" json:"disabled,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	CreatedByID    uint64                 `protobuf:"varint,13,opt,name=createdByID,proto3" json:"createdByID,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	UpdatedByID    uint64                 `protobuf:"varint,15,opt,name=updatedByID,proto3" json:"updatedByID,omitempty"`
	DeletedAt      *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	DeletedByID    uint64                 `protobuf:"varint,17,opt,name=deletedByID,proto3" json:"deletedByID,omitempty"`
	Cashflow       []*LiquidityCashflow   `protobuf:"bytes,18,rep,name=cashflow,proto3" json:"cashflow,omitempty"`
}

func (x *LiquiditySchemes) Reset() {
	*x = LiquiditySchemes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_liquidity_gorm_db_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquiditySchemes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquiditySchemes) ProtoMessage() {}

func (x *LiquiditySchemes) ProtoReflect() protoreflect.Message {
	mi := &file_liquidity_gorm_db_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquiditySchemes.ProtoReflect.Descriptor instead.
func (*LiquiditySchemes) Descriptor() ([]byte, []int) {
	return file_liquidity_gorm_db_proto_rawDescGZIP(), []int{1}
}

func (x *LiquiditySchemes) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LiquiditySchemes) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *LiquiditySchemes) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *LiquiditySchemes) GetCurrencyID() uint64 {
	if x != nil {
		return x.CurrencyID
	}
	return 0
}

func (x *LiquiditySchemes) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *LiquiditySchemes) GetCompanyID() uint64 {
	if x != nil {
		return x.CompanyID
	}
	return 0
}

func (x *LiquiditySchemes) GetCompanyGroupID() uint64 {
	if x != nil {
		return x.CompanyGroupID
	}
	return 0
}

func (x *LiquiditySchemes) GetSchemeType() string {
	if x != nil {
		return x.SchemeType
	}
	return ""
}

func (x *LiquiditySchemes) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *LiquiditySchemes) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *LiquiditySchemes) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *LiquiditySchemes) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *LiquiditySchemes) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *LiquiditySchemes) GetCreatedByID() uint64 {
	if x != nil {
		return x.CreatedByID
	}
	return 0
}

func (x *LiquiditySchemes) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *LiquiditySchemes) GetUpdatedByID() uint64 {
	if x != nil {
		return x.UpdatedByID
	}
	return 0
}

func (x *LiquiditySchemes) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *LiquiditySchemes) GetDeletedByID() uint64 {
	if x != nil {
		return x.DeletedByID
	}
	return 0
}

func (x *LiquiditySchemes) GetCashflow() []*LiquidityCashflow {
	if x != nil {
		return x.Cashflow
	}
	return nil
}

type LiquidityCashflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint64                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	LiquidityID    uint64                    `protobuf:"varint,2,opt,name=liquidityID,proto3" json:"liquidityID,omitempty"`
	Liquidity      *LiquiditySchemes         `protobuf:"bytes,3,opt,name=liquidity,proto3" json:"liquidity,omitempty"`
	Type           string                    `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Period         string                    `protobuf:"bytes,5,opt,name=period,proto3" json:"period,omitempty"`
	PeriodTime     string                    `protobuf:"bytes,6,opt,name=periodTime,proto3" json:"periodTime,omitempty"`
	TBAType        string                    `protobuf:"bytes,7,opt,name=TBAType,proto3" json:"TBAType,omitempty"`
	TBAValue       int64                     `protobuf:"varint,8,opt,name=TBAValue,proto3" json:"TBAValue,omitempty"`
	TBARoundedBase bool                      `protobuf:"varint,9,opt,name=TBARoundedBase,proto3" json:"TBARoundedBase,omitempty"`
	TBATopValue    int64                     `protobuf:"varint,10,opt,name=TBATopValue,proto3" json:"TBATopValue,omitempty"`
	TBABottomValue int64                     `protobuf:"varint,11,opt,name=TBABottomValue,proto3" json:"TBABottomValue,omitempty"`
	TBAFillDefisit bool                      `protobuf:"varint,12,opt,name=TBAFillDefisit,proto3" json:"TBAFillDefisit,omitempty"`
	TBAFillToTop   bool                      `protobuf:"varint,13,opt,name=TBAFillToTop,proto3" json:"TBAFillToTop,omitempty"`
	Recurring      bool                      `protobuf:"varint,14,opt,name=recurring,proto3" json:"recurring,omitempty"`
	RecurringValue string                    `protobuf:"bytes,22,opt,name=recurringValue,proto3" json:"recurringValue,omitempty"`
	RecurringDate  int64                     `protobuf:"varint,23,opt,name=recurringDate,proto3" json:"recurringDate,omitempty"`
	CreatedAt      *timestamppb.Timestamp    `protobuf:"bytes,16,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	CreatedByID    uint64                    `protobuf:"varint,17,opt,name=createdByID,proto3" json:"createdByID,omitempty"`
	UpdatedAt      *timestamppb.Timestamp    `protobuf:"bytes,18,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	UpdatedByID    uint64                    `protobuf:"varint,19,opt,name=updatedByID,proto3" json:"updatedByID,omitempty"`
	DeletedAt      *timestamppb.Timestamp    `protobuf:"bytes,20,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	DeletedByID    uint64                    `protobuf:"varint,21,opt,name=deletedByID,proto3" json:"deletedByID,omitempty"`
	Source         []*LiquiditySources       `protobuf:"bytes,24,rep,name=source,proto3" json:"source,omitempty"`
	Beneficiaries  []*LiquidityBeneficiaries `protobuf:"bytes,25,rep,name=beneficiaries,proto3" json:"beneficiaries,omitempty"` // repeated LiquiditySchedules schedules = 26 [(gorm.field).has_many = {foreignkey: "cashflow_id" preload: true}];
}

func (x *LiquidityCashflow) Reset() {
	*x = LiquidityCashflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_liquidity_gorm_db_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityCashflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityCashflow) ProtoMessage() {}

func (x *LiquidityCashflow) ProtoReflect() protoreflect.Message {
	mi := &file_liquidity_gorm_db_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityCashflow.ProtoReflect.Descriptor instead.
func (*LiquidityCashflow) Descriptor() ([]byte, []int) {
	return file_liquidity_gorm_db_proto_rawDescGZIP(), []int{2}
}

func (x *LiquidityCashflow) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LiquidityCashflow) GetLiquidityID() uint64 {
	if x != nil {
		return x.LiquidityID
	}
	return 0
}

func (x *LiquidityCashflow) GetLiquidity() *LiquiditySchemes {
	if x != nil {
		return x.Liquidity
	}
	return nil
}

func (x *LiquidityCashflow) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *LiquidityCashflow) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

func (x *LiquidityCashflow) GetPeriodTime() string {
	if x != nil {
		return x.PeriodTime
	}
	return ""
}

func (x *LiquidityCashflow) GetTBAType() string {
	if x != nil {
		return x.TBAType
	}
	return ""
}

func (x *LiquidityCashflow) GetTBAValue() int64 {
	if x != nil {
		return x.TBAValue
	}
	return 0
}

func (x *LiquidityCashflow) GetTBARoundedBase() bool {
	if x != nil {
		return x.TBARoundedBase
	}
	return false
}

func (x *LiquidityCashflow) GetTBATopValue() int64 {
	if x != nil {
		return x.TBATopValue
	}
	return 0
}

func (x *LiquidityCashflow) GetTBABottomValue() int64 {
	if x != nil {
		return x.TBABottomValue
	}
	return 0
}

func (x *LiquidityCashflow) GetTBAFillDefisit() bool {
	if x != nil {
		return x.TBAFillDefisit
	}
	return false
}

func (x *LiquidityCashflow) GetTBAFillToTop() bool {
	if x != nil {
		return x.TBAFillToTop
	}
	return false
}

func (x *LiquidityCashflow) GetRecurring() bool {
	if x != nil {
		return x.Recurring
	}
	return false
}

func (x *LiquidityCashflow) GetRecurringValue() string {
	if x != nil {
		return x.RecurringValue
	}
	return ""
}

func (x *LiquidityCashflow) GetRecurringDate() int64 {
	if x != nil {
		return x.RecurringDate
	}
	return 0
}

func (x *LiquidityCashflow) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *LiquidityCashflow) GetCreatedByID() uint64 {
	if x != nil {
		return x.CreatedByID
	}
	return 0
}

func (x *LiquidityCashflow) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *LiquidityCashflow) GetUpdatedByID() uint64 {
	if x != nil {
		return x.UpdatedByID
	}
	return 0
}

func (x *LiquidityCashflow) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *LiquidityCashflow) GetDeletedByID() uint64 {
	if x != nil {
		return x.DeletedByID
	}
	return 0
}

func (x *LiquidityCashflow) GetSource() []*LiquiditySources {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *LiquidityCashflow) GetBeneficiaries() []*LiquidityBeneficiaries {
	if x != nil {
		return x.Beneficiaries
	}
	return nil
}

type LiquiditySources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CashflowID    uint64                 `protobuf:"varint,2,opt,name=cashflowID,proto3" json:"cashflowID,omitempty"`
	Caashflow     *LiquidityCashflow     `protobuf:"bytes,4,opt,name=caashflow,proto3" json:"caashflow,omitempty"`
	AccountID     uint64                 `protobuf:"varint,3,opt,name=accountID,proto3" json:"accountID,omitempty"`
	AccountAlias  string                 `protobuf:"bytes,11,opt,name=accountAlias,proto3" json:"accountAlias,omitempty"`
	AccountNumber uint64                 `protobuf:"varint,12,opt,name=accountNumber,proto3" json:"accountNumber,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	CreatedByID   uint64                 `protobuf:"varint,6,opt,name=createdByID,proto3" json:"createdByID,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	UpdatedByID   uint64                 `protobuf:"varint,8,opt,name=updatedByID,proto3" json:"updatedByID,omitempty"`
	DeletedAt     *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	DeletedByID   uint64                 `protobuf:"varint,10,opt,name=deletedByID,proto3" json:"deletedByID,omitempty"`
}

func (x *LiquiditySources) Reset() {
	*x = LiquiditySources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_liquidity_gorm_db_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquiditySources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquiditySources) ProtoMessage() {}

func (x *LiquiditySources) ProtoReflect() protoreflect.Message {
	mi := &file_liquidity_gorm_db_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquiditySources.ProtoReflect.Descriptor instead.
func (*LiquiditySources) Descriptor() ([]byte, []int) {
	return file_liquidity_gorm_db_proto_rawDescGZIP(), []int{3}
}

func (x *LiquiditySources) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LiquiditySources) GetCashflowID() uint64 {
	if x != nil {
		return x.CashflowID
	}
	return 0
}

func (x *LiquiditySources) GetCaashflow() *LiquidityCashflow {
	if x != nil {
		return x.Caashflow
	}
	return nil
}

func (x *LiquiditySources) GetAccountID() uint64 {
	if x != nil {
		return x.AccountID
	}
	return 0
}

func (x *LiquiditySources) GetAccountAlias() string {
	if x != nil {
		return x.AccountAlias
	}
	return ""
}

func (x *LiquiditySources) GetAccountNumber() uint64 {
	if x != nil {
		return x.AccountNumber
	}
	return 0
}

func (x *LiquiditySources) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *LiquiditySources) GetCreatedByID() uint64 {
	if x != nil {
		return x.CreatedByID
	}
	return 0
}

func (x *LiquiditySources) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *LiquiditySources) GetUpdatedByID() uint64 {
	if x != nil {
		return x.UpdatedByID
	}
	return 0
}

func (x *LiquiditySources) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *LiquiditySources) GetDeletedByID() uint64 {
	if x != nil {
		return x.DeletedByID
	}
	return 0
}

type LiquidityBeneficiaries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CashflowID    uint64                 `protobuf:"varint,2,opt,name=cashflowID,proto3" json:"cashflowID,omitempty"`
	Caashflow     *LiquidityCashflow     `protobuf:"bytes,3,opt,name=caashflow,proto3" json:"caashflow,omitempty"`
	AccountID     uint64                 `protobuf:"varint,4,opt,name=accountID,proto3" json:"accountID,omitempty"`
	AccountAlias  string                 `protobuf:"bytes,13,opt,name=accountAlias,proto3" json:"accountAlias,omitempty"`
	AccountNumber uint64                 `protobuf:"varint,14,opt,name=accountNumber,proto3" json:"accountNumber,omitempty"`
	TBAValue      float32                `protobuf:"fixed32,5,opt,name=TBAValue,proto3" json:"TBAValue,omitempty"`
	Remark        string                 `protobuf:"bytes,12,opt,name=remark,proto3" json:"remark,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	CreatedByID   uint64                 `protobuf:"varint,7,opt,name=createdByID,proto3" json:"createdByID,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	UpdatedByID   uint64                 `protobuf:"varint,9,opt,name=updatedByID,proto3" json:"updatedByID,omitempty"`
	DeletedAt     *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	DeletedByID   uint64                 `protobuf:"varint,11,opt,name=deletedByID,proto3" json:"deletedByID,omitempty"`
}

func (x *LiquidityBeneficiaries) Reset() {
	*x = LiquidityBeneficiaries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_liquidity_gorm_db_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityBeneficiaries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityBeneficiaries) ProtoMessage() {}

func (x *LiquidityBeneficiaries) ProtoReflect() protoreflect.Message {
	mi := &file_liquidity_gorm_db_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityBeneficiaries.ProtoReflect.Descriptor instead.
func (*LiquidityBeneficiaries) Descriptor() ([]byte, []int) {
	return file_liquidity_gorm_db_proto_rawDescGZIP(), []int{4}
}

func (x *LiquidityBeneficiaries) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LiquidityBeneficiaries) GetCashflowID() uint64 {
	if x != nil {
		return x.CashflowID
	}
	return 0
}

func (x *LiquidityBeneficiaries) GetCaashflow() *LiquidityCashflow {
	if x != nil {
		return x.Caashflow
	}
	return nil
}

func (x *LiquidityBeneficiaries) GetAccountID() uint64 {
	if x != nil {
		return x.AccountID
	}
	return 0
}

func (x *LiquidityBeneficiaries) GetAccountAlias() string {
	if x != nil {
		return x.AccountAlias
	}
	return ""
}

func (x *LiquidityBeneficiaries) GetAccountNumber() uint64 {
	if x != nil {
		return x.AccountNumber
	}
	return 0
}

func (x *LiquidityBeneficiaries) GetTBAValue() float32 {
	if x != nil {
		return x.TBAValue
	}
	return 0
}

func (x *LiquidityBeneficiaries) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *LiquidityBeneficiaries) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *LiquidityBeneficiaries) GetCreatedByID() uint64 {
	if x != nil {
		return x.CreatedByID
	}
	return 0
}

func (x *LiquidityBeneficiaries) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *LiquidityBeneficiaries) GetUpdatedByID() uint64 {
	if x != nil {
		return x.UpdatedByID
	}
	return 0
}

func (x *LiquidityBeneficiaries) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *LiquidityBeneficiaries) GetDeletedByID() uint64 {
	if x != nil {
		return x.DeletedByID
	}
	return 0
}

type LiquiditySchedules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CashflowID  uint64 `protobuf:"varint,2,opt,name=cashflowID,proto3" json:"cashflowID,omitempty"`
	LiquidityID uint64 `protobuf:"varint,3,opt,name=liquidityID,proto3" json:"liquidityID,omitempty"`
	// LiquidityCashflow caashflow = 4 [(gorm.field).belongs_to = {foreignkey: "cashflow_id"}];
	ScheduleTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=scheduleTime,proto3" json:"scheduleTime,omitempty"`
}

func (x *LiquiditySchedules) Reset() {
	*x = LiquiditySchedules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_liquidity_gorm_db_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquiditySchedules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquiditySchedules) ProtoMessage() {}

func (x *LiquiditySchedules) ProtoReflect() protoreflect.Message {
	mi := &file_liquidity_gorm_db_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquiditySchedules.ProtoReflect.Descriptor instead.
func (*LiquiditySchedules) Descriptor() ([]byte, []int) {
	return file_liquidity_gorm_db_proto_rawDescGZIP(), []int{5}
}

func (x *LiquiditySchedules) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LiquiditySchedules) GetCashflowID() uint64 {
	if x != nil {
		return x.CashflowID
	}
	return 0
}

func (x *LiquiditySchedules) GetLiquidityID() uint64 {
	if x != nil {
		return x.LiquidityID
	}
	return 0
}

func (x *LiquiditySchedules) GetScheduleTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduleTime
	}
	return nil
}

type TBAValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SchemaType   string `protobuf:"bytes,2,opt,name=schemaType,proto3" json:"schemaType,omitempty"`
	CashFlowType string `protobuf:"bytes,3,opt,name=cashFlowType,proto3" json:"cashFlowType,omitempty"`
	Name         string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Mechanism    string `protobuf:"bytes,5,opt,name=mechanism,proto3" json:"mechanism,omitempty"`
}

func (x *TBAValue) Reset() {
	*x = TBAValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_liquidity_gorm_db_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TBAValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TBAValue) ProtoMessage() {}

func (x *TBAValue) ProtoReflect() protoreflect.Message {
	mi := &file_liquidity_gorm_db_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TBAValue.ProtoReflect.Descriptor instead.
func (*TBAValue) Descriptor() ([]byte, []int) {
	return file_liquidity_gorm_db_proto_rawDescGZIP(), []int{6}
}

func (x *TBAValue) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TBAValue) GetSchemaType() string {
	if x != nil {
		return x.SchemaType
	}
	return ""
}

func (x *TBAValue) GetCashFlowType() string {
	if x != nil {
		return x.CashFlowType
	}
	return ""
}

func (x *TBAValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TBAValue) GetMechanism() string {
	if x != nil {
		return x.Mechanism
	}
	return ""
}

var File_liquidity_gorm_db_proto protoreflect.FileDescriptor

var file_liquidity_gorm_db_proto_rawDesc = []byte{
	0x0a, 0x17, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x6f, 0x72, 0x6d,
	0x5f, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x72,
	0x6d, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9d, 0x02, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0xb1, 0x07, 0x0a, 0x10, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0xba, 0xb9, 0x19, 0x06, 0x0a, 0x04, 0x28, 0x01, 0x40,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02,
	0x40, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x28, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x0a, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04,
	0x0a, 0x02, 0x40, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x12,
	0x30, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40,
	0x01, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x44, 0x12, 0x28, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0x52,
	0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04,
	0x0a, 0x02, 0x40, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x3e, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xba, 0xb9,
	0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x24, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40,
	0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44,
	0x12, 0x5b, 0x0a, 0x08, 0x63, 0x61, 0x73, 0x68, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x43, 0x61, 0x73, 0x68, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x16, 0xba, 0xb9, 0x19,
	0x12, 0x2a, 0x10, 0x0a, 0x0c, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x48, 0x01, 0x52, 0x08, 0x63, 0x61, 0x73, 0x68, 0x66, 0x6c, 0x6f, 0x77, 0x3a, 0x19, 0xba,
	0xb9, 0x19, 0x15, 0x08, 0x01, 0x1a, 0x11, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x22, 0xcc, 0x08, 0x0a, 0x11, 0x4c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x43, 0x61, 0x73, 0x68, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x1a,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0xba, 0xb9, 0x19, 0x06,
	0x0a, 0x04, 0x28, 0x01, 0x40, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x49, 0x44, 0x12, 0x5a, 0x0a, 0x09,
	0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x42, 0x14, 0xba, 0xb9, 0x19, 0x10, 0x22, 0x0e, 0x0a,
	0x0c, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x52, 0x09, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x42, 0x41, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x42, 0x41, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x54, 0x42, 0x41, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x54, 0x42, 0x41, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x42,
	0x41, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x42, 0x61, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x54, 0x42, 0x41, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x42, 0x61,
	0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x42, 0x41, 0x54, 0x6f, 0x70, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x54, 0x42, 0x41, 0x54, 0x6f, 0x70, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x42, 0x41, 0x42, 0x6f, 0x74, 0x74, 0x6f,
	0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x54, 0x42,
	0x41, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x54, 0x42, 0x41, 0x46, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x73, 0x69, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x54, 0x42, 0x41, 0x46, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x66,
	0x69, 0x73, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x42, 0x41, 0x46, 0x69, 0x6c, 0x6c, 0x54,
	0x6f, 0x54, 0x6f, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x54, 0x42, 0x41, 0x46,
	0x69, 0x6c, 0x6c, 0x54, 0x6f, 0x54, 0x6f, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x75,
	0x72, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x63,
	0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44,
	0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x0a,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x12, 0x55, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x42, 0x15, 0xba, 0xb9, 0x19, 0x11, 0x2a, 0x0f, 0x0a, 0x0b, 0x63, 0x61, 0x73, 0x68, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x48, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x69, 0x0a, 0x0d, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x72, 0x69, 0x65, 0x73, 0x42, 0x15, 0xba, 0xb9, 0x19, 0x11, 0x2a, 0x0f, 0x0a, 0x0b, 0x63,
	0x61, 0x73, 0x68, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x48, 0x01, 0x52, 0x0d, 0x62, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x69, 0x65, 0x73, 0x3a, 0x1a, 0xba, 0xb9, 0x19,
	0x16, 0x08, 0x01, 0x1a, 0x12, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x63,
	0x61, 0x73, 0x68, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0xc2, 0x04, 0x0a, 0x10, 0x4c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0xba, 0xb9, 0x19, 0x06, 0x0a, 0x04,
	0x28, 0x01, 0x40, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x73, 0x68,
	0x66, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x61,
	0x73, 0x68, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x12, 0x5a, 0x0a, 0x09, 0x63, 0x61, 0x61, 0x73,
	0x68, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x43, 0x61, 0x73, 0x68,
	0x66, 0x6c, 0x6f, 0x77, 0x42, 0x13, 0xba, 0xb9, 0x19, 0x0f, 0x22, 0x0d, 0x0a, 0x0b, 0x63, 0x61,
	0x73, 0x68, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x52, 0x09, 0x63, 0x61, 0x61, 0x73, 0x68,
	0x66, 0x6c, 0x6f, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49,
	0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49,
	0x44, 0x3a, 0x19, 0xba, 0xb9, 0x19, 0x15, 0x08, 0x01, 0x1a, 0x11, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x82, 0x05, 0x0a,
	0x16, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x0a, 0xba, 0xb9, 0x19, 0x06, 0x0a, 0x04, 0x28, 0x01, 0x40, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x73, 0x68, 0x66, 0x6c, 0x6f, 0x77, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x61, 0x73, 0x68, 0x66, 0x6c, 0x6f,
	0x77, 0x49, 0x44, 0x12, 0x5a, 0x0a, 0x09, 0x63, 0x61, 0x61, 0x73, 0x68, 0x66, 0x6c, 0x6f, 0x77,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x43, 0x61, 0x73, 0x68, 0x66, 0x6c, 0x6f, 0x77, 0x42,
	0x13, 0xba, 0xb9, 0x19, 0x0f, 0x22, 0x0d, 0x0a, 0x0b, 0x63, 0x61, 0x73, 0x68, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x69, 0x64, 0x52, 0x09, 0x63, 0x61, 0x61, 0x73, 0x68, 0x66, 0x6c, 0x6f, 0x77, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a,
	0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x69, 0x61,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x42, 0x41, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x54, 0x42, 0x41, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x38, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44,
	0x3a, 0x1f, 0xba, 0xb9, 0x19, 0x1b, 0x08, 0x01, 0x1a, 0x17, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x5f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x69, 0x65,
	0x73, 0x22, 0xcf, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0xba, 0xb9, 0x19, 0x06, 0x0a, 0x04, 0x28, 0x01, 0x40, 0x01,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x73, 0x68, 0x66, 0x6c, 0x6f, 0x77,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x61, 0x73, 0x68, 0x66, 0x6c,
	0x6f, 0x77, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x3a, 0x1b, 0xba, 0xb9, 0x19, 0x17, 0x08, 0x01, 0x1a, 0x13,
	0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x08, 0x54, 0x42, 0x41, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0xba, 0xb9,
	0x19, 0x06, 0x0a, 0x04, 0x28, 0x01, 0x40, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x61, 0x73, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x73, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73,
	0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69,
	0x73, 0x6d, 0x3a, 0x11, 0xba, 0xb9, 0x19, 0x0d, 0x08, 0x01, 0x1a, 0x09, 0x74, 0x62, 0x61, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x53, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x75, 0x6c, 0x6c, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x44,
	0x65, 0x62, 0x69, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x10, 0x02, 0x2a, 0x17, 0x0a, 0x03, 0x46, 0x65,
	0x65, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x55, 0x52, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x45,
	0x4e, 0x10, 0x01, 0x2a, 0x5f, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x75,
	0x6c, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x6d, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x65, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x10, 0x03, 0x2a, 0x54, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e,
	0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x75,
	0x6c, 0x6c, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x10, 0x03, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_liquidity_gorm_db_proto_rawDescOnce sync.Once
	file_liquidity_gorm_db_proto_rawDescData = file_liquidity_gorm_db_proto_rawDesc
)

func file_liquidity_gorm_db_proto_rawDescGZIP() []byte {
	file_liquidity_gorm_db_proto_rawDescOnce.Do(func() {
		file_liquidity_gorm_db_proto_rawDescData = protoimpl.X.CompressGZIP(file_liquidity_gorm_db_proto_rawDescData)
	})
	return file_liquidity_gorm_db_proto_rawDescData
}

var file_liquidity_gorm_db_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_liquidity_gorm_db_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_liquidity_gorm_db_proto_goTypes = []interface{}{
	(CurrencyType)(0),              // 0: liquidity.service.v1.CurrencyType
	(Fee)(0),                       // 1: liquidity.service.v1.Fee
	(TransactionSchedule)(0),       // 2: liquidity.service.v1.TransactionSchedule
	(RecurringFrequency)(0),        // 3: liquidity.service.v1.RecurringFrequency
	(*User)(nil),                   // 4: liquidity.service.v1.User
	(*LiquiditySchemes)(nil),       // 5: liquidity.service.v1.LiquiditySchemes
	(*LiquidityCashflow)(nil),      // 6: liquidity.service.v1.LiquidityCashflow
	(*LiquiditySources)(nil),       // 7: liquidity.service.v1.LiquiditySources
	(*LiquidityBeneficiaries)(nil), // 8: liquidity.service.v1.LiquidityBeneficiaries
	(*LiquiditySchedules)(nil),     // 9: liquidity.service.v1.LiquiditySchedules
	(*TBAValue)(nil),               // 10: liquidity.service.v1.TBAValue
	(*timestamppb.Timestamp)(nil),  // 11: google.protobuf.Timestamp
}
var file_liquidity_gorm_db_proto_depIdxs = []int32{
	11, // 0: liquidity.service.v1.User.created_at:type_name -> google.protobuf.Timestamp
	11, // 1: liquidity.service.v1.User.updated_at:type_name -> google.protobuf.Timestamp
	11, // 2: liquidity.service.v1.User.deleted_at:type_name -> google.protobuf.Timestamp
	11, // 3: liquidity.service.v1.LiquiditySchemes.startDate:type_name -> google.protobuf.Timestamp
	11, // 4: liquidity.service.v1.LiquiditySchemes.endDate:type_name -> google.protobuf.Timestamp
	11, // 5: liquidity.service.v1.LiquiditySchemes.createdAt:type_name -> google.protobuf.Timestamp
	11, // 6: liquidity.service.v1.LiquiditySchemes.updatedAt:type_name -> google.protobuf.Timestamp
	11, // 7: liquidity.service.v1.LiquiditySchemes.deleted_at:type_name -> google.protobuf.Timestamp
	6,  // 8: liquidity.service.v1.LiquiditySchemes.cashflow:type_name -> liquidity.service.v1.LiquidityCashflow
	5,  // 9: liquidity.service.v1.LiquidityCashflow.liquidity:type_name -> liquidity.service.v1.LiquiditySchemes
	11, // 10: liquidity.service.v1.LiquidityCashflow.createdAt:type_name -> google.protobuf.Timestamp
	11, // 11: liquidity.service.v1.LiquidityCashflow.updatedAt:type_name -> google.protobuf.Timestamp
	11, // 12: liquidity.service.v1.LiquidityCashflow.deleted_at:type_name -> google.protobuf.Timestamp
	7,  // 13: liquidity.service.v1.LiquidityCashflow.source:type_name -> liquidity.service.v1.LiquiditySources
	8,  // 14: liquidity.service.v1.LiquidityCashflow.beneficiaries:type_name -> liquidity.service.v1.LiquidityBeneficiaries
	6,  // 15: liquidity.service.v1.LiquiditySources.caashflow:type_name -> liquidity.service.v1.LiquidityCashflow
	11, // 16: liquidity.service.v1.LiquiditySources.createdAt:type_name -> google.protobuf.Timestamp
	11, // 17: liquidity.service.v1.LiquiditySources.updatedAt:type_name -> google.protobuf.Timestamp
	11, // 18: liquidity.service.v1.LiquiditySources.deleted_at:type_name -> google.protobuf.Timestamp
	6,  // 19: liquidity.service.v1.LiquidityBeneficiaries.caashflow:type_name -> liquidity.service.v1.LiquidityCashflow
	11, // 20: liquidity.service.v1.LiquidityBeneficiaries.createdAt:type_name -> google.protobuf.Timestamp
	11, // 21: liquidity.service.v1.LiquidityBeneficiaries.updatedAt:type_name -> google.protobuf.Timestamp
	11, // 22: liquidity.service.v1.LiquidityBeneficiaries.deleted_at:type_name -> google.protobuf.Timestamp
	11, // 23: liquidity.service.v1.LiquiditySchedules.scheduleTime:type_name -> google.protobuf.Timestamp
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_liquidity_gorm_db_proto_init() }
func file_liquidity_gorm_db_proto_init() {
	if File_liquidity_gorm_db_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_liquidity_gorm_db_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_liquidity_gorm_db_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquiditySchemes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_liquidity_gorm_db_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityCashflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_liquidity_gorm_db_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquiditySources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_liquidity_gorm_db_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityBeneficiaries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_liquidity_gorm_db_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquiditySchedules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_liquidity_gorm_db_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TBAValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_liquidity_gorm_db_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_liquidity_gorm_db_proto_goTypes,
		DependencyIndexes: file_liquidity_gorm_db_proto_depIdxs,
		EnumInfos:         file_liquidity_gorm_db_proto_enumTypes,
		MessageInfos:      file_liquidity_gorm_db_proto_msgTypes,
	}.Build()
	File_liquidity_gorm_db_proto = out.File
	file_liquidity_gorm_db_proto_rawDesc = nil
	file_liquidity_gorm_db_proto_goTypes = nil
	file_liquidity_gorm_db_proto_depIdxs = nil
}
