// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: payroll_api.proto

package pb

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiServiceClient is the client API for ApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiServiceClient interface {
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	GetTaskPayrollFile(ctx context.Context, in *GetTaskPayrollFileRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	GetTaskPayrollDetailFile(ctx context.Context, in *GetTaskPayrollDetailFileRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	GetTaskPayroll(ctx context.Context, in *GetTaskPayrollRequest, opts ...grpc.CallOption) (*GetTaskPayrollResponse, error)
	GetTaskPayrollDetail(ctx context.Context, in *GetTaskPayrollDetailRequest, opts ...grpc.CallOption) (*GetTaskPayrollDetailResponse, error)
	CreateTaskPayroll(ctx context.Context, in *CreateTaskPayrollRequest, opts ...grpc.CallOption) (*CreateTaskPayrollResponse, error)
	SetTaskPayroll(ctx context.Context, in *SetTaskPayrollRequest, opts ...grpc.CallOption) (*SetTaskPayrollResponse, error)
	CreatePayrollTransaction(ctx context.Context, in *CreatePayrollTransactionRequest, opts ...grpc.CallOption) (*CreatePayrollTransactionResponse, error)
	CancelPayrollTransaction(ctx context.Context, in *CancelPayrollTransactionRequest, opts ...grpc.CallOption) (*CancelPayrollTransactionResponse, error)
	ExecPayrollTransfer(ctx context.Context, in *ExecPayrollTransferRequest, opts ...grpc.CallOption) (*ExecPayrollTransferResponse, error)
	ExecFailedPayrollTransfer(ctx context.Context, in *ExecFailedPayrollTransferRequest, opts ...grpc.CallOption) (*ExecFailedPayrollTransferResponse, error)
	ExecFileCheckingPayrollJob(ctx context.Context, in *ExecFileCheckingPayrollJobRequest, opts ...grpc.CallOption) (*ExecFileCheckingPayrollJobResponse, error)
	ExecMassInquiryJob(ctx context.Context, in *ExecMassInquiryJobRequest, opts ...grpc.CallOption) (*ExecMassInquiryJobResponse, error)
	ExecMassTransferJob(ctx context.Context, in *ExecMassTransferJobRequest, opts ...grpc.CallOption) (*ExecMassTransferJobResponse, error)
	CreateMassTransfer(ctx context.Context, in *CreateMassTransferRequest, opts ...grpc.CallOption) (*CreateMassTransferResponse, error)
}

type apiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiServiceClient(cc grpc.ClientConnInterface) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/payroll.service.v1.ApiService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTaskPayrollFile(ctx context.Context, in *GetTaskPayrollFileRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/payroll.service.v1.ApiService/GetTaskPayrollFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTaskPayrollDetailFile(ctx context.Context, in *GetTaskPayrollDetailFileRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/payroll.service.v1.ApiService/GetTaskPayrollDetailFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTaskPayroll(ctx context.Context, in *GetTaskPayrollRequest, opts ...grpc.CallOption) (*GetTaskPayrollResponse, error) {
	out := new(GetTaskPayrollResponse)
	err := c.cc.Invoke(ctx, "/payroll.service.v1.ApiService/GetTaskPayroll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTaskPayrollDetail(ctx context.Context, in *GetTaskPayrollDetailRequest, opts ...grpc.CallOption) (*GetTaskPayrollDetailResponse, error) {
	out := new(GetTaskPayrollDetailResponse)
	err := c.cc.Invoke(ctx, "/payroll.service.v1.ApiService/GetTaskPayrollDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateTaskPayroll(ctx context.Context, in *CreateTaskPayrollRequest, opts ...grpc.CallOption) (*CreateTaskPayrollResponse, error) {
	out := new(CreateTaskPayrollResponse)
	err := c.cc.Invoke(ctx, "/payroll.service.v1.ApiService/CreateTaskPayroll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SetTaskPayroll(ctx context.Context, in *SetTaskPayrollRequest, opts ...grpc.CallOption) (*SetTaskPayrollResponse, error) {
	out := new(SetTaskPayrollResponse)
	err := c.cc.Invoke(ctx, "/payroll.service.v1.ApiService/SetTaskPayroll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreatePayrollTransaction(ctx context.Context, in *CreatePayrollTransactionRequest, opts ...grpc.CallOption) (*CreatePayrollTransactionResponse, error) {
	out := new(CreatePayrollTransactionResponse)
	err := c.cc.Invoke(ctx, "/payroll.service.v1.ApiService/CreatePayrollTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CancelPayrollTransaction(ctx context.Context, in *CancelPayrollTransactionRequest, opts ...grpc.CallOption) (*CancelPayrollTransactionResponse, error) {
	out := new(CancelPayrollTransactionResponse)
	err := c.cc.Invoke(ctx, "/payroll.service.v1.ApiService/CancelPayrollTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ExecPayrollTransfer(ctx context.Context, in *ExecPayrollTransferRequest, opts ...grpc.CallOption) (*ExecPayrollTransferResponse, error) {
	out := new(ExecPayrollTransferResponse)
	err := c.cc.Invoke(ctx, "/payroll.service.v1.ApiService/ExecPayrollTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ExecFailedPayrollTransfer(ctx context.Context, in *ExecFailedPayrollTransferRequest, opts ...grpc.CallOption) (*ExecFailedPayrollTransferResponse, error) {
	out := new(ExecFailedPayrollTransferResponse)
	err := c.cc.Invoke(ctx, "/payroll.service.v1.ApiService/ExecFailedPayrollTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ExecFileCheckingPayrollJob(ctx context.Context, in *ExecFileCheckingPayrollJobRequest, opts ...grpc.CallOption) (*ExecFileCheckingPayrollJobResponse, error) {
	out := new(ExecFileCheckingPayrollJobResponse)
	err := c.cc.Invoke(ctx, "/payroll.service.v1.ApiService/ExecFileCheckingPayrollJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ExecMassInquiryJob(ctx context.Context, in *ExecMassInquiryJobRequest, opts ...grpc.CallOption) (*ExecMassInquiryJobResponse, error) {
	out := new(ExecMassInquiryJobResponse)
	err := c.cc.Invoke(ctx, "/payroll.service.v1.ApiService/ExecMassInquiryJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ExecMassTransferJob(ctx context.Context, in *ExecMassTransferJobRequest, opts ...grpc.CallOption) (*ExecMassTransferJobResponse, error) {
	out := new(ExecMassTransferJobResponse)
	err := c.cc.Invoke(ctx, "/payroll.service.v1.ApiService/ExecMassTransferJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateMassTransfer(ctx context.Context, in *CreateMassTransferRequest, opts ...grpc.CallOption) (*CreateMassTransferResponse, error) {
	out := new(CreateMassTransferResponse)
	err := c.cc.Invoke(ctx, "/payroll.service.v1.ApiService/CreateMassTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServiceServer is the server API for ApiService service.
// All implementations must embed UnimplementedApiServiceServer
// for forward compatibility
type ApiServiceServer interface {
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	GetTaskPayrollFile(context.Context, *GetTaskPayrollFileRequest) (*httpbody.HttpBody, error)
	GetTaskPayrollDetailFile(context.Context, *GetTaskPayrollDetailFileRequest) (*httpbody.HttpBody, error)
	GetTaskPayroll(context.Context, *GetTaskPayrollRequest) (*GetTaskPayrollResponse, error)
	GetTaskPayrollDetail(context.Context, *GetTaskPayrollDetailRequest) (*GetTaskPayrollDetailResponse, error)
	CreateTaskPayroll(context.Context, *CreateTaskPayrollRequest) (*CreateTaskPayrollResponse, error)
	SetTaskPayroll(context.Context, *SetTaskPayrollRequest) (*SetTaskPayrollResponse, error)
	CreatePayrollTransaction(context.Context, *CreatePayrollTransactionRequest) (*CreatePayrollTransactionResponse, error)
	CancelPayrollTransaction(context.Context, *CancelPayrollTransactionRequest) (*CancelPayrollTransactionResponse, error)
	ExecPayrollTransfer(context.Context, *ExecPayrollTransferRequest) (*ExecPayrollTransferResponse, error)
	ExecFailedPayrollTransfer(context.Context, *ExecFailedPayrollTransferRequest) (*ExecFailedPayrollTransferResponse, error)
	ExecFileCheckingPayrollJob(context.Context, *ExecFileCheckingPayrollJobRequest) (*ExecFileCheckingPayrollJobResponse, error)
	ExecMassInquiryJob(context.Context, *ExecMassInquiryJobRequest) (*ExecMassInquiryJobResponse, error)
	ExecMassTransferJob(context.Context, *ExecMassTransferJobRequest) (*ExecMassTransferJobResponse, error)
	CreateMassTransfer(context.Context, *CreateMassTransferRequest) (*CreateMassTransferResponse, error)
	mustEmbedUnimplementedApiServiceServer()
}

// UnimplementedApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApiServiceServer struct {
}

func (UnimplementedApiServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedApiServiceServer) GetTaskPayrollFile(context.Context, *GetTaskPayrollFileRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskPayrollFile not implemented")
}
func (UnimplementedApiServiceServer) GetTaskPayrollDetailFile(context.Context, *GetTaskPayrollDetailFileRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskPayrollDetailFile not implemented")
}
func (UnimplementedApiServiceServer) GetTaskPayroll(context.Context, *GetTaskPayrollRequest) (*GetTaskPayrollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskPayroll not implemented")
}
func (UnimplementedApiServiceServer) GetTaskPayrollDetail(context.Context, *GetTaskPayrollDetailRequest) (*GetTaskPayrollDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskPayrollDetail not implemented")
}
func (UnimplementedApiServiceServer) CreateTaskPayroll(context.Context, *CreateTaskPayrollRequest) (*CreateTaskPayrollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskPayroll not implemented")
}
func (UnimplementedApiServiceServer) SetTaskPayroll(context.Context, *SetTaskPayrollRequest) (*SetTaskPayrollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTaskPayroll not implemented")
}
func (UnimplementedApiServiceServer) CreatePayrollTransaction(context.Context, *CreatePayrollTransactionRequest) (*CreatePayrollTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePayrollTransaction not implemented")
}
func (UnimplementedApiServiceServer) CancelPayrollTransaction(context.Context, *CancelPayrollTransactionRequest) (*CancelPayrollTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPayrollTransaction not implemented")
}
func (UnimplementedApiServiceServer) ExecPayrollTransfer(context.Context, *ExecPayrollTransferRequest) (*ExecPayrollTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecPayrollTransfer not implemented")
}
func (UnimplementedApiServiceServer) ExecFailedPayrollTransfer(context.Context, *ExecFailedPayrollTransferRequest) (*ExecFailedPayrollTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecFailedPayrollTransfer not implemented")
}
func (UnimplementedApiServiceServer) ExecFileCheckingPayrollJob(context.Context, *ExecFileCheckingPayrollJobRequest) (*ExecFileCheckingPayrollJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecFileCheckingPayrollJob not implemented")
}
func (UnimplementedApiServiceServer) ExecMassInquiryJob(context.Context, *ExecMassInquiryJobRequest) (*ExecMassInquiryJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecMassInquiryJob not implemented")
}
func (UnimplementedApiServiceServer) ExecMassTransferJob(context.Context, *ExecMassTransferJobRequest) (*ExecMassTransferJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecMassTransferJob not implemented")
}
func (UnimplementedApiServiceServer) CreateMassTransfer(context.Context, *CreateMassTransferRequest) (*CreateMassTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMassTransfer not implemented")
}
func (UnimplementedApiServiceServer) mustEmbedUnimplementedApiServiceServer() {}

// UnsafeApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServiceServer will
// result in compilation errors.
type UnsafeApiServiceServer interface {
	mustEmbedUnimplementedApiServiceServer()
}

func RegisterApiServiceServer(s grpc.ServiceRegistrar, srv ApiServiceServer) {
	s.RegisterService(&ApiService_ServiceDesc, srv)
}

func _ApiService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payroll.service.v1.ApiService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTaskPayrollFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskPayrollFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTaskPayrollFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payroll.service.v1.ApiService/GetTaskPayrollFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTaskPayrollFile(ctx, req.(*GetTaskPayrollFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTaskPayrollDetailFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskPayrollDetailFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTaskPayrollDetailFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payroll.service.v1.ApiService/GetTaskPayrollDetailFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTaskPayrollDetailFile(ctx, req.(*GetTaskPayrollDetailFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTaskPayroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskPayrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTaskPayroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payroll.service.v1.ApiService/GetTaskPayroll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTaskPayroll(ctx, req.(*GetTaskPayrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTaskPayrollDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskPayrollDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTaskPayrollDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payroll.service.v1.ApiService/GetTaskPayrollDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTaskPayrollDetail(ctx, req.(*GetTaskPayrollDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateTaskPayroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskPayrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateTaskPayroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payroll.service.v1.ApiService/CreateTaskPayroll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateTaskPayroll(ctx, req.(*CreateTaskPayrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SetTaskPayroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTaskPayrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SetTaskPayroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payroll.service.v1.ApiService/SetTaskPayroll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SetTaskPayroll(ctx, req.(*SetTaskPayrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreatePayrollTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePayrollTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreatePayrollTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payroll.service.v1.ApiService/CreatePayrollTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreatePayrollTransaction(ctx, req.(*CreatePayrollTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CancelPayrollTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelPayrollTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CancelPayrollTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payroll.service.v1.ApiService/CancelPayrollTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CancelPayrollTransaction(ctx, req.(*CancelPayrollTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ExecPayrollTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecPayrollTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ExecPayrollTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payroll.service.v1.ApiService/ExecPayrollTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ExecPayrollTransfer(ctx, req.(*ExecPayrollTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ExecFailedPayrollTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecFailedPayrollTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ExecFailedPayrollTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payroll.service.v1.ApiService/ExecFailedPayrollTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ExecFailedPayrollTransfer(ctx, req.(*ExecFailedPayrollTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ExecFileCheckingPayrollJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecFileCheckingPayrollJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ExecFileCheckingPayrollJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payroll.service.v1.ApiService/ExecFileCheckingPayrollJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ExecFileCheckingPayrollJob(ctx, req.(*ExecFileCheckingPayrollJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ExecMassInquiryJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecMassInquiryJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ExecMassInquiryJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payroll.service.v1.ApiService/ExecMassInquiryJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ExecMassInquiryJob(ctx, req.(*ExecMassInquiryJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ExecMassTransferJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecMassTransferJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ExecMassTransferJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payroll.service.v1.ApiService/ExecMassTransferJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ExecMassTransferJob(ctx, req.(*ExecMassTransferJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateMassTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMassTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateMassTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payroll.service.v1.ApiService/CreateMassTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateMassTransfer(ctx, req.(*CreateMassTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiService_ServiceDesc is the grpc.ServiceDesc for ApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payroll.service.v1.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _ApiService_HealthCheck_Handler,
		},
		{
			MethodName: "GetTaskPayrollFile",
			Handler:    _ApiService_GetTaskPayrollFile_Handler,
		},
		{
			MethodName: "GetTaskPayrollDetailFile",
			Handler:    _ApiService_GetTaskPayrollDetailFile_Handler,
		},
		{
			MethodName: "GetTaskPayroll",
			Handler:    _ApiService_GetTaskPayroll_Handler,
		},
		{
			MethodName: "GetTaskPayrollDetail",
			Handler:    _ApiService_GetTaskPayrollDetail_Handler,
		},
		{
			MethodName: "CreateTaskPayroll",
			Handler:    _ApiService_CreateTaskPayroll_Handler,
		},
		{
			MethodName: "SetTaskPayroll",
			Handler:    _ApiService_SetTaskPayroll_Handler,
		},
		{
			MethodName: "CreatePayrollTransaction",
			Handler:    _ApiService_CreatePayrollTransaction_Handler,
		},
		{
			MethodName: "CancelPayrollTransaction",
			Handler:    _ApiService_CancelPayrollTransaction_Handler,
		},
		{
			MethodName: "ExecPayrollTransfer",
			Handler:    _ApiService_ExecPayrollTransfer_Handler,
		},
		{
			MethodName: "ExecFailedPayrollTransfer",
			Handler:    _ApiService_ExecFailedPayrollTransfer_Handler,
		},
		{
			MethodName: "ExecFileCheckingPayrollJob",
			Handler:    _ApiService_ExecFileCheckingPayrollJob_Handler,
		},
		{
			MethodName: "ExecMassInquiryJob",
			Handler:    _ApiService_ExecMassInquiryJob_Handler,
		},
		{
			MethodName: "ExecMassTransferJob",
			Handler:    _ApiService_ExecMassTransferJob_Handler,
		},
		{
			MethodName: "CreateMassTransfer",
			Handler:    _ApiService_CreateMassTransfer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payroll_api.proto",
}
