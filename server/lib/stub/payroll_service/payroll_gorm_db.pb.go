// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: payroll_gorm_db.proto

package pb

import (
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TransactionType int32

const (
	TransactionType_InternalTransfer TransactionType = 0
	TransactionType_ExternalTransfer TransactionType = 1
)

// Enum value maps for TransactionType.
var (
	TransactionType_name = map[int32]string{
		0: "InternalTransfer",
		1: "ExternalTransfer",
	}
	TransactionType_value = map[string]int32{
		"InternalTransfer": 0,
		"ExternalTransfer": 1,
	}
)

func (x TransactionType) Enum() *TransactionType {
	p := new(TransactionType)
	*p = x
	return p
}

func (x TransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_payroll_gorm_db_proto_enumTypes[0].Descriptor()
}

func (TransactionType) Type() protoreflect.EnumType {
	return &file_payroll_gorm_db_proto_enumTypes[0]
}

func (x TransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionType.Descriptor instead.
func (TransactionType) EnumDescriptor() ([]byte, []int) {
	return file_payroll_gorm_db_proto_rawDescGZIP(), []int{0}
}

type Fee int32

const (
	Fee_OUR Fee = 0
	Fee_BEN Fee = 1
)

// Enum value maps for Fee.
var (
	Fee_name = map[int32]string{
		0: "OUR",
		1: "BEN",
	}
	Fee_value = map[string]int32{
		"OUR": 0,
		"BEN": 1,
	}
)

func (x Fee) Enum() *Fee {
	p := new(Fee)
	*p = x
	return p
}

func (x Fee) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Fee) Descriptor() protoreflect.EnumDescriptor {
	return file_payroll_gorm_db_proto_enumTypes[1].Descriptor()
}

func (Fee) Type() protoreflect.EnumType {
	return &file_payroll_gorm_db_proto_enumTypes[1]
}

func (x Fee) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Fee.Descriptor instead.
func (Fee) EnumDescriptor() ([]byte, []int) {
	return file_payroll_gorm_db_proto_rawDescGZIP(), []int{1}
}

type TransactionSchedule int32

const (
	TransactionSchedule_NullTransactionSchedule TransactionSchedule = 0
	TransactionSchedule_Immediate               TransactionSchedule = 1
	TransactionSchedule_Scheduled               TransactionSchedule = 2
	TransactionSchedule_Recurring               TransactionSchedule = 3
)

// Enum value maps for TransactionSchedule.
var (
	TransactionSchedule_name = map[int32]string{
		0: "NullTransactionSchedule",
		1: "Immediate",
		2: "Scheduled",
		3: "Recurring",
	}
	TransactionSchedule_value = map[string]int32{
		"NullTransactionSchedule": 0,
		"Immediate":               1,
		"Scheduled":               2,
		"Recurring":               3,
	}
)

func (x TransactionSchedule) Enum() *TransactionSchedule {
	p := new(TransactionSchedule)
	*p = x
	return p
}

func (x TransactionSchedule) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionSchedule) Descriptor() protoreflect.EnumDescriptor {
	return file_payroll_gorm_db_proto_enumTypes[2].Descriptor()
}

func (TransactionSchedule) Type() protoreflect.EnumType {
	return &file_payroll_gorm_db_proto_enumTypes[2]
}

func (x TransactionSchedule) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionSchedule.Descriptor instead.
func (TransactionSchedule) EnumDescriptor() ([]byte, []int) {
	return file_payroll_gorm_db_proto_rawDescGZIP(), []int{2}
}

type RecurringFrequency int32

const (
	RecurringFrequency_NullRecurringFrequency RecurringFrequency = 0
	RecurringFrequency_Daily                  RecurringFrequency = 1
	RecurringFrequency_Weekly                 RecurringFrequency = 2
	RecurringFrequency_Monthly                RecurringFrequency = 3
)

// Enum value maps for RecurringFrequency.
var (
	RecurringFrequency_name = map[int32]string{
		0: "NullRecurringFrequency",
		1: "Daily",
		2: "Weekly",
		3: "Monthly",
	}
	RecurringFrequency_value = map[string]int32{
		"NullRecurringFrequency": 0,
		"Daily":                  1,
		"Weekly":                 2,
		"Monthly":                3,
	}
)

func (x RecurringFrequency) Enum() *RecurringFrequency {
	p := new(RecurringFrequency)
	*p = x
	return p
}

func (x RecurringFrequency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecurringFrequency) Descriptor() protoreflect.EnumDescriptor {
	return file_payroll_gorm_db_proto_enumTypes[3].Descriptor()
}

func (RecurringFrequency) Type() protoreflect.EnumType {
	return &file_payroll_gorm_db_proto_enumTypes[3]
}

func (x RecurringFrequency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecurringFrequency.Descriptor instead.
func (RecurringFrequency) EnumDescriptor() ([]byte, []int) {
	return file_payroll_gorm_db_proto_rawDescGZIP(), []int{3}
}

type MassTransactionType int32

const (
	MassTransactionType_PayrollType MassTransactionType = 0
	MassTransactionType_BulkType    MassTransactionType = 1
)

// Enum value maps for MassTransactionType.
var (
	MassTransactionType_name = map[int32]string{
		0: "PayrollType",
		1: "BulkType",
	}
	MassTransactionType_value = map[string]int32{
		"PayrollType": 0,
		"BulkType":    1,
	}
)

func (x MassTransactionType) Enum() *MassTransactionType {
	p := new(MassTransactionType)
	*p = x
	return p
}

func (x MassTransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MassTransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_payroll_gorm_db_proto_enumTypes[4].Descriptor()
}

func (MassTransactionType) Type() protoreflect.EnumType {
	return &file_payroll_gorm_db_proto_enumTypes[4]
}

func (x MassTransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MassTransactionType.Descriptor instead.
func (MassTransactionType) EnumDescriptor() ([]byte, []int) {
	return file_payroll_gorm_db_proto_rawDescGZIP(), []int{4}
}

type MassStatus int32

const (
	MassStatus_NullStatus MassStatus = 0
	MassStatus_Success    MassStatus = 1
	MassStatus_Failed     MassStatus = 2
	MassStatus_OnProcess  MassStatus = 3
)

// Enum value maps for MassStatus.
var (
	MassStatus_name = map[int32]string{
		0: "NullStatus",
		1: "Success",
		2: "Failed",
		3: "OnProcess",
	}
	MassStatus_value = map[string]int32{
		"NullStatus": 0,
		"Success":    1,
		"Failed":     2,
		"OnProcess":  3,
	}
)

func (x MassStatus) Enum() *MassStatus {
	p := new(MassStatus)
	*p = x
	return p
}

func (x MassStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MassStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_payroll_gorm_db_proto_enumTypes[5].Descriptor()
}

func (MassStatus) Type() protoreflect.EnumType {
	return &file_payroll_gorm_db_proto_enumTypes[5]
}

func (x MassStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MassStatus.Descriptor instead.
func (MassStatus) EnumDescriptor() ([]byte, []int) {
	return file_payroll_gorm_db_proto_rawDescGZIP(), []int{5}
}

type FileExtension int32

const (
	FileExtension_NullExtension FileExtension = 0
	FileExtension_CSV           FileExtension = 1
	FileExtension_XLS           FileExtension = 2
)

// Enum value maps for FileExtension.
var (
	FileExtension_name = map[int32]string{
		0: "NullExtension",
		1: "CSV",
		2: "XLS",
	}
	FileExtension_value = map[string]int32{
		"NullExtension": 0,
		"CSV":           1,
		"XLS":           2,
	}
)

func (x FileExtension) Enum() *FileExtension {
	p := new(FileExtension)
	*p = x
	return p
}

func (x FileExtension) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileExtension) Descriptor() protoreflect.EnumDescriptor {
	return file_payroll_gorm_db_proto_enumTypes[6].Descriptor()
}

func (FileExtension) Type() protoreflect.EnumType {
	return &file_payroll_gorm_db_proto_enumTypes[6]
}

func (x FileExtension) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileExtension.Descriptor instead.
func (FileExtension) EnumDescriptor() ([]byte, []int) {
	return file_payroll_gorm_db_proto_rawDescGZIP(), []int{6}
}

type MassStep int32

const (
	MassStep_NullStep MassStep = 0
	MassStep_Inquiry  MassStep = 1
	MassStep_Transfer MassStep = 2
)

// Enum value maps for MassStep.
var (
	MassStep_name = map[int32]string{
		0: "NullStep",
		1: "Inquiry",
		2: "Transfer",
	}
	MassStep_value = map[string]int32{
		"NullStep": 0,
		"Inquiry":  1,
		"Transfer": 2,
	}
)

func (x MassStep) Enum() *MassStep {
	p := new(MassStep)
	*p = x
	return p
}

func (x MassStep) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MassStep) Descriptor() protoreflect.EnumDescriptor {
	return file_payroll_gorm_db_proto_enumTypes[7].Descriptor()
}

func (MassStep) Type() protoreflect.EnumType {
	return &file_payroll_gorm_db_proto_enumTypes[7]
}

func (x MassStep) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MassStep.Descriptor instead.
func (MassStep) EnumDescriptor() ([]byte, []int) {
	return file_payroll_gorm_db_proto_rawDescGZIP(), []int{7}
}

type PayrollTransferTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TaskID               uint64                 `protobuf:"varint,2,opt,name=taskID,proto3" json:"taskID,omitempty"`
	TransactionID        string                 `protobuf:"bytes,3,opt,name=transactionID,proto3" json:"transactionID,omitempty"`
	TransactionServiceID uint64                 `protobuf:"varint,4,opt,name=transactionServiceID,proto3" json:"transactionServiceID,omitempty"`
	Data                 string                 `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	CreatedAt            *timestamppb.Timestamp `protobuf:"bytes,51,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt            *timestamppb.Timestamp `protobuf:"bytes,52,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *PayrollTransferTransaction) Reset() {
	*x = PayrollTransferTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payroll_gorm_db_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayrollTransferTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayrollTransferTransaction) ProtoMessage() {}

func (x *PayrollTransferTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_payroll_gorm_db_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayrollTransferTransaction.ProtoReflect.Descriptor instead.
func (*PayrollTransferTransaction) Descriptor() ([]byte, []int) {
	return file_payroll_gorm_db_proto_rawDescGZIP(), []int{0}
}

func (x *PayrollTransferTransaction) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PayrollTransferTransaction) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *PayrollTransferTransaction) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

func (x *PayrollTransferTransaction) GetTransactionServiceID() uint64 {
	if x != nil {
		return x.TransactionServiceID
	}
	return 0
}

func (x *PayrollTransferTransaction) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *PayrollTransferTransaction) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PayrollTransferTransaction) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type PayrollTransferItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserID             uint64                 `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`
	TaskID             uint64                 `protobuf:"varint,3,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Data               string                 `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Validation         string                 `protobuf:"bytes,5,opt,name=validation,proto3" json:"validation,omitempty"`
	InquiryResult      string                 `protobuf:"bytes,6,opt,name=inquiryResult,proto3" json:"inquiryResult,omitempty"`
	TransferResult     string                 `protobuf:"bytes,7,opt,name=transferResult,proto3" json:"transferResult,omitempty"`
	Type               MassTransactionType    `protobuf:"varint,8,opt,name=type,proto3,enum=payroll.service.v1.MassTransactionType" json:"type,omitempty"`
	ValidationValid    bool                   `protobuf:"varint,9,opt,name=validationValid,proto3" json:"validationValid,omitempty"`
	InquiryValid       bool                   `protobuf:"varint,10,opt,name=inquiryValid,proto3" json:"inquiryValid,omitempty"`
	TransferValid      bool                   `protobuf:"varint,11,opt,name=transferValid,proto3" json:"transferValid,omitempty"`
	BeneficiaryAccount string                 `protobuf:"bytes,12,opt,name=beneficiaryAccount,proto3" json:"beneficiaryAccount,omitempty"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,51,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt          *timestamppb.Timestamp `protobuf:"bytes,52,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *PayrollTransferItem) Reset() {
	*x = PayrollTransferItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payroll_gorm_db_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayrollTransferItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayrollTransferItem) ProtoMessage() {}

func (x *PayrollTransferItem) ProtoReflect() protoreflect.Message {
	mi := &file_payroll_gorm_db_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayrollTransferItem.ProtoReflect.Descriptor instead.
func (*PayrollTransferItem) Descriptor() ([]byte, []int) {
	return file_payroll_gorm_db_proto_rawDescGZIP(), []int{1}
}

func (x *PayrollTransferItem) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PayrollTransferItem) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *PayrollTransferItem) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *PayrollTransferItem) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *PayrollTransferItem) GetValidation() string {
	if x != nil {
		return x.Validation
	}
	return ""
}

func (x *PayrollTransferItem) GetInquiryResult() string {
	if x != nil {
		return x.InquiryResult
	}
	return ""
}

func (x *PayrollTransferItem) GetTransferResult() string {
	if x != nil {
		return x.TransferResult
	}
	return ""
}

func (x *PayrollTransferItem) GetType() MassTransactionType {
	if x != nil {
		return x.Type
	}
	return MassTransactionType_PayrollType
}

func (x *PayrollTransferItem) GetValidationValid() bool {
	if x != nil {
		return x.ValidationValid
	}
	return false
}

func (x *PayrollTransferItem) GetInquiryValid() bool {
	if x != nil {
		return x.InquiryValid
	}
	return false
}

func (x *PayrollTransferItem) GetTransferValid() bool {
	if x != nil {
		return x.TransferValid
	}
	return false
}

func (x *PayrollTransferItem) GetBeneficiaryAccount() string {
	if x != nil {
		return x.BeneficiaryAccount
	}
	return ""
}

func (x *PayrollTransferItem) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PayrollTransferItem) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type MassInquiryJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserID    uint64                 `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`
	TaskID    uint64                 `protobuf:"varint,3,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Data      string                 `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	RunAt     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=runAt,proto3" json:"runAt,omitempty"`
	Comment   string                 `protobuf:"bytes,6,opt,name=comment,proto3" json:"comment,omitempty"`
	Retry     uint64                 `protobuf:"varint,7,opt,name=retry,proto3" json:"retry,omitempty"`
	InQueue   string                 `protobuf:"bytes,8,opt,name=in_queue,json=inQueue,proto3" json:"in_queue,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,51,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,52,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *MassInquiryJob) Reset() {
	*x = MassInquiryJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payroll_gorm_db_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MassInquiryJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MassInquiryJob) ProtoMessage() {}

func (x *MassInquiryJob) ProtoReflect() protoreflect.Message {
	mi := &file_payroll_gorm_db_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MassInquiryJob.ProtoReflect.Descriptor instead.
func (*MassInquiryJob) Descriptor() ([]byte, []int) {
	return file_payroll_gorm_db_proto_rawDescGZIP(), []int{2}
}

func (x *MassInquiryJob) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MassInquiryJob) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MassInquiryJob) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *MassInquiryJob) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *MassInquiryJob) GetRunAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RunAt
	}
	return nil
}

func (x *MassInquiryJob) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *MassInquiryJob) GetRetry() uint64 {
	if x != nil {
		return x.Retry
	}
	return 0
}

func (x *MassInquiryJob) GetInQueue() string {
	if x != nil {
		return x.InQueue
	}
	return ""
}

func (x *MassInquiryJob) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MassInquiryJob) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type MassTransferJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserID    uint64                 `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`
	TaskID    uint64                 `protobuf:"varint,3,opt,name=taskID,proto3" json:"taskID,omitempty"`
	CompanyID uint64                 `protobuf:"varint,4,opt,name=companyID,proto3" json:"companyID,omitempty"`
	Data      string                 `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	RunAt     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=runAt,proto3" json:"runAt,omitempty"`
	Comment   string                 `protobuf:"bytes,7,opt,name=comment,proto3" json:"comment,omitempty"`
	Retry     uint64                 `protobuf:"varint,8,opt,name=retry,proto3" json:"retry,omitempty"`
	InQueue   string                 `protobuf:"bytes,9,opt,name=in_queue,json=inQueue,proto3" json:"in_queue,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,51,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,52,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *MassTransferJob) Reset() {
	*x = MassTransferJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payroll_gorm_db_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MassTransferJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MassTransferJob) ProtoMessage() {}

func (x *MassTransferJob) ProtoReflect() protoreflect.Message {
	mi := &file_payroll_gorm_db_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MassTransferJob.ProtoReflect.Descriptor instead.
func (*MassTransferJob) Descriptor() ([]byte, []int) {
	return file_payroll_gorm_db_proto_rawDescGZIP(), []int{3}
}

func (x *MassTransferJob) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MassTransferJob) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MassTransferJob) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *MassTransferJob) GetCompanyID() uint64 {
	if x != nil {
		return x.CompanyID
	}
	return 0
}

func (x *MassTransferJob) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *MassTransferJob) GetRunAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RunAt
	}
	return nil
}

func (x *MassTransferJob) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *MassTransferJob) GetRetry() uint64 {
	if x != nil {
		return x.Retry
	}
	return 0
}

func (x *MassTransferJob) GetInQueue() string {
	if x != nil {
		return x.InQueue
	}
	return ""
}

func (x *MassTransferJob) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MassTransferJob) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type CreateMassTransferJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TaskID    uint64                 `protobuf:"varint,2,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Success   bool                   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	RunAt     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=runAt,proto3" json:"runAt,omitempty"`
	Comment   string                 `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
	Retry     uint64                 `protobuf:"varint,6,opt,name=retry,proto3" json:"retry,omitempty"`
	InQueue   string                 `protobuf:"bytes,7,opt,name=in_queue,json=inQueue,proto3" json:"in_queue,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,51,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,52,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *CreateMassTransferJob) Reset() {
	*x = CreateMassTransferJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payroll_gorm_db_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMassTransferJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMassTransferJob) ProtoMessage() {}

func (x *CreateMassTransferJob) ProtoReflect() protoreflect.Message {
	mi := &file_payroll_gorm_db_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMassTransferJob.ProtoReflect.Descriptor instead.
func (*CreateMassTransferJob) Descriptor() ([]byte, []int) {
	return file_payroll_gorm_db_proto_rawDescGZIP(), []int{4}
}

func (x *CreateMassTransferJob) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateMassTransferJob) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *CreateMassTransferJob) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateMassTransferJob) GetRunAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RunAt
	}
	return nil
}

func (x *CreateMassTransferJob) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *CreateMassTransferJob) GetRetry() uint64 {
	if x != nil {
		return x.Retry
	}
	return 0
}

func (x *CreateMassTransferJob) GetInQueue() string {
	if x != nil {
		return x.InQueue
	}
	return ""
}

func (x *CreateMassTransferJob) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CreateMassTransferJob) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type FileCheckingJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TaskID        uint64                 `protobuf:"varint,2,opt,name=taskID,proto3" json:"taskID,omitempty"`
	TransactionID string                 `protobuf:"bytes,3,opt,name=transactionID,proto3" json:"transactionID,omitempty"`
	CompanyID     uint64                 `protobuf:"varint,4,opt,name=companyID,proto3" json:"companyID,omitempty"`
	Data          string                 `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	FileName      string                 `protobuf:"bytes,7,opt,name=fileName,proto3" json:"fileName,omitempty"`
	Success       bool                   `protobuf:"varint,8,opt,name=success,proto3" json:"success,omitempty"`
	RunAt         *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=runAt,proto3" json:"runAt,omitempty"`
	Retry         uint64                 `protobuf:"varint,10,opt,name=retry,proto3" json:"retry,omitempty"`
	Comment       string                 `protobuf:"bytes,11,opt,name=comment,proto3" json:"comment,omitempty"`
	InQueue       string                 `protobuf:"bytes,12,opt,name=in_queue,json=inQueue,proto3" json:"in_queue,omitempty"`
	CreatedByID   uint64                 `protobuf:"varint,41,opt,name=createdByID,proto3" json:"createdByID,omitempty"`
	UpdatedByID   uint64                 `protobuf:"varint,42,opt,name=updatedByID,proto3" json:"updatedByID,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,51,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,52,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *FileCheckingJob) Reset() {
	*x = FileCheckingJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payroll_gorm_db_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileCheckingJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileCheckingJob) ProtoMessage() {}

func (x *FileCheckingJob) ProtoReflect() protoreflect.Message {
	mi := &file_payroll_gorm_db_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileCheckingJob.ProtoReflect.Descriptor instead.
func (*FileCheckingJob) Descriptor() ([]byte, []int) {
	return file_payroll_gorm_db_proto_rawDescGZIP(), []int{5}
}

func (x *FileCheckingJob) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FileCheckingJob) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *FileCheckingJob) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

func (x *FileCheckingJob) GetCompanyID() uint64 {
	if x != nil {
		return x.CompanyID
	}
	return 0
}

func (x *FileCheckingJob) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *FileCheckingJob) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileCheckingJob) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *FileCheckingJob) GetRunAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RunAt
	}
	return nil
}

func (x *FileCheckingJob) GetRetry() uint64 {
	if x != nil {
		return x.Retry
	}
	return 0
}

func (x *FileCheckingJob) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *FileCheckingJob) GetInQueue() string {
	if x != nil {
		return x.InQueue
	}
	return ""
}

func (x *FileCheckingJob) GetCreatedByID() uint64 {
	if x != nil {
		return x.CreatedByID
	}
	return 0
}

func (x *FileCheckingJob) GetUpdatedByID() uint64 {
	if x != nil {
		return x.UpdatedByID
	}
	return 0
}

func (x *FileCheckingJob) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *FileCheckingJob) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type UploadedFileName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UploadedFileName string                 `protobuf:"bytes,2,opt,name=uploadedFileName,proto3" json:"uploadedFileName,omitempty"`
	OriginalFileName string                 `protobuf:"bytes,3,opt,name=originalFileName,proto3" json:"originalFileName,omitempty"`
	CompanyID        uint64                 `protobuf:"varint,4,opt,name=companyID,proto3" json:"companyID,omitempty"`
	Finished         bool                   `protobuf:"varint,5,opt,name=finished,proto3" json:"finished,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,51,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt        *timestamppb.Timestamp `protobuf:"bytes,52,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *UploadedFileName) Reset() {
	*x = UploadedFileName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payroll_gorm_db_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadedFileName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadedFileName) ProtoMessage() {}

func (x *UploadedFileName) ProtoReflect() protoreflect.Message {
	mi := &file_payroll_gorm_db_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadedFileName.ProtoReflect.Descriptor instead.
func (*UploadedFileName) Descriptor() ([]byte, []int) {
	return file_payroll_gorm_db_proto_rawDescGZIP(), []int{6}
}

func (x *UploadedFileName) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UploadedFileName) GetUploadedFileName() string {
	if x != nil {
		return x.UploadedFileName
	}
	return ""
}

func (x *UploadedFileName) GetOriginalFileName() string {
	if x != nil {
		return x.OriginalFileName
	}
	return ""
}

func (x *UploadedFileName) GetCompanyID() uint64 {
	if x != nil {
		return x.CompanyID
	}
	return 0
}

func (x *UploadedFileName) GetFinished() bool {
	if x != nil {
		return x.Finished
	}
	return false
}

func (x *UploadedFileName) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *UploadedFileName) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

var File_payroll_gorm_db_proto protoreflect.FileDescriptor

var file_payroll_gorm_db_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x67, 0x6f, 0x72, 0x6d, 0x5f, 0x64,
	0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x70, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x72, 0x6d, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x82, 0x03, 0x0a, 0x1a, 0x50, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0xba, 0xb9,
	0x19, 0x06, 0x0a, 0x04, 0x28, 0x01, 0x40, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x21,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xba, 0xb9,
	0x19, 0x09, 0x0a, 0x07, 0x12, 0x05, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x45, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x0b, 0xe0, 0x41, 0x03, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x45, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0xe0, 0x41, 0x03, 0xba, 0xb9, 0x19, 0x04,
	0x0a, 0x02, 0x40, 0x01, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a,
	0x25, 0xba, 0xb9, 0x19, 0x21, 0x08, 0x01, 0x1a, 0x1d, 0x70, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xae, 0x05, 0x0a, 0x13, 0x50, 0x61, 0x79, 0x72, 0x6f,
	0x6c, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0xba, 0xb9, 0x19, 0x06,
	0x0a, 0x04, 0x28, 0x01, 0x40, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xba, 0xb9, 0x19, 0x09, 0x0a, 0x07,
	0x12, 0x05, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a,
	0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0d, 0xba, 0xb9, 0x19, 0x09, 0x0a, 0x07, 0x12, 0x05, 0x6a, 0x73, 0x6f, 0x6e, 0x62,
	0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0d,
	0x69, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0d, 0xba, 0xb9, 0x19, 0x09, 0x0a, 0x07, 0x12, 0x05, 0x6a, 0x73, 0x6f,
	0x6e, 0x62, 0x52, 0x0d, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x35, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xba, 0xb9, 0x19, 0x09, 0x0a,
	0x07, 0x12, 0x05, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x73, 0x73,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x62, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0xe0, 0x41, 0x03, 0xba, 0xb9, 0x19,
	0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x45, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x34, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x0b, 0xe0, 0x41, 0x03, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x1e, 0xba, 0xb9, 0x19, 0x1a, 0x08, 0x01, 0x1a,
	0x16, 0x70, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xa5, 0x03, 0x0a, 0x0e, 0x4d, 0x61, 0x73, 0x73,
	0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0xba, 0xb9, 0x19, 0x06, 0x0a, 0x04, 0x28, 0x01,
	0x40, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xba, 0xb9, 0x19, 0x09, 0x0a, 0x07, 0x12, 0x05, 0x6a, 0x73,
	0x6f, 0x6e, 0x62, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x05, 0x72, 0x75, 0x6e,
	0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x6e, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69,
	0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0xe0, 0x41, 0x03, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02,
	0x40, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x45, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0xe0, 0x41,
	0x03, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x3a, 0x19, 0xba, 0xb9, 0x19, 0x15, 0x08, 0x01, 0x1a, 0x11, 0x6d, 0x61,
	0x73, 0x73, 0x5f, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x22,
	0xc5, 0x03, 0x0a, 0x0f, 0x4d, 0x61, 0x73, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x4a, 0x6f, 0x62, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x0a, 0xba, 0xb9, 0x19, 0x06, 0x0a, 0x04, 0x28, 0x01, 0x40, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x12, 0x21, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xba, 0xb9, 0x19,
	0x09, 0x0a, 0x07, 0x12, 0x05, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x30, 0x0a, 0x05, 0x72, 0x75, 0x6e, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x72, 0x75, 0x6e,
	0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x45, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0xe0, 0x41,
	0x03, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x45, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x0b, 0xe0, 0x41, 0x03, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x1a, 0xba, 0xb9, 0x19,
	0x16, 0x08, 0x01, 0x1a, 0x12, 0x6d, 0x61, 0x73, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x22, 0x93, 0x03, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x73, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4a, 0x6f,
	0x62, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0xba,
	0xb9, 0x19, 0x06, 0x0a, 0x04, 0x28, 0x01, 0x40, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x30, 0x0a, 0x05, 0x72, 0x75, 0x6e, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x41,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x45, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0xe0, 0x41, 0x03,
	0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x45, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x0b, 0xe0, 0x41, 0x03, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x21, 0xba, 0xb9, 0x19, 0x1d,
	0x08, 0x01, 0x1a, 0x19, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x73, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x22, 0xcd, 0x04,
	0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4a, 0x6f,
	0x62, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0xba,
	0xb9, 0x19, 0x06, 0x0a, 0x04, 0x28, 0x01, 0x40, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xba, 0xb9, 0x19, 0x09, 0x0a, 0x07, 0x12,
	0x05, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x72, 0x75, 0x6e, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x72,
	0x75, 0x6e, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49,
	0x44, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x49, 0x44, 0x12, 0x45, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x0b, 0xe0, 0x41, 0x03, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x45, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0xe0, 0x41, 0x03, 0xba, 0xb9,
	0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x3a, 0x1a, 0xba, 0xb9, 0x19, 0x16, 0x08, 0x01, 0x1a, 0x12, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x22, 0xf5, 0x02,
	0x0a, 0x10, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a,
	0xba, 0xb9, 0x19, 0x06, 0x0a, 0x04, 0x28, 0x01, 0x40, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34,
	0x0a, 0x10, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02,
	0x40, 0x01, 0x52, 0x10, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0xe0, 0x41, 0x03, 0xba, 0xb9,
	0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x45, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x0b, 0xe0, 0x41, 0x03, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x1b, 0xba, 0xb9, 0x19, 0x17, 0x08, 0x01,
	0x1a, 0x13, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x2a, 0x3d, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x10, 0x01, 0x2a, 0x17, 0x0a, 0x03, 0x46, 0x65, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x4f,
	0x55, 0x52, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x45, 0x4e, 0x10, 0x01, 0x2a, 0x5f, 0x0a,
	0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12,
	0x0d, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x2a, 0x54,
	0x0a, 0x12, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x75,
	0x72, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x57,
	0x65, 0x65, 0x6b, 0x6c, 0x79, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x6c, 0x79, 0x10, 0x03, 0x2a, 0x34, 0x0a, 0x13, 0x4d, 0x61, 0x73, 0x73, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x50,
	0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x42, 0x75, 0x6c, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x10, 0x01, 0x2a, 0x44, 0x0a, 0x0a, 0x4d, 0x61,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x75, 0x6c, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x10, 0x03,
	0x2a, 0x34, 0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x75, 0x6c, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x53, 0x56, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x58, 0x4c, 0x53, 0x10, 0x02, 0x2a, 0x33, 0x0a, 0x08, 0x4d, 0x61, 0x73, 0x73, 0x53, 0x74,
	0x65, 0x70, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x65, 0x70, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x10, 0x02, 0x42, 0x06, 0x5a, 0x04, 0x2e,
	0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_payroll_gorm_db_proto_rawDescOnce sync.Once
	file_payroll_gorm_db_proto_rawDescData = file_payroll_gorm_db_proto_rawDesc
)

func file_payroll_gorm_db_proto_rawDescGZIP() []byte {
	file_payroll_gorm_db_proto_rawDescOnce.Do(func() {
		file_payroll_gorm_db_proto_rawDescData = protoimpl.X.CompressGZIP(file_payroll_gorm_db_proto_rawDescData)
	})
	return file_payroll_gorm_db_proto_rawDescData
}

var file_payroll_gorm_db_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_payroll_gorm_db_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_payroll_gorm_db_proto_goTypes = []interface{}{
	(TransactionType)(0),               // 0: payroll.service.v1.TransactionType
	(Fee)(0),                           // 1: payroll.service.v1.Fee
	(TransactionSchedule)(0),           // 2: payroll.service.v1.TransactionSchedule
	(RecurringFrequency)(0),            // 3: payroll.service.v1.RecurringFrequency
	(MassTransactionType)(0),           // 4: payroll.service.v1.MassTransactionType
	(MassStatus)(0),                    // 5: payroll.service.v1.MassStatus
	(FileExtension)(0),                 // 6: payroll.service.v1.FileExtension
	(MassStep)(0),                      // 7: payroll.service.v1.MassStep
	(*PayrollTransferTransaction)(nil), // 8: payroll.service.v1.PayrollTransferTransaction
	(*PayrollTransferItem)(nil),        // 9: payroll.service.v1.PayrollTransferItem
	(*MassInquiryJob)(nil),             // 10: payroll.service.v1.MassInquiryJob
	(*MassTransferJob)(nil),            // 11: payroll.service.v1.MassTransferJob
	(*CreateMassTransferJob)(nil),      // 12: payroll.service.v1.CreateMassTransferJob
	(*FileCheckingJob)(nil),            // 13: payroll.service.v1.FileCheckingJob
	(*UploadedFileName)(nil),           // 14: payroll.service.v1.UploadedFileName
	(*timestamppb.Timestamp)(nil),      // 15: google.protobuf.Timestamp
}
var file_payroll_gorm_db_proto_depIdxs = []int32{
	15, // 0: payroll.service.v1.PayrollTransferTransaction.createdAt:type_name -> google.protobuf.Timestamp
	15, // 1: payroll.service.v1.PayrollTransferTransaction.updatedAt:type_name -> google.protobuf.Timestamp
	4,  // 2: payroll.service.v1.PayrollTransferItem.type:type_name -> payroll.service.v1.MassTransactionType
	15, // 3: payroll.service.v1.PayrollTransferItem.createdAt:type_name -> google.protobuf.Timestamp
	15, // 4: payroll.service.v1.PayrollTransferItem.updatedAt:type_name -> google.protobuf.Timestamp
	15, // 5: payroll.service.v1.MassInquiryJob.runAt:type_name -> google.protobuf.Timestamp
	15, // 6: payroll.service.v1.MassInquiryJob.createdAt:type_name -> google.protobuf.Timestamp
	15, // 7: payroll.service.v1.MassInquiryJob.updatedAt:type_name -> google.protobuf.Timestamp
	15, // 8: payroll.service.v1.MassTransferJob.runAt:type_name -> google.protobuf.Timestamp
	15, // 9: payroll.service.v1.MassTransferJob.createdAt:type_name -> google.protobuf.Timestamp
	15, // 10: payroll.service.v1.MassTransferJob.updatedAt:type_name -> google.protobuf.Timestamp
	15, // 11: payroll.service.v1.CreateMassTransferJob.runAt:type_name -> google.protobuf.Timestamp
	15, // 12: payroll.service.v1.CreateMassTransferJob.createdAt:type_name -> google.protobuf.Timestamp
	15, // 13: payroll.service.v1.CreateMassTransferJob.updatedAt:type_name -> google.protobuf.Timestamp
	15, // 14: payroll.service.v1.FileCheckingJob.runAt:type_name -> google.protobuf.Timestamp
	15, // 15: payroll.service.v1.FileCheckingJob.createdAt:type_name -> google.protobuf.Timestamp
	15, // 16: payroll.service.v1.FileCheckingJob.updatedAt:type_name -> google.protobuf.Timestamp
	15, // 17: payroll.service.v1.UploadedFileName.createdAt:type_name -> google.protobuf.Timestamp
	15, // 18: payroll.service.v1.UploadedFileName.updatedAt:type_name -> google.protobuf.Timestamp
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_payroll_gorm_db_proto_init() }
func file_payroll_gorm_db_proto_init() {
	if File_payroll_gorm_db_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_payroll_gorm_db_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayrollTransferTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payroll_gorm_db_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayrollTransferItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payroll_gorm_db_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MassInquiryJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payroll_gorm_db_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MassTransferJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payroll_gorm_db_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMassTransferJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payroll_gorm_db_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileCheckingJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payroll_gorm_db_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadedFileName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_payroll_gorm_db_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_payroll_gorm_db_proto_goTypes,
		DependencyIndexes: file_payroll_gorm_db_proto_depIdxs,
		EnumInfos:         file_payroll_gorm_db_proto_enumTypes,
		MessageInfos:      file_payroll_gorm_db_proto_msgTypes,
	}.Build()
	File_payroll_gorm_db_proto = out.File
	file_payroll_gorm_db_proto_rawDesc = nil
	file_payroll_gorm_db_proto_goTypes = nil
	file_payroll_gorm_db_proto_depIdxs = nil
}
