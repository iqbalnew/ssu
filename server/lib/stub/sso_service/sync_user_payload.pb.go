// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.2
// source: sync_user_payload.proto

package pb

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListTaskReqStatuses int32

const (
	ListTaskReq_NullStatus ListTaskReqStatuses = 0
	ListTaskReq_Pending    ListTaskReqStatuses = 1
	ListTaskReq_Draft      ListTaskReqStatuses = 2
	ListTaskReq_Returned   ListTaskReqStatuses = 3
	ListTaskReq_Approved   ListTaskReqStatuses = 4
	ListTaskReq_Rejected   ListTaskReqStatuses = 5
)

// Enum value maps for ListTaskReqStatuses.
var (
	ListTaskReqStatuses_name = map[int32]string{
		0: "NullStatus",
		1: "Pending",
		2: "Draft",
		3: "Returned",
		4: "Approved",
		5: "Rejected",
	}
	ListTaskReqStatuses_value = map[string]int32{
		"NullStatus": 0,
		"Pending":    1,
		"Draft":      2,
		"Returned":   3,
		"Approved":   4,
		"Rejected":   5,
	}
)

func (x ListTaskReqStatuses) Enum() *ListTaskReqStatuses {
	p := new(ListTaskReqStatuses)
	*p = x
	return p
}

func (x ListTaskReqStatuses) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListTaskReqStatuses) Descriptor() protoreflect.EnumDescriptor {
	return file_sync_user_payload_proto_enumTypes[0].Descriptor()
}

func (ListTaskReqStatuses) Type() protoreflect.EnumType {
	return &file_sync_user_payload_proto_enumTypes[0]
}

func (x ListTaskReqStatuses) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListTaskReqStatuses.Descriptor instead.
func (ListTaskReqStatuses) EnumDescriptor() ([]byte, []int) {
	return file_sync_user_payload_proto_rawDescGZIP(), []int{5, 0}
}

type ListTaskReqSteps int32

const (
	ListTaskReq_AllStep  ListTaskReqSteps = 0
	ListTaskReq_Maker    ListTaskReqSteps = 1
	ListTaskReq_Checker  ListTaskReqSteps = 2
	ListTaskReq_Signer   ListTaskReqSteps = 3
	ListTaskReq_Releaser ListTaskReqSteps = 4
)

// Enum value maps for ListTaskReqSteps.
var (
	ListTaskReqSteps_name = map[int32]string{
		0: "AllStep",
		1: "Maker",
		2: "Checker",
		3: "Signer",
		4: "Releaser",
	}
	ListTaskReqSteps_value = map[string]int32{
		"AllStep":  0,
		"Maker":    1,
		"Checker":  2,
		"Signer":   3,
		"Releaser": 4,
	}
)

func (x ListTaskReqSteps) Enum() *ListTaskReqSteps {
	p := new(ListTaskReqSteps)
	*p = x
	return p
}

func (x ListTaskReqSteps) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListTaskReqSteps) Descriptor() protoreflect.EnumDescriptor {
	return file_sync_user_payload_proto_enumTypes[1].Descriptor()
}

func (ListTaskReqSteps) Type() protoreflect.EnumType {
	return &file_sync_user_payload_proto_enumTypes[1]
}

func (x ListTaskReqSteps) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListTaskReqSteps.Descriptor instead.
func (ListTaskReqSteps) EnumDescriptor() ([]byte, []int) {
	return file_sync_user_payload_proto_rawDescGZIP(), []int{5, 1}
}

type ListTaskReqDirection int32

const (
	ListTaskReq_DESC ListTaskReqDirection = 0
	ListTaskReq_ASC  ListTaskReqDirection = 1
)

// Enum value maps for ListTaskReqDirection.
var (
	ListTaskReqDirection_name = map[int32]string{
		0: "DESC",
		1: "ASC",
	}
	ListTaskReqDirection_value = map[string]int32{
		"DESC": 0,
		"ASC":  1,
	}
)

func (x ListTaskReqDirection) Enum() *ListTaskReqDirection {
	p := new(ListTaskReqDirection)
	*p = x
	return p
}

func (x ListTaskReqDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListTaskReqDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_sync_user_payload_proto_enumTypes[2].Descriptor()
}

func (ListTaskReqDirection) Type() protoreflect.EnumType {
	return &file_sync_user_payload_proto_enumTypes[2]
}

func (x ListTaskReqDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListTaskReqDirection.Descriptor instead.
func (ListTaskReqDirection) EnumDescriptor() ([]byte, []int) {
	return file_sync_user_payload_proto_rawDescGZIP(), []int{5, 2}
}

type ListSyncDataReqDirection int32

const (
	ListSyncDataReq_DESC ListSyncDataReqDirection = 0
	ListSyncDataReq_ASC  ListSyncDataReqDirection = 1
)

// Enum value maps for ListSyncDataReqDirection.
var (
	ListSyncDataReqDirection_name = map[int32]string{
		0: "DESC",
		1: "ASC",
	}
	ListSyncDataReqDirection_value = map[string]int32{
		"DESC": 0,
		"ASC":  1,
	}
)

func (x ListSyncDataReqDirection) Enum() *ListSyncDataReqDirection {
	p := new(ListSyncDataReqDirection)
	*p = x
	return p
}

func (x ListSyncDataReqDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListSyncDataReqDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_sync_user_payload_proto_enumTypes[3].Descriptor()
}

func (ListSyncDataReqDirection) Type() protoreflect.EnumType {
	return &file_sync_user_payload_proto_enumTypes[3]
}

func (x ListSyncDataReqDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListSyncDataReqDirection.Descriptor instead.
func (ListSyncDataReqDirection) EnumDescriptor() ([]byte, []int) {
	return file_sync_user_payload_proto_rawDescGZIP(), []int{11, 0}
}

type GetSyncUserReq_Sort int32

const (
	GetSyncUserReq_username        GetSyncUserReq_Sort = 0
	GetSyncUserReq_userType        GetSyncUserReq_Sort = 1
	GetSyncUserReq_syncStatus      GetSyncUserReq_Sort = 2
	GetSyncUserReq_syncDate        GetSyncUserReq_Sort = 3
	GetSyncUserReq_status          GetSyncUserReq_Sort = 4
	GetSyncUserReq_syncRequestDate GetSyncUserReq_Sort = 5
)

// Enum value maps for GetSyncUserReq_Sort.
var (
	GetSyncUserReq_Sort_name = map[int32]string{
		0: "username",
		1: "userType",
		2: "syncStatus",
		3: "syncDate",
		4: "status",
		5: "syncRequestDate",
	}
	GetSyncUserReq_Sort_value = map[string]int32{
		"username":        0,
		"userType":        1,
		"syncStatus":      2,
		"syncDate":        3,
		"status":          4,
		"syncRequestDate": 5,
	}
)

func (x GetSyncUserReq_Sort) Enum() *GetSyncUserReq_Sort {
	p := new(GetSyncUserReq_Sort)
	*p = x
	return p
}

func (x GetSyncUserReq_Sort) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetSyncUserReq_Sort) Descriptor() protoreflect.EnumDescriptor {
	return file_sync_user_payload_proto_enumTypes[4].Descriptor()
}

func (GetSyncUserReq_Sort) Type() protoreflect.EnumType {
	return &file_sync_user_payload_proto_enumTypes[4]
}

func (x GetSyncUserReq_Sort) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetSyncUserReq_Sort.Descriptor instead.
func (GetSyncUserReq_Sort) EnumDescriptor() ([]byte, []int) {
	return file_sync_user_payload_proto_rawDescGZIP(), []int{14, 0}
}

type GetSyncUserReqDirection int32

const (
	GetSyncUserReq_DESC GetSyncUserReqDirection = 0
	GetSyncUserReq_ASC  GetSyncUserReqDirection = 1
)

// Enum value maps for GetSyncUserReqDirection.
var (
	GetSyncUserReqDirection_name = map[int32]string{
		0: "DESC",
		1: "ASC",
	}
	GetSyncUserReqDirection_value = map[string]int32{
		"DESC": 0,
		"ASC":  1,
	}
)

func (x GetSyncUserReqDirection) Enum() *GetSyncUserReqDirection {
	p := new(GetSyncUserReqDirection)
	*p = x
	return p
}

func (x GetSyncUserReqDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetSyncUserReqDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_sync_user_payload_proto_enumTypes[5].Descriptor()
}

func (GetSyncUserReqDirection) Type() protoreflect.EnumType {
	return &file_sync_user_payload_proto_enumTypes[5]
}

func (x GetSyncUserReqDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetSyncUserReqDirection.Descriptor instead.
func (GetSyncUserReqDirection) EnumDescriptor() ([]byte, []int) {
	return file_sync_user_payload_proto_rawDescGZIP(), []int{14, 1}
}

type User_IDType int32

const (
	User_NULL     User_IDType = 0
	User_KTP      User_IDType = 1
	User_SIM      User_IDType = 2
	User_PASSPORT User_IDType = 3
	User_KITAS    User_IDType = 4
	User_KITAPI   User_IDType = 5
)

// Enum value maps for User_IDType.
var (
	User_IDType_name = map[int32]string{
		0: "NULL",
		1: "KTP",
		2: "SIM",
		3: "PASSPORT",
		4: "KITAS",
		5: "KITAPI",
	}
	User_IDType_value = map[string]int32{
		"NULL":     0,
		"KTP":      1,
		"SIM":      2,
		"PASSPORT": 3,
		"KITAS":    4,
		"KITAPI":   5,
	}
)

func (x User_IDType) Enum() *User_IDType {
	p := new(User_IDType)
	*p = x
	return p
}

func (x User_IDType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (User_IDType) Descriptor() protoreflect.EnumDescriptor {
	return file_sync_user_payload_proto_enumTypes[6].Descriptor()
}

func (User_IDType) Type() protoreflect.EnumType {
	return &file_sync_user_payload_proto_enumTypes[6]
}

func (x User_IDType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use User_IDType.Descriptor instead.
func (User_IDType) EnumDescriptor() ([]byte, []int) {
	return file_sync_user_payload_proto_rawDescGZIP(), []int{20, 0}
}

type FileGetSyncUserReq_Formats int32

const (
	FileGetSyncUserReq_null FileGetSyncUserReq_Formats = 0
	FileGetSyncUserReq_pdf  FileGetSyncUserReq_Formats = 1
	FileGetSyncUserReq_xls  FileGetSyncUserReq_Formats = 2
	FileGetSyncUserReq_csv  FileGetSyncUserReq_Formats = 3
)

// Enum value maps for FileGetSyncUserReq_Formats.
var (
	FileGetSyncUserReq_Formats_name = map[int32]string{
		0: "null",
		1: "pdf",
		2: "xls",
		3: "csv",
	}
	FileGetSyncUserReq_Formats_value = map[string]int32{
		"null": 0,
		"pdf":  1,
		"xls":  2,
		"csv":  3,
	}
)

func (x FileGetSyncUserReq_Formats) Enum() *FileGetSyncUserReq_Formats {
	p := new(FileGetSyncUserReq_Formats)
	*p = x
	return p
}

func (x FileGetSyncUserReq_Formats) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileGetSyncUserReq_Formats) Descriptor() protoreflect.EnumDescriptor {
	return file_sync_user_payload_proto_enumTypes[7].Descriptor()
}

func (FileGetSyncUserReq_Formats) Type() protoreflect.EnumType {
	return &file_sync_user_payload_proto_enumTypes[7]
}

func (x FileGetSyncUserReq_Formats) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileGetSyncUserReq_Formats.Descriptor instead.
func (FileGetSyncUserReq_Formats) EnumDescriptor() ([]byte, []int) {
	return file_sync_user_payload_proto_rawDescGZIP(), []int{21, 0}
}

type FileGetSyncUserReqDirection int32

const (
	FileGetSyncUserReq_DESC FileGetSyncUserReqDirection = 0
	FileGetSyncUserReq_ASC  FileGetSyncUserReqDirection = 1
)

// Enum value maps for FileGetSyncUserReqDirection.
var (
	FileGetSyncUserReqDirection_name = map[int32]string{
		0: "DESC",
		1: "ASC",
	}
	FileGetSyncUserReqDirection_value = map[string]int32{
		"DESC": 0,
		"ASC":  1,
	}
)

func (x FileGetSyncUserReqDirection) Enum() *FileGetSyncUserReqDirection {
	p := new(FileGetSyncUserReqDirection)
	*p = x
	return p
}

func (x FileGetSyncUserReqDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileGetSyncUserReqDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_sync_user_payload_proto_enumTypes[8].Descriptor()
}

func (FileGetSyncUserReqDirection) Type() protoreflect.EnumType {
	return &file_sync_user_payload_proto_enumTypes[8]
}

func (x FileGetSyncUserReqDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileGetSyncUserReqDirection.Descriptor instead.
func (FileGetSyncUserReqDirection) EnumDescriptor() ([]byte, []int) {
	return file_sync_user_payload_proto_rawDescGZIP(), []int{21, 1}
}

// CreateSyncUserTask
type CreateSyncUserTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *WriteSyncUserTask `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	TaskID  uint64             `protobuf:"varint,2,opt,name=taskID,proto3" json:"taskID,omitempty"`
	IsDraft bool               `protobuf:"varint,3,opt,name=isDraft,proto3" json:"isDraft,omitempty"`
}

func (x *CreateSyncUserTaskReq) Reset() {
	*x = CreateSyncUserTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_user_payload_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSyncUserTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSyncUserTaskReq) ProtoMessage() {}

func (x *CreateSyncUserTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_sync_user_payload_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSyncUserTaskReq.ProtoReflect.Descriptor instead.
func (*CreateSyncUserTaskReq) Descriptor() ([]byte, []int) {
	return file_sync_user_payload_proto_rawDescGZIP(), []int{0}
}

func (x *CreateSyncUserTaskReq) GetData() *WriteSyncUserTask {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CreateSyncUserTaskReq) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *CreateSyncUserTaskReq) GetIsDraft() bool {
	if x != nil {
		return x.IsDraft
	}
	return false
}

type WriteSyncUserTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddonsUserId   uint64       `protobuf:"varint,1,opt,name=addonsUserId,proto3" json:"addonsUserId,omitempty"`
	AddonsUserName string       `protobuf:"bytes,2,opt,name=addonsUserName,proto3" json:"addonsUserName,omitempty"`
	User           *SSOSyncUser `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Additionals    *Additionals `protobuf:"bytes,4,opt,name=additionals,proto3" json:"additionals,omitempty"`
	TaskID         uint64       `protobuf:"varint,5,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Client         string       `protobuf:"bytes,6,opt,name=client,proto3" json:"client,omitempty"`
	DataCBM        *CBMUser     `protobuf:"bytes,7,opt,name=dataCBM,proto3" json:"dataCBM,omitempty"`
}

func (x *WriteSyncUserTask) Reset() {
	*x = WriteSyncUserTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_user_payload_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteSyncUserTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteSyncUserTask) ProtoMessage() {}

func (x *WriteSyncUserTask) ProtoReflect() protoreflect.Message {
	mi := &file_sync_user_payload_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteSyncUserTask.ProtoReflect.Descriptor instead.
func (*WriteSyncUserTask) Descriptor() ([]byte, []int) {
	return file_sync_user_payload_proto_rawDescGZIP(), []int{1}
}

func (x *WriteSyncUserTask) GetAddonsUserId() uint64 {
	if x != nil {
		return x.AddonsUserId
	}
	return 0
}

func (x *WriteSyncUserTask) GetAddonsUserName() string {
	if x != nil {
		return x.AddonsUserName
	}
	return ""
}

func (x *WriteSyncUserTask) GetUser() *SSOSyncUser {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *WriteSyncUserTask) GetAdditionals() *Additionals {
	if x != nil {
		return x.Additionals
	}
	return nil
}

func (x *WriteSyncUserTask) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *WriteSyncUserTask) GetClient() string {
	if x != nil {
		return x.Client
	}
	return ""
}

func (x *WriteSyncUserTask) GetDataCBM() *CBMUser {
	if x != nil {
		return x.DataCBM
	}
	return nil
}

type Additionals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data1 string `protobuf:"bytes,1,opt,name=data1,proto3" json:"data1,omitempty"`
	Data2 string `protobuf:"bytes,2,opt,name=data2,proto3" json:"data2,omitempty"`
	Data3 string `protobuf:"bytes,3,opt,name=data3,proto3" json:"data3,omitempty"`
	Data4 string `protobuf:"bytes,4,opt,name=data4,proto3" json:"data4,omitempty"`
	Data5 string `protobuf:"bytes,5,opt,name=data5,proto3" json:"data5,omitempty"`
}

func (x *Additionals) Reset() {
	*x = Additionals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_user_payload_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Additionals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Additionals) ProtoMessage() {}

func (x *Additionals) ProtoReflect() protoreflect.Message {
	mi := &file_sync_user_payload_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Additionals.ProtoReflect.Descriptor instead.
func (*Additionals) Descriptor() ([]byte, []int) {
	return file_sync_user_payload_proto_rawDescGZIP(), []int{2}
}

func (x *Additionals) GetData1() string {
	if x != nil {
		return x.Data1
	}
	return ""
}

func (x *Additionals) GetData2() string {
	if x != nil {
		return x.Data2
	}
	return ""
}

func (x *Additionals) GetData3() string {
	if x != nil {
		return x.Data3
	}
	return ""
}

func (x *Additionals) GetData4() string {
	if x != nil {
		return x.Data4
	}
	return ""
}

func (x *Additionals) GetData5() string {
	if x != nil {
		return x.Data5
	}
	return ""
}

type CreateSyncUserTaskRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Task  `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateSyncUserTaskRes) Reset() {
	*x = CreateSyncUserTaskRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_user_payload_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSyncUserTaskRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSyncUserTaskRes) ProtoMessage() {}

func (x *CreateSyncUserTaskRes) ProtoReflect() protoreflect.Message {
	mi := &file_sync_user_payload_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSyncUserTaskRes.ProtoReflect.Descriptor instead.
func (*CreateSyncUserTaskRes) Descriptor() ([]byte, []int) {
	return file_sync_user_payload_proto_rawDescGZIP(), []int{3}
}

func (x *CreateSyncUserTaskRes) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *CreateSyncUserTaskRes) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateSyncUserTaskRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateSyncUserTaskRes) GetData() *Task {
	if x != nil {
		return x.Data
	}
	return nil
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID             uint64                 `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Status             string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Step               string                 `protobuf:"bytes,3,opt,name=step,proto3" json:"step,omitempty"`
	FeatureID          uint64                 `protobuf:"varint,4,opt,name=featureID,proto3" json:"featureID,omitempty"`
	LastApprovedByName string                 `protobuf:"bytes,5,opt,name=lastApprovedByName,proto3" json:"lastApprovedByName,omitempty"`
	LastRejectedByName string                 `protobuf:"bytes,6,opt,name=lastRejectedByName,proto3" json:"lastRejectedByName,omitempty"`
	CreatedByName      string                 `protobuf:"bytes,7,opt,name=createdByName,proto3" json:"createdByName,omitempty"`
	UpdatedByName      string                 `protobuf:"bytes,8,opt,name=updatedByName,proto3" json:"updatedByName,omitempty"`
	Reasons            string                 `protobuf:"bytes,9,opt,name=reasons,proto3" json:"reasons,omitempty"`
	Comment            string                 `protobuf:"bytes,10,opt,name=comment,proto3" json:"comment,omitempty"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,50,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt          *timestamppb.Timestamp `protobuf:"bytes,51,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_user_payload_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_sync_user_payload_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_sync_user_payload_proto_rawDescGZIP(), []int{4}
}

func (x *Task) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *Task) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Task) GetStep() string {
	if x != nil {
		return x.Step
	}
	return ""
}

func (x *Task) GetFeatureID() uint64 {
	if x != nil {
		return x.FeatureID
	}
	return 0
}

func (x *Task) GetLastApprovedByName() string {
	if x != nil {
		return x.LastApprovedByName
	}
	return ""
}

func (x *Task) GetLastRejectedByName() string {
	if x != nil {
		return x.LastRejectedByName
	}
	return ""
}

func (x *Task) GetCreatedByName() string {
	if x != nil {
		return x.CreatedByName
	}
	return ""
}

func (x *Task) GetUpdatedByName() string {
	if x != nil {
		return x.UpdatedByName
	}
	return ""
}

func (x *Task) GetReasons() string {
	if x != nil {
		return x.Reasons
	}
	return ""
}

func (x *Task) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Task) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Task) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// ListSyncUserTask
type ListTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ListTaskReqStatuses  `protobuf:"varint,1,opt,name=status,proto3,enum=sso.service.v1.ListTaskReqStatuses" json:"status,omitempty"`
	Step   ListTaskReqSteps     `protobuf:"varint,2,opt,name=step,proto3,enum=sso.service.v1.ListTaskReqSteps" json:"step,omitempty"`
	Limit  int32                `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Page   int32                `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Sort   string               `protobuf:"bytes,5,opt,name=sort,proto3" json:"sort,omitempty"`
	Dir    ListTaskReqDirection `protobuf:"varint,6,opt,name=dir,proto3,enum=sso.service.v1.ListTaskReqDirection" json:"dir,omitempty"`
	Filter string               `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty"`
	Query  string               `protobuf:"bytes,8,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *ListTaskReq) Reset() {
	*x = ListTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_user_payload_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTaskReq) ProtoMessage() {}

func (x *ListTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_sync_user_payload_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTaskReq.ProtoReflect.Descriptor instead.
func (*ListTaskReq) Descriptor() ([]byte, []int) {
	return file_sync_user_payload_proto_rawDescGZIP(), []int{5}
}

func (x *ListTaskReq) GetStatus() ListTaskReqStatuses {
	if x != nil {
		return x.Status
	}
	return ListTaskReq_NullStatus
}

func (x *ListTaskReq) GetStep() ListTaskReqSteps {
	if x != nil {
		return x.Step
	}
	return ListTaskReq_AllStep
}

func (x *ListTaskReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListTaskReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListTaskReq) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *ListTaskReq) GetDir() ListTaskReqDirection {
	if x != nil {
		return x.Dir
	}
	return ListTaskReq_DESC
}

func (x *ListTaskReq) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListTaskReq) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type ReadSyncUserTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User        *SSOSyncUser `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Additionals *Additionals `protobuf:"bytes,2,opt,name=additionals,proto3" json:"additionals,omitempty"`
	Task        *Task        `protobuf:"bytes,3,opt,name=Task,proto3" json:"Task,omitempty"`
	Client      string       `protobuf:"bytes,4,opt,name=client,proto3" json:"client,omitempty"`
	DataCBM     *CBMUser     `protobuf:"bytes,5,opt,name=dataCBM,proto3" json:"dataCBM,omitempty"`
}

func (x *ReadSyncUserTask) Reset() {
	*x = ReadSyncUserTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_user_payload_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadSyncUserTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadSyncUserTask) ProtoMessage() {}

func (x *ReadSyncUserTask) ProtoReflect() protoreflect.Message {
	mi := &file_sync_user_payload_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadSyncUserTask.ProtoReflect.Descriptor instead.
func (*ReadSyncUserTask) Descriptor() ([]byte, []int) {
	return file_sync_user_payload_proto_rawDescGZIP(), []int{6}
}

func (x *ReadSyncUserTask) GetUser() *SSOSyncUser {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ReadSyncUserTask) GetAdditionals() *Additionals {
	if x != nil {
		return x.Additionals
	}
	return nil
}

func (x *ReadSyncUserTask) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *ReadSyncUserTask) GetClient() string {
	if x != nil {
		return x.Client
	}
	return ""
}

func (x *ReadSyncUserTask) GetDataCBM() *CBMUser {
	if x != nil {
		return x.DataCBM
	}
	return nil
}

type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit      int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	TotalRows  int64 `protobuf:"varint,3,opt,name=totalRows,proto3" json:"totalRows,omitempty"`
	TotalPages int32 `protobuf:"varint,4,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_user_payload_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_sync_user_payload_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_sync_user_payload_proto_rawDescGZIP(), []int{7}
}

func (x *Pagination) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Pagination) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Pagination) GetTotalRows() int64 {
	if x != nil {
		return x.TotalRows
	}
	return 0
}

func (x *Pagination) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

type ListSyncUserTaskRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      bool                `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code       uint32              `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message    string              `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data       []*ReadSyncUserTask `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	Pagination *Pagination         `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListSyncUserTaskRes) Reset() {
	*x = ListSyncUserTaskRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_user_payload_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSyncUserTaskRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSyncUserTaskRes) ProtoMessage() {}

func (x *ListSyncUserTaskRes) ProtoReflect() protoreflect.Message {
	mi := &file_sync_user_payload_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSyncUserTaskRes.ProtoReflect.Descriptor instead.
func (*ListSyncUserTaskRes) Descriptor() ([]byte, []int) {
	return file_sync_user_payload_proto_rawDescGZIP(), []int{8}
}

func (x *ListSyncUserTaskRes) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *ListSyncUserTaskRes) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListSyncUserTaskRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListSyncUserTaskRes) GetData() []*ReadSyncUserTask {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListSyncUserTaskRes) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// GetSyncUserTask && DeleteSyncUserTask
type GetTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID uint64 `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
}

func (x *GetTaskReq) Reset() {
	*x = GetTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_user_payload_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskReq) ProtoMessage() {}

func (x *GetTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_sync_user_payload_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskReq.ProtoReflect.Descriptor instead.
func (*GetTaskReq) Descriptor() ([]byte, []int) {
	return file_sync_user_payload_proto_rawDescGZIP(), []int{9}
}

func (x *GetTaskReq) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

type GetSyncUserTaskRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool              `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32            `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *ReadSyncUserTask `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetSyncUserTaskRes) Reset() {
	*x = GetSyncUserTaskRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_user_payload_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSyncUserTaskRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSyncUserTaskRes) ProtoMessage() {}

func (x *GetSyncUserTaskRes) ProtoReflect() protoreflect.Message {
	mi := &file_sync_user_payload_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSyncUserTaskRes.ProtoReflect.Descriptor instead.
func (*GetSyncUserTaskRes) Descriptor() ([]byte, []int) {
	return file_sync_user_payload_proto_rawDescGZIP(), []int{10}
}

func (x *GetSyncUserTaskRes) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *GetSyncUserTaskRes) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetSyncUserTaskRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetSyncUserTaskRes) GetData() *ReadSyncUserTask {
	if x != nil {
		return x.Data
	}
	return nil
}

// ListSyncUser
type ListSyncDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SyncID uint64                   `protobuf:"varint,1,opt,name=syncID,proto3" json:"syncID,omitempty"`
	Limit  int32                    `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Page   int32                    `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Sort   string                   `protobuf:"bytes,5,opt,name=sort,proto3" json:"sort,omitempty"`
	Dir    ListSyncDataReqDirection `protobuf:"varint,6,opt,name=dir,proto3,enum=sso.service.v1.ListSyncDataReqDirection" json:"dir,omitempty"`
	Filter string                   `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty"`
	Query  string                   `protobuf:"bytes,8,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *ListSyncDataReq) Reset() {
	*x = ListSyncDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_user_payload_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSyncDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSyncDataReq) ProtoMessage() {}

func (x *ListSyncDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_sync_user_payload_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSyncDataReq.ProtoReflect.Descriptor instead.
func (*ListSyncDataReq) Descriptor() ([]byte, []int) {
	return file_sync_user_payload_proto_rawDescGZIP(), []int{11}
}

func (x *ListSyncDataReq) GetSyncID() uint64 {
	if x != nil {
		return x.SyncID
	}
	return 0
}

func (x *ListSyncDataReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListSyncDataReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListSyncDataReq) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *ListSyncDataReq) GetDir() ListSyncDataReqDirection {
	if x != nil {
		return x.Dir
	}
	return ListSyncDataReq_DESC
}

func (x *ListSyncDataReq) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListSyncDataReq) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type ListSyncUserRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      bool           `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code       uint32         `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message    string         `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data       []*SSOSyncUser `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	Pagination *Pagination    `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListSyncUserRes) Reset() {
	*x = ListSyncUserRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_user_payload_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSyncUserRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSyncUserRes) ProtoMessage() {}

func (x *ListSyncUserRes) ProtoReflect() protoreflect.Message {
	mi := &file_sync_user_payload_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSyncUserRes.ProtoReflect.Descriptor instead.
func (*ListSyncUserRes) Descriptor() ([]byte, []int) {
	return file_sync_user_payload_proto_rawDescGZIP(), []int{12}
}

func (x *ListSyncUserRes) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *ListSyncUserRes) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListSyncUserRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListSyncUserRes) GetData() []*SSOSyncUser {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListSyncUserRes) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// SaveSyncUser && DeleteSyncUser
type SetSyncUserRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool         `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32       `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string       `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *SSOSyncUser `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SetSyncUserRes) Reset() {
	*x = SetSyncUserRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_user_payload_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSyncUserRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSyncUserRes) ProtoMessage() {}

func (x *SetSyncUserRes) ProtoReflect() protoreflect.Message {
	mi := &file_sync_user_payload_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSyncUserRes.ProtoReflect.Descriptor instead.
func (*SetSyncUserRes) Descriptor() ([]byte, []int) {
	return file_sync_user_payload_proto_rawDescGZIP(), []int{13}
}

func (x *SetSyncUserRes) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *SetSyncUserRes) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SetSyncUserRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SetSyncUserRes) GetData() *SSOSyncUser {
	if x != nil {
		return x.Data
	}
	return nil
}

// GetSyncUser
type GetSyncUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Client string                  `protobuf:"bytes,1,opt,name=client,proto3" json:"client,omitempty"`
	Limit  int32                   `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Page   int32                   `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Sort   GetSyncUserReq_Sort     `protobuf:"varint,5,opt,name=sort,proto3,enum=sso.service.v1.GetSyncUserReq_Sort" json:"sort,omitempty"`
	Dir    GetSyncUserReqDirection `protobuf:"varint,6,opt,name=dir,proto3,enum=sso.service.v1.GetSyncUserReqDirection" json:"dir,omitempty"`
	Search string                  `protobuf:"bytes,7,opt,name=search,proto3" json:"search,omitempty"`
	Filter *GetSyncUserFilter      `protobuf:"bytes,8,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *GetSyncUserReq) Reset() {
	*x = GetSyncUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_user_payload_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSyncUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSyncUserReq) ProtoMessage() {}

func (x *GetSyncUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_sync_user_payload_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSyncUserReq.ProtoReflect.Descriptor instead.
func (*GetSyncUserReq) Descriptor() ([]byte, []int) {
	return file_sync_user_payload_proto_rawDescGZIP(), []int{14}
}

func (x *GetSyncUserReq) GetClient() string {
	if x != nil {
		return x.Client
	}
	return ""
}

func (x *GetSyncUserReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetSyncUserReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetSyncUserReq) GetSort() GetSyncUserReq_Sort {
	if x != nil {
		return x.Sort
	}
	return GetSyncUserReq_username
}

func (x *GetSyncUserReq) GetDir() GetSyncUserReqDirection {
	if x != nil {
		return x.Dir
	}
	return GetSyncUserReq_DESC
}

func (x *GetSyncUserReq) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetSyncUserReq) GetFilter() *GetSyncUserFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetSyncUserFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username   string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	UserType   string                 `protobuf:"bytes,2,opt,name=userType,proto3" json:"userType,omitempty"`
	SyncStatus string                 `protobuf:"bytes,3,opt,name=syncStatus,proto3" json:"syncStatus,omitempty"`
	SyncDate   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=syncDate,proto3" json:"syncDate,omitempty"`
	Status     string                 `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GetSyncUserFilter) Reset() {
	*x = GetSyncUserFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_user_payload_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSyncUserFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSyncUserFilter) ProtoMessage() {}

func (x *GetSyncUserFilter) ProtoReflect() protoreflect.Message {
	mi := &file_sync_user_payload_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSyncUserFilter.ProtoReflect.Descriptor instead.
func (*GetSyncUserFilter) Descriptor() ([]byte, []int) {
	return file_sync_user_payload_proto_rawDescGZIP(), []int{15}
}

func (x *GetSyncUserFilter) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GetSyncUserFilter) GetUserType() string {
	if x != nil {
		return x.UserType
	}
	return ""
}

func (x *GetSyncUserFilter) GetSyncStatus() string {
	if x != nil {
		return x.SyncStatus
	}
	return ""
}

func (x *GetSyncUserFilter) GetSyncDate() *timestamppb.Timestamp {
	if x != nil {
		return x.SyncDate
	}
	return nil
}

func (x *GetSyncUserFilter) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type GetSyncUserRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      bool            `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code       uint32          `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message    string          `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data       []*SyncUserData `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	Pagination *Pagination     `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetSyncUserRes) Reset() {
	*x = GetSyncUserRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_user_payload_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSyncUserRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSyncUserRes) ProtoMessage() {}

func (x *GetSyncUserRes) ProtoReflect() protoreflect.Message {
	mi := &file_sync_user_payload_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSyncUserRes.ProtoReflect.Descriptor instead.
func (*GetSyncUserRes) Descriptor() ([]byte, []int) {
	return file_sync_user_payload_proto_rawDescGZIP(), []int{16}
}

func (x *GetSyncUserRes) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *GetSyncUserRes) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetSyncUserRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetSyncUserRes) GetData() []*SyncUserData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetSyncUserRes) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type SyncUserData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SyncID          string                 `protobuf:"bytes,1,opt,name=syncID,proto3" json:"syncID,omitempty"`
	Username        string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	UserType        string                 `protobuf:"bytes,3,opt,name=userType,proto3" json:"userType,omitempty"`
	SyncStatus      string                 `protobuf:"bytes,4,opt,name=syncStatus,proto3" json:"syncStatus,omitempty"`
	SyncDate        *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=syncDate,proto3" json:"syncDate,omitempty"`
	Status          string                 `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	TaskID          string                 `protobuf:"bytes,7,opt,name=taskID,proto3" json:"taskID,omitempty"`
	SyncRequestDate *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=syncRequestDate,proto3" json:"syncRequestDate,omitempty"`
}

func (x *SyncUserData) Reset() {
	*x = SyncUserData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_user_payload_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncUserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncUserData) ProtoMessage() {}

func (x *SyncUserData) ProtoReflect() protoreflect.Message {
	mi := &file_sync_user_payload_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncUserData.ProtoReflect.Descriptor instead.
func (*SyncUserData) Descriptor() ([]byte, []int) {
	return file_sync_user_payload_proto_rawDescGZIP(), []int{17}
}

func (x *SyncUserData) GetSyncID() string {
	if x != nil {
		return x.SyncID
	}
	return ""
}

func (x *SyncUserData) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SyncUserData) GetUserType() string {
	if x != nil {
		return x.UserType
	}
	return ""
}

func (x *SyncUserData) GetSyncStatus() string {
	if x != nil {
		return x.SyncStatus
	}
	return ""
}

func (x *SyncUserData) GetSyncDate() *timestamppb.Timestamp {
	if x != nil {
		return x.SyncDate
	}
	return nil
}

func (x *SyncUserData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SyncUserData) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *SyncUserData) GetSyncRequestDate() *timestamppb.Timestamp {
	if x != nil {
		return x.SyncRequestDate
	}
	return nil
}

// GetSyncCompanyDetail
type GetSyncDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Client string `protobuf:"bytes,1,opt,name=client,proto3" json:"client,omitempty"`
	SyncID uint64 `protobuf:"varint,2,opt,name=syncID,proto3" json:"syncID,omitempty"`
}

func (x *GetSyncDetailReq) Reset() {
	*x = GetSyncDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_user_payload_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSyncDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSyncDetailReq) ProtoMessage() {}

func (x *GetSyncDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_sync_user_payload_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSyncDetailReq.ProtoReflect.Descriptor instead.
func (*GetSyncDetailReq) Descriptor() ([]byte, []int) {
	return file_sync_user_payload_proto_rawDescGZIP(), []int{18}
}

func (x *GetSyncDetailReq) GetClient() string {
	if x != nil {
		return x.Client
	}
	return ""
}

func (x *GetSyncDetailReq) GetSyncID() uint64 {
	if x != nil {
		return x.SyncID
	}
	return 0
}

type GetSyncUserDetailRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data   *ReadSyncUserTask `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	User   *User             `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	TaskID string            `protobuf:"bytes,3,opt,name=taskID,proto3" json:"taskID,omitempty"`
}

func (x *GetSyncUserDetailRes) Reset() {
	*x = GetSyncUserDetailRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_user_payload_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSyncUserDetailRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSyncUserDetailRes) ProtoMessage() {}

func (x *GetSyncUserDetailRes) ProtoReflect() protoreflect.Message {
	mi := &file_sync_user_payload_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSyncUserDetailRes.ProtoReflect.Descriptor instead.
func (*GetSyncUserDetailRes) Descriptor() ([]byte, []int) {
	return file_sync_user_payload_proto_rawDescGZIP(), []int{19}
}

func (x *GetSyncUserDetailRes) GetData() *ReadSyncUserTask {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetSyncUserDetailRes) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *GetSyncUserDetailRes) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID       string      `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	Username     string      `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	IdType       User_IDType `protobuf:"varint,3,opt,name=idType,proto3,enum=sso.service.v1.User_IDType" json:"idType,omitempty"`
	IdNumber     string      `protobuf:"bytes,4,opt,name=idNumber,proto3" json:"idNumber,omitempty"`
	UserTypeID   uint64      `protobuf:"varint,5,opt,name=userTypeID,proto3" json:"userTypeID,omitempty"`
	UserTypeName string      `protobuf:"bytes,6,opt,name=userTypeName,proto3" json:"userTypeName,omitempty"`
	CompanyID    uint64      `protobuf:"varint,7,opt,name=companyID,proto3" json:"companyID,omitempty"`
	CompanyName  string      `protobuf:"bytes,8,opt,name=companyName,proto3" json:"companyName,omitempty"`
	IsBlocked    bool        `protobuf:"varint,9,opt,name=isBlocked,proto3" json:"isBlocked,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_user_payload_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_sync_user_payload_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_sync_user_payload_proto_rawDescGZIP(), []int{20}
}

func (x *User) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *User) GetIdType() User_IDType {
	if x != nil {
		return x.IdType
	}
	return User_NULL
}

func (x *User) GetIdNumber() string {
	if x != nil {
		return x.IdNumber
	}
	return ""
}

func (x *User) GetUserTypeID() uint64 {
	if x != nil {
		return x.UserTypeID
	}
	return 0
}

func (x *User) GetUserTypeName() string {
	if x != nil {
		return x.UserTypeName
	}
	return ""
}

func (x *User) GetCompanyID() uint64 {
	if x != nil {
		return x.CompanyID
	}
	return 0
}

func (x *User) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *User) GetIsBlocked() bool {
	if x != nil {
		return x.IsBlocked
	}
	return false
}

type FileGetSyncUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileFormat FileGetSyncUserReq_Formats  `protobuf:"varint,1,opt,name=fileFormat,proto3,enum=sso.service.v1.FileGetSyncUserReq_Formats" json:"fileFormat,omitempty"`
	Client     string                      `protobuf:"bytes,2,opt,name=client,proto3" json:"client,omitempty"`
	Limit      int32                       `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Page       int32                       `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Sort       GetSyncUserReq_Sort         `protobuf:"varint,5,opt,name=sort,proto3,enum=sso.service.v1.GetSyncUserReq_Sort" json:"sort,omitempty"`
	Dir        FileGetSyncUserReqDirection `protobuf:"varint,6,opt,name=dir,proto3,enum=sso.service.v1.FileGetSyncUserReqDirection" json:"dir,omitempty"`
	Search     string                      `protobuf:"bytes,7,opt,name=search,proto3" json:"search,omitempty"`
	Filter     *GetSyncUserFilter          `protobuf:"bytes,8,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *FileGetSyncUserReq) Reset() {
	*x = FileGetSyncUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sync_user_payload_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileGetSyncUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileGetSyncUserReq) ProtoMessage() {}

func (x *FileGetSyncUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_sync_user_payload_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileGetSyncUserReq.ProtoReflect.Descriptor instead.
func (*FileGetSyncUserReq) Descriptor() ([]byte, []int) {
	return file_sync_user_payload_proto_rawDescGZIP(), []int{21}
}

func (x *FileGetSyncUserReq) GetFileFormat() FileGetSyncUserReq_Formats {
	if x != nil {
		return x.FileFormat
	}
	return FileGetSyncUserReq_null
}

func (x *FileGetSyncUserReq) GetClient() string {
	if x != nil {
		return x.Client
	}
	return ""
}

func (x *FileGetSyncUserReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *FileGetSyncUserReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FileGetSyncUserReq) GetSort() GetSyncUserReq_Sort {
	if x != nil {
		return x.Sort
	}
	return GetSyncUserReq_username
}

func (x *FileGetSyncUserReq) GetDir() FileGetSyncUserReqDirection {
	if x != nil {
		return x.Dir
	}
	return FileGetSyncUserReq_DESC
}

func (x *FileGetSyncUserReq) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *FileGetSyncUserReq) GetFilter() *GetSyncUserFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

var File_sync_user_payload_proto protoreflect.FileDescriptor

var file_sync_user_payload_proto_rawDesc = []byte{
	0x0a, 0x17, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x73, 0x73, 0x6f, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x11, 0x73, 0x73, 0x6f, 0x5f, 0x67,
	0x6f, 0x72, 0x6d, 0x5f, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x73, 0x73,
	0x6f, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x85, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x73, 0x6f, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x53, 0x79, 0x6e, 0x63, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x1b, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x73, 0x44, 0x72, 0x61, 0x66, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x69, 0x73, 0x44, 0x72, 0x61, 0x66, 0x74, 0x22, 0xc1, 0x02, 0x0a, 0x11, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x27, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x6f,
	0x6e, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x6f,
	0x6e, 0x73, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x73, 0x73, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x53, 0x4f, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x73, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x73,
	0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x61,
	0x74, 0x61, 0x43, 0x42, 0x4d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x73,
	0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x42, 0x4d,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x43, 0x42, 0x4d, 0x22, 0x7b, 0x0a,
	0x0b, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x61, 0x74,
	0x61, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61,
	0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x33, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64,
	0x61, 0x74, 0x61, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x35, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x35, 0x22, 0x85, 0x01, 0x0a, 0x15, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x73, 0x6f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xbc, 0x03, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12,
	0x1c, 0x0a, 0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44, 0x12, 0x2e, 0x0a,
	0x12, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x42, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0xfa, 0x0b, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x73, 0x73, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x35, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x73, 0x73, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x2e, 0x73, 0x74, 0x65, 0x70, 0x73,
	0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x54, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32, 0x39, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x70, 0x65, 0x72, 0x20, 0x70, 0x61, 0x67, 0x65, 0x2e,
	0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x27,
	0x2d, 0x31, 0x27, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x55, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x32,
	0x3c, 0x70, 0x61, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20,
	0x67, 0x65, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x27, 0x2d, 0x31, 0x27, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32, 0x19, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x64, 0x61,
	0x74, 0x61, 0x20, 0x62, 0x79, 0x20, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x20, 0x6e, 0x61, 0x6d,
	0x65, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x4d, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x73, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x14, 0x92, 0x41, 0x11,
	0x32, 0x0f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x8e, 0x04, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0xf5, 0x03, 0x92, 0x41, 0xf1, 0x03, 0x32, 0xee,
	0x03, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x27, 0x41, 0x4e, 0x44, 0x27, 0x20, 0x71, 0x75,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x0a, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x20,
	0x5b, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2c, 0x6b, 0x65, 0x79, 0x3a, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5d, 0x20, 0x0a, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a,
	0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x3a,
	0x31, 0x2c, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x20, 0x3d, 0x3e, 0x20, 0x57, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x20, 0x3d, 0x20, 0x31, 0x20, 0x41, 0x4e, 0x44, 0x20, 0x74, 0x79, 0x70,
	0x65, 0x20, 0x3d, 0x20, 0x27, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x27, 0x20, 0x0a, 0x20, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x3a, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x25, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x4c, 0x49, 0x4b,
	0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27,
	0x6b, 0x65, 0x79, 0x3a, 0x25, 0x21, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20,
	0x27, 0x6b, 0x65, 0x79, 0x20, 0x49, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x3e, 0x3d, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3e, 0x3d,
	0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79,
	0x3a, 0x3c, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65,
	0x79, 0x20, 0x3c, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20,
	0x27, 0x6b, 0x65, 0x79, 0x31, 0x3a, 0x3e, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x2c, 0x6b,
	0x65, 0x79, 0x32, 0x3a, 0x3c, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x27, 0x20, 0x3d, 0x3e,
	0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x20, 0x3e, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31,
	0x20, 0x41, 0x4e, 0x44, 0x20, 0x6b, 0x65, 0x79, 0x32, 0x20, 0x3c, 0x3d, 0x20, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x32, 0x27, 0x20, 0x42, 0x45, 0x54, 0x57, 0x45, 0x45, 0x4e, 0x20, 0x45, 0x58, 0x41,
	0x4d, 0x50, 0x4c, 0x45, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2e, 0x6e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27,
	0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2d, 0x3e, 0x3e, 0x6e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0xee, 0x02, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0xd7, 0x02, 0x92, 0x41, 0xd3, 0x02, 0x32, 0xd0,
	0x02, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x27, 0x4f, 0x52, 0x27, 0x20, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x20, 0x0a, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x20, 0x5b,
	0x6b, 0x65, 0x79, 0x31, 0x2c, 0x6b, 0x65, 0x79, 0x32, 0x2c, 0x6b, 0x65, 0x79, 0x33, 0x3a, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5d, 0x20, 0x0a, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a,
	0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x3d, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x74, 0x79, 0x70, 0x65,
	0x3a, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x3d, 0x3e,
	0x20, 0x57, 0x68, 0x65, 0x72, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x41,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x20, 0x4f, 0x52, 0x20,
	0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x27, 0x20, 0x0a, 0x20, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3d, 0x20, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25,
	0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20,
	0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20,
	0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x21, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20,
	0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x49, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31,
	0x2e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x3a, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2d, 0x3e, 0x3e, 0x6e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x27, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x5c, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x72, 0x61, 0x66, 0x74, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x10, 0x05, 0x22, 0x46, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x12,
	0x0b, 0x0a, 0x07, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x65, 0x70, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x4d, 0x61, 0x6b, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x10, 0x03,
	0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x10, 0x04, 0x22, 0x1e,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x44,
	0x45, 0x53, 0x43, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x01, 0x22, 0xf7,
	0x01, 0x0a, 0x10, 0x52, 0x65, 0x61, 0x64, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x2f, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x73, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x53, 0x4f, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x73, 0x6f, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x73, 0x73, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x43, 0x42, 0x4d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x73, 0x6f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x42, 0x4d, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x07, 0x64, 0x61, 0x74, 0x61, 0x43, 0x42, 0x4d, 0x22, 0x74, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x22, 0xcb,
	0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x73, 0x6f, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x53, 0x79,
	0x6e, 0x63, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x73, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x24, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x22, 0x8e, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x73,
	0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xff, 0x09, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6e, 0x63, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x44, 0x12,
	0x54, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x3e,
	0x92, 0x41, 0x3b, 0x32, 0x39, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20,
	0x70, 0x65, 0x72, 0x20, 0x70, 0x61, 0x67, 0x65, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x27, 0x2d, 0x31, 0x27, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x55, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x32, 0x3c, 0x70, 0x61, 0x67, 0x65, 0x20, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x20, 0x27, 0x2d, 0x31, 0x27, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x20, 0x70, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32,
	0x19, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x62, 0x79, 0x20, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x12, 0x51, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x73, 0x73, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x2e, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03,
	0x64, 0x69, 0x72, 0x12, 0x8e, 0x04, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0xf5, 0x03, 0x92, 0x41, 0xf1, 0x03, 0x32, 0xee, 0x03, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x20, 0x27, 0x41, 0x4e, 0x44, 0x27, 0x20, 0x71, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x20, 0x0a, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x20, 0x5b, 0x6b, 0x65,
	0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2c, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5d, 0x20, 0x0a, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a, 0x20, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x3d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x3a, 0x31, 0x2c, 0x74,
	0x79, 0x70, 0x65, 0x3a, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x20, 0x3d, 0x3e, 0x20, 0x57, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x20, 0x3d, 0x20, 0x31, 0x20, 0x41, 0x4e, 0x44, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d,
	0x20, 0x27, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x20,
	0x0a, 0x20, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x0a,
	0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d,
	0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20,
	0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79,
	0x3a, 0x25, 0x21, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65,
	0x79, 0x20, 0x49, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27,
	0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x3e, 0x3d, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3e, 0x3d, 0x20, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x3c, 0x3d,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3c,
	0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65,
	0x79, 0x31, 0x3a, 0x3e, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x2c, 0x6b, 0x65, 0x79, 0x32,
	0x3a, 0x3c, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b,
	0x65, 0x79, 0x31, 0x20, 0x3e, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x20, 0x41, 0x4e,
	0x44, 0x20, 0x6b, 0x65, 0x79, 0x32, 0x20, 0x3c, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32,
	0x27, 0x20, 0x42, 0x45, 0x54, 0x57, 0x45, 0x45, 0x4e, 0x20, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c,
	0x45, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2e, 0x6e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e,
	0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2d, 0x3e, 0x3e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b,
	0x65, 0x79, 0x31, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0xee, 0x02, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x42, 0xd7, 0x02, 0x92, 0x41, 0xd3, 0x02, 0x32, 0xd0, 0x02, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x20, 0x27, 0x4f, 0x52, 0x27, 0x20, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x20, 0x0a, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x20, 0x5b, 0x6b, 0x65, 0x79,
	0x31, 0x2c, 0x6b, 0x65, 0x79, 0x32, 0x2c, 0x6b, 0x65, 0x79, 0x33, 0x3a, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5d, 0x20, 0x0a, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a, 0x20, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x3d, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x41, 0x6e,
	0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x3d, 0x3e, 0x20, 0x57, 0x68,
	0x65, 0x72, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x41, 0x6e, 0x6e, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x20, 0x4f, 0x52, 0x20, 0x74, 0x79, 0x70,
	0x65, 0x20, 0x3d, 0x20, 0x27, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x27, 0x20, 0x0a, 0x20, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x3a, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x25, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x4c, 0x49, 0x4b,
	0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27,
	0x6b, 0x65, 0x79, 0x3a, 0x25, 0x21, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20,
	0x27, 0x6b, 0x65, 0x79, 0x20, 0x49, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2e, 0x6e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20,
	0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2d, 0x3e, 0x3e, 0x6e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x4b, 0x65, 0x79, 0x31, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x1e, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x53, 0x43, 0x10, 0x01, 0x22, 0xc2, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79,
	0x6e, 0x63, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x73,
	0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x53, 0x4f,
	0x53, 0x79, 0x6e, 0x63, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3a,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x73, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x85, 0x01, 0x0a, 0x0e, 0x53,
	0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x73, 0x73, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x53, 0x4f, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xd6, 0x04, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x54, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x3e, 0x92, 0x41,
	0x3b, 0x32, 0x39, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x70, 0x65,
	0x72, 0x20, 0x70, 0x61, 0x67, 0x65, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x27, 0x2d, 0x31, 0x27, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x55, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x32, 0x3c, 0x70, 0x61, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x27,
	0x2d, 0x31, 0x27, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20,
	0x70, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x57, 0x0a, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73, 0x73, 0x6f, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e,
	0x63, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x1e, 0x92,
	0x41, 0x1b, 0x32, 0x19, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x62,
	0x79, 0x20, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x12, 0x50, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x28, 0x2e, 0x73, 0x73, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32,
	0x0f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x39, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x73, 0x73, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x61, 0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74,
	0x12, 0x0c, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x73, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x73, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x65, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x10, 0x05, 0x22, 0x1e, 0x0a, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x01, 0x22, 0xbb, 0x01, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x79, 0x6e,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x73, 0x79, 0x6e,
	0x63, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x73, 0x73, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x73, 0x6f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xac,
	0x02, 0x0a, 0x0c, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x36, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73,
	0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x44, 0x0a, 0x0f, 0x73, 0x79, 0x6e, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x73, 0x79,
	0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0x42, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6e,
	0x63, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x79, 0x6e, 0x63, 0x49,
	0x44, 0x22, 0x8e, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x73, 0x6f, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x53, 0x79,
	0x6e, 0x63, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x28, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x73, 0x73, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x22, 0xf8, 0x02, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x33, 0x0a, 0x06, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x73, 0x73, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x49, 0x44, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x69, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x22, 0x49, 0x0a, 0x06, 0x49, 0x44, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x54, 0x50, 0x10, 0x01, 0x12,
	0x07, 0x0a, 0x03, 0x53, 0x49, 0x4d, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x41, 0x53, 0x53,
	0x50, 0x4f, 0x52, 0x54, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4b, 0x49, 0x54, 0x41, 0x53, 0x10,
	0x04, 0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x49, 0x54, 0x41, 0x50, 0x49, 0x10, 0x05, 0x22, 0xf7, 0x04,
	0x0a, 0x12, 0x46, 0x69, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x4a, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x73, 0x73, 0x6f, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x47, 0x65,
	0x74, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x2e, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32, 0x39, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x70, 0x65, 0x72, 0x20, 0x70, 0x61, 0x67,
	0x65, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x20, 0x27, 0x2d, 0x31, 0x27, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x55,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x41, 0x92, 0x41,
	0x3e, 0x32, 0x3c, 0x70, 0x61, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x74,
	0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x27, 0x2d, 0x31, 0x27, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x61, 0x67, 0x65, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x57, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73, 0x73, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32, 0x19, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x62, 0x79, 0x20, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x54,
	0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x73, 0x73,
	0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x2e,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x03, 0x64, 0x69, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x39, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73,
	0x73, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x2e, 0x0a, 0x07, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x70, 0x64, 0x66, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x78, 0x6c, 0x73, 0x10, 0x02, 0x12, 0x07,
	0x0a, 0x03, 0x63, 0x73, 0x76, 0x10, 0x03, 0x22, 0x1e, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x01, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sync_user_payload_proto_rawDescOnce sync.Once
	file_sync_user_payload_proto_rawDescData = file_sync_user_payload_proto_rawDesc
)

func file_sync_user_payload_proto_rawDescGZIP() []byte {
	file_sync_user_payload_proto_rawDescOnce.Do(func() {
		file_sync_user_payload_proto_rawDescData = protoimpl.X.CompressGZIP(file_sync_user_payload_proto_rawDescData)
	})
	return file_sync_user_payload_proto_rawDescData
}

var file_sync_user_payload_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_sync_user_payload_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_sync_user_payload_proto_goTypes = []interface{}{
	(ListTaskReqStatuses)(0),         // 0: sso.service.v1.ListTaskReq.statuses
	(ListTaskReqSteps)(0),            // 1: sso.service.v1.ListTaskReq.steps
	(ListTaskReqDirection)(0),        // 2: sso.service.v1.ListTaskReq.direction
	(ListSyncDataReqDirection)(0),    // 3: sso.service.v1.ListSyncDataReq.direction
	(GetSyncUserReq_Sort)(0),         // 4: sso.service.v1.GetSyncUserReq.Sort
	(GetSyncUserReqDirection)(0),     // 5: sso.service.v1.GetSyncUserReq.direction
	(User_IDType)(0),                 // 6: sso.service.v1.User.IDType
	(FileGetSyncUserReq_Formats)(0),  // 7: sso.service.v1.FileGetSyncUserReq.Formats
	(FileGetSyncUserReqDirection)(0), // 8: sso.service.v1.FileGetSyncUserReq.direction
	(*CreateSyncUserTaskReq)(nil),    // 9: sso.service.v1.CreateSyncUserTaskReq
	(*WriteSyncUserTask)(nil),        // 10: sso.service.v1.WriteSyncUserTask
	(*Additionals)(nil),              // 11: sso.service.v1.Additionals
	(*CreateSyncUserTaskRes)(nil),    // 12: sso.service.v1.CreateSyncUserTaskRes
	(*Task)(nil),                     // 13: sso.service.v1.Task
	(*ListTaskReq)(nil),              // 14: sso.service.v1.ListTaskReq
	(*ReadSyncUserTask)(nil),         // 15: sso.service.v1.ReadSyncUserTask
	(*Pagination)(nil),               // 16: sso.service.v1.Pagination
	(*ListSyncUserTaskRes)(nil),      // 17: sso.service.v1.ListSyncUserTaskRes
	(*GetTaskReq)(nil),               // 18: sso.service.v1.GetTaskReq
	(*GetSyncUserTaskRes)(nil),       // 19: sso.service.v1.GetSyncUserTaskRes
	(*ListSyncDataReq)(nil),          // 20: sso.service.v1.ListSyncDataReq
	(*ListSyncUserRes)(nil),          // 21: sso.service.v1.ListSyncUserRes
	(*SetSyncUserRes)(nil),           // 22: sso.service.v1.SetSyncUserRes
	(*GetSyncUserReq)(nil),           // 23: sso.service.v1.GetSyncUserReq
	(*GetSyncUserFilter)(nil),        // 24: sso.service.v1.GetSyncUserFilter
	(*GetSyncUserRes)(nil),           // 25: sso.service.v1.GetSyncUserRes
	(*SyncUserData)(nil),             // 26: sso.service.v1.SyncUserData
	(*GetSyncDetailReq)(nil),         // 27: sso.service.v1.GetSyncDetailReq
	(*GetSyncUserDetailRes)(nil),     // 28: sso.service.v1.GetSyncUserDetailRes
	(*User)(nil),                     // 29: sso.service.v1.User
	(*FileGetSyncUserReq)(nil),       // 30: sso.service.v1.FileGetSyncUserReq
	(*SSOSyncUser)(nil),              // 31: sso.service.v1.SSOSyncUser
	(*CBMUser)(nil),                  // 32: sso.service.v1.CBMUser
	(*timestamppb.Timestamp)(nil),    // 33: google.protobuf.Timestamp
}
var file_sync_user_payload_proto_depIdxs = []int32{
	10, // 0: sso.service.v1.CreateSyncUserTaskReq.data:type_name -> sso.service.v1.WriteSyncUserTask
	31, // 1: sso.service.v1.WriteSyncUserTask.user:type_name -> sso.service.v1.SSOSyncUser
	11, // 2: sso.service.v1.WriteSyncUserTask.additionals:type_name -> sso.service.v1.Additionals
	32, // 3: sso.service.v1.WriteSyncUserTask.dataCBM:type_name -> sso.service.v1.CBMUser
	13, // 4: sso.service.v1.CreateSyncUserTaskRes.data:type_name -> sso.service.v1.Task
	33, // 5: sso.service.v1.Task.createdAt:type_name -> google.protobuf.Timestamp
	33, // 6: sso.service.v1.Task.updatedAt:type_name -> google.protobuf.Timestamp
	0,  // 7: sso.service.v1.ListTaskReq.status:type_name -> sso.service.v1.ListTaskReq.statuses
	1,  // 8: sso.service.v1.ListTaskReq.step:type_name -> sso.service.v1.ListTaskReq.steps
	2,  // 9: sso.service.v1.ListTaskReq.dir:type_name -> sso.service.v1.ListTaskReq.direction
	31, // 10: sso.service.v1.ReadSyncUserTask.user:type_name -> sso.service.v1.SSOSyncUser
	11, // 11: sso.service.v1.ReadSyncUserTask.additionals:type_name -> sso.service.v1.Additionals
	13, // 12: sso.service.v1.ReadSyncUserTask.Task:type_name -> sso.service.v1.Task
	32, // 13: sso.service.v1.ReadSyncUserTask.dataCBM:type_name -> sso.service.v1.CBMUser
	15, // 14: sso.service.v1.ListSyncUserTaskRes.data:type_name -> sso.service.v1.ReadSyncUserTask
	16, // 15: sso.service.v1.ListSyncUserTaskRes.pagination:type_name -> sso.service.v1.Pagination
	15, // 16: sso.service.v1.GetSyncUserTaskRes.data:type_name -> sso.service.v1.ReadSyncUserTask
	3,  // 17: sso.service.v1.ListSyncDataReq.dir:type_name -> sso.service.v1.ListSyncDataReq.direction
	31, // 18: sso.service.v1.ListSyncUserRes.data:type_name -> sso.service.v1.SSOSyncUser
	16, // 19: sso.service.v1.ListSyncUserRes.pagination:type_name -> sso.service.v1.Pagination
	31, // 20: sso.service.v1.SetSyncUserRes.data:type_name -> sso.service.v1.SSOSyncUser
	4,  // 21: sso.service.v1.GetSyncUserReq.sort:type_name -> sso.service.v1.GetSyncUserReq.Sort
	5,  // 22: sso.service.v1.GetSyncUserReq.dir:type_name -> sso.service.v1.GetSyncUserReq.direction
	24, // 23: sso.service.v1.GetSyncUserReq.filter:type_name -> sso.service.v1.GetSyncUserFilter
	33, // 24: sso.service.v1.GetSyncUserFilter.syncDate:type_name -> google.protobuf.Timestamp
	26, // 25: sso.service.v1.GetSyncUserRes.data:type_name -> sso.service.v1.SyncUserData
	16, // 26: sso.service.v1.GetSyncUserRes.pagination:type_name -> sso.service.v1.Pagination
	33, // 27: sso.service.v1.SyncUserData.syncDate:type_name -> google.protobuf.Timestamp
	33, // 28: sso.service.v1.SyncUserData.syncRequestDate:type_name -> google.protobuf.Timestamp
	15, // 29: sso.service.v1.GetSyncUserDetailRes.data:type_name -> sso.service.v1.ReadSyncUserTask
	29, // 30: sso.service.v1.GetSyncUserDetailRes.user:type_name -> sso.service.v1.User
	6,  // 31: sso.service.v1.User.idType:type_name -> sso.service.v1.User.IDType
	7,  // 32: sso.service.v1.FileGetSyncUserReq.fileFormat:type_name -> sso.service.v1.FileGetSyncUserReq.Formats
	4,  // 33: sso.service.v1.FileGetSyncUserReq.sort:type_name -> sso.service.v1.GetSyncUserReq.Sort
	8,  // 34: sso.service.v1.FileGetSyncUserReq.dir:type_name -> sso.service.v1.FileGetSyncUserReq.direction
	24, // 35: sso.service.v1.FileGetSyncUserReq.filter:type_name -> sso.service.v1.GetSyncUserFilter
	36, // [36:36] is the sub-list for method output_type
	36, // [36:36] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_sync_user_payload_proto_init() }
func file_sync_user_payload_proto_init() {
	if File_sync_user_payload_proto != nil {
		return
	}
	file_sso_gorm_db_proto_init()
	file_sso_payload_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sync_user_payload_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSyncUserTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_user_payload_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteSyncUserTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_user_payload_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Additionals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_user_payload_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSyncUserTaskRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_user_payload_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_user_payload_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_user_payload_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadSyncUserTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_user_payload_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_user_payload_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSyncUserTaskRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_user_payload_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_user_payload_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSyncUserTaskRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_user_payload_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSyncDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_user_payload_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSyncUserRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_user_payload_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSyncUserRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_user_payload_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSyncUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_user_payload_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSyncUserFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_user_payload_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSyncUserRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_user_payload_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncUserData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_user_payload_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSyncDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_user_payload_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSyncUserDetailRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_user_payload_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sync_user_payload_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileGetSyncUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sync_user_payload_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sync_user_payload_proto_goTypes,
		DependencyIndexes: file_sync_user_payload_proto_depIdxs,
		EnumInfos:         file_sync_user_payload_proto_enumTypes,
		MessageInfos:      file_sync_user_payload_proto_msgTypes,
	}.Build()
	File_sync_user_payload_proto = out.File
	file_sync_user_payload_proto_rawDesc = nil
	file_sync_user_payload_proto_goTypes = nil
	file_sync_user_payload_proto_depIdxs = nil
}
