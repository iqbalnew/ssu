package pb

import (
	context "context"
	fmt "fmt"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	gorm "github.com/jinzhu/gorm"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	strings "strings"
	time "time"
)

type SSOSessionORM struct {
	Client      string     `gorm:"column:Client;type:varchar(255);primary_key;not null"`
	ClientToken string     `gorm:"column:ClientToken;type:text;not null"`
	CreatedAt   *time.Time `gorm:"column:CreatedAt"`
	ExpiredAt   *time.Time
	SessionID   string `gorm:"column:SessionID;type:text;primary_key;not null"`
	Token       string `gorm:"column:Token;type:text;not null"`
	UserID      string `gorm:"column:UserID;type:varchar(255);primary_key;not null"`
}

// TableName overrides the default tablename generated by GORM
func (SSOSessionORM) TableName() string {
	return "sso_sessions"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *SSOSession) ToORM(ctx context.Context) (SSOSessionORM, error) {
	to := SSOSessionORM{}
	var err error
	if prehook, ok := interface{}(m).(SSOSessionWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.UserID = m.UserID
	to.Client = m.Client
	to.SessionID = m.SessionID
	to.Token = m.Token
	to.ClientToken = m.ClientToken
	if m.ExpiredAt != nil {
		t := m.ExpiredAt.AsTime()
		to.ExpiredAt = &t
	}
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if posthook, ok := interface{}(m).(SSOSessionWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *SSOSessionORM) ToPB(ctx context.Context) (SSOSession, error) {
	to := SSOSession{}
	var err error
	if prehook, ok := interface{}(m).(SSOSessionWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.UserID = m.UserID
	to.Client = m.Client
	to.SessionID = m.SessionID
	to.Token = m.Token
	to.ClientToken = m.ClientToken
	if m.ExpiredAt != nil {
		to.ExpiredAt = timestamppb.New(*m.ExpiredAt)
	}
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if posthook, ok := interface{}(m).(SSOSessionWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type SSOSession the arg will be the target, the caller the one being converted from

// SSOSessionBeforeToORM called before default ToORM code
type SSOSessionWithBeforeToORM interface {
	BeforeToORM(context.Context, *SSOSessionORM) error
}

// SSOSessionAfterToORM called after default ToORM code
type SSOSessionWithAfterToORM interface {
	AfterToORM(context.Context, *SSOSessionORM) error
}

// SSOSessionBeforeToPB called before default ToPB code
type SSOSessionWithBeforeToPB interface {
	BeforeToPB(context.Context, *SSOSession) error
}

// SSOSessionAfterToPB called after default ToPB code
type SSOSessionWithAfterToPB interface {
	AfterToPB(context.Context, *SSOSession) error
}

type SSOSyncUserORM struct {
	AddonsUserID   uint64     `gorm:"column:AddOnsUserID;not null"`
	AddonsUserName string     `gorm:"column:AddOnsUsername;not null"`
	Client         string     `gorm:"column:Client;type:varchar(255);not null"`
	CreatedAt      *time.Time `gorm:"column:CreatedAt"`
	RoleID         uint64     `gorm:"column:RoleID;not null"`
	UpdatedAt      *time.Time `gorm:"column:UpdatedAt"`
	UserID         string     `gorm:"column:UserID;type:varchar(255);not null"`
	UserSyncID     uint64     `gorm:"column:UserSyncID;primary_key;not null"`
}

// TableName overrides the default tablename generated by GORM
func (SSOSyncUserORM) TableName() string {
	return "sso_sync_users"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *SSOSyncUser) ToORM(ctx context.Context) (SSOSyncUserORM, error) {
	to := SSOSyncUserORM{}
	var err error
	if prehook, ok := interface{}(m).(SSOSyncUserWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.UserSyncID = m.UserSyncID
	to.AddonsUserID = m.AddonsUserID
	to.Client = m.Client
	to.UserID = m.UserID
	to.RoleID = m.RoleID
	to.AddonsUserName = m.AddonsUserName
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	if posthook, ok := interface{}(m).(SSOSyncUserWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *SSOSyncUserORM) ToPB(ctx context.Context) (SSOSyncUser, error) {
	to := SSOSyncUser{}
	var err error
	if prehook, ok := interface{}(m).(SSOSyncUserWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.UserSyncID = m.UserSyncID
	to.AddonsUserID = m.AddonsUserID
	to.Client = m.Client
	to.UserID = m.UserID
	to.RoleID = m.RoleID
	to.AddonsUserName = m.AddonsUserName
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	if posthook, ok := interface{}(m).(SSOSyncUserWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type SSOSyncUser the arg will be the target, the caller the one being converted from

// SSOSyncUserBeforeToORM called before default ToORM code
type SSOSyncUserWithBeforeToORM interface {
	BeforeToORM(context.Context, *SSOSyncUserORM) error
}

// SSOSyncUserAfterToORM called after default ToORM code
type SSOSyncUserWithAfterToORM interface {
	AfterToORM(context.Context, *SSOSyncUserORM) error
}

// SSOSyncUserBeforeToPB called before default ToPB code
type SSOSyncUserWithBeforeToPB interface {
	BeforeToPB(context.Context, *SSOSyncUser) error
}

// SSOSyncUserAfterToPB called after default ToPB code
type SSOSyncUserWithAfterToPB interface {
	AfterToPB(context.Context, *SSOSyncUser) error
}

type SSOSyncCompanyORM struct {
	AddonsCompanyID uint64     `gorm:"column:AddOnsCompanyID;not null"`
	Client          string     `gorm:"column:Client;type:varchar(255);not null"`
	CompanyID       string     `gorm:"column:CompanyID;not null"`
	CompanySyncID   uint64     `gorm:"column:CompanySyncID;primary_key;not null"`
	CreatedAt       *time.Time `gorm:"column:CreatedAt"`
	UpdatedAt       *time.Time `gorm:"column:UpdatedAt"`
}

// TableName overrides the default tablename generated by GORM
func (SSOSyncCompanyORM) TableName() string {
	return "sso_sync_companies"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *SSOSyncCompany) ToORM(ctx context.Context) (SSOSyncCompanyORM, error) {
	to := SSOSyncCompanyORM{}
	var err error
	if prehook, ok := interface{}(m).(SSOSyncCompanyWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.CompanySyncID = m.CompanySyncID
	to.AddonsCompanyID = m.AddonsCompanyID
	to.Client = m.Client
	to.CompanyID = m.CompanyID
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	if posthook, ok := interface{}(m).(SSOSyncCompanyWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *SSOSyncCompanyORM) ToPB(ctx context.Context) (SSOSyncCompany, error) {
	to := SSOSyncCompany{}
	var err error
	if prehook, ok := interface{}(m).(SSOSyncCompanyWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.CompanySyncID = m.CompanySyncID
	to.AddonsCompanyID = m.AddonsCompanyID
	to.Client = m.Client
	to.CompanyID = m.CompanyID
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	if posthook, ok := interface{}(m).(SSOSyncCompanyWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type SSOSyncCompany the arg will be the target, the caller the one being converted from

// SSOSyncCompanyBeforeToORM called before default ToORM code
type SSOSyncCompanyWithBeforeToORM interface {
	BeforeToORM(context.Context, *SSOSyncCompanyORM) error
}

// SSOSyncCompanyAfterToORM called after default ToORM code
type SSOSyncCompanyWithAfterToORM interface {
	AfterToORM(context.Context, *SSOSyncCompanyORM) error
}

// SSOSyncCompanyBeforeToPB called before default ToPB code
type SSOSyncCompanyWithBeforeToPB interface {
	BeforeToPB(context.Context, *SSOSyncCompany) error
}

// SSOSyncCompanyAfterToPB called after default ToPB code
type SSOSyncCompanyWithAfterToPB interface {
	AfterToPB(context.Context, *SSOSyncCompany) error
}

type SSOClientORM struct {
	ClientID       uint64     `gorm:"column:ClientID;primary_key;not null"`
	Code           string     `gorm:"column:Code;unique;not null"`
	CreatedAt      *time.Time `gorm:"column:CreatedAt"`
	LoginURL       string     `gorm:"column:LoginURL"`
	LogoutURL      string     `gorm:"column:LogoutURL"`
	Name           string     `gorm:"column:Name;not null"`
	SyncCompanyURL string     `gorm:"column:SyncCompanyURL"`
	SyncUserURL    string     `gorm:"column:SyncUserURL"`
	UpdatedAt      *time.Time `gorm:"column:UpdatedAt"`
	UpdatedByID    uint64     `gorm:"column:UpdatedByID"`
}

// TableName overrides the default tablename generated by GORM
func (SSOClientORM) TableName() string {
	return "sso_clients"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *SSOClient) ToORM(ctx context.Context) (SSOClientORM, error) {
	to := SSOClientORM{}
	var err error
	if prehook, ok := interface{}(m).(SSOClientWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.ClientID = m.ClientID
	to.Name = m.Name
	to.Code = m.Code
	to.LoginURL = m.LoginURL
	to.LogoutURL = m.LogoutURL
	to.SyncUserURL = m.SyncUserURL
	to.SyncCompanyURL = m.SyncCompanyURL
	to.UpdatedByID = m.UpdatedByID
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	if posthook, ok := interface{}(m).(SSOClientWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *SSOClientORM) ToPB(ctx context.Context) (SSOClient, error) {
	to := SSOClient{}
	var err error
	if prehook, ok := interface{}(m).(SSOClientWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.ClientID = m.ClientID
	to.Name = m.Name
	to.Code = m.Code
	to.LoginURL = m.LoginURL
	to.LogoutURL = m.LogoutURL
	to.SyncUserURL = m.SyncUserURL
	to.SyncCompanyURL = m.SyncCompanyURL
	to.UpdatedByID = m.UpdatedByID
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	if posthook, ok := interface{}(m).(SSOClientWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type SSOClient the arg will be the target, the caller the one being converted from

// SSOClientBeforeToORM called before default ToORM code
type SSOClientWithBeforeToORM interface {
	BeforeToORM(context.Context, *SSOClientORM) error
}

// SSOClientAfterToORM called after default ToORM code
type SSOClientWithAfterToORM interface {
	AfterToORM(context.Context, *SSOClientORM) error
}

// SSOClientBeforeToPB called before default ToPB code
type SSOClientWithBeforeToPB interface {
	BeforeToPB(context.Context, *SSOClient) error
}

// SSOClientAfterToPB called after default ToPB code
type SSOClientWithAfterToPB interface {
	AfterToPB(context.Context, *SSOClient) error
}

type SSOClientRoleORM struct {
	Client         string     `gorm:"column:Client;not null"`
	ClientRoleCode string     `gorm:"column:ClientRoleCode;not null"`
	CreatedAt      *time.Time `gorm:"column:CreatedAt"`
	Name           string     `gorm:"column:Name;not null"`
	RoleID         uint64     `gorm:"column:RoleID;primary_key;not null"`
}

// TableName overrides the default tablename generated by GORM
func (SSOClientRoleORM) TableName() string {
	return "sso_client_roles"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *SSOClientRole) ToORM(ctx context.Context) (SSOClientRoleORM, error) {
	to := SSOClientRoleORM{}
	var err error
	if prehook, ok := interface{}(m).(SSOClientRoleWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.RoleID = m.RoleID
	to.ClientRoleCode = m.ClientRoleCode
	to.Name = m.Name
	to.Client = m.Client
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if posthook, ok := interface{}(m).(SSOClientRoleWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *SSOClientRoleORM) ToPB(ctx context.Context) (SSOClientRole, error) {
	to := SSOClientRole{}
	var err error
	if prehook, ok := interface{}(m).(SSOClientRoleWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.RoleID = m.RoleID
	to.ClientRoleCode = m.ClientRoleCode
	to.Name = m.Name
	to.Client = m.Client
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if posthook, ok := interface{}(m).(SSOClientRoleWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type SSOClientRole the arg will be the target, the caller the one being converted from

// SSOClientRoleBeforeToORM called before default ToORM code
type SSOClientRoleWithBeforeToORM interface {
	BeforeToORM(context.Context, *SSOClientRoleORM) error
}

// SSOClientRoleAfterToORM called after default ToORM code
type SSOClientRoleWithAfterToORM interface {
	AfterToORM(context.Context, *SSOClientRoleORM) error
}

// SSOClientRoleBeforeToPB called before default ToPB code
type SSOClientRoleWithBeforeToPB interface {
	BeforeToPB(context.Context, *SSOClientRole) error
}

// SSOClientRoleAfterToPB called after default ToPB code
type SSOClientRoleWithAfterToPB interface {
	AfterToPB(context.Context, *SSOClientRole) error
}

type CompanySyncJoinORM struct {
	CompanyCode     string     `gorm:"column:CompanyCode"`
	CompanyID       uint64     `gorm:"column:CompanyID"`
	Partner         string     `gorm:"column:Partner"`
	Status          int32      `gorm:"column:status"`
	SyncDate        *time.Time `gorm:"column:SyncDate"`
	SyncRequestDate *time.Time `gorm:"column:SyncRequestDate"`
	SyncStatus      string     `gorm:"column:SyncStatus"`
	TaskID          uint64     `gorm:"column:TaskID"`
	UpdatedAt       *time.Time `gorm:"column:updated_at"`
}

// TableName overrides the default tablename generated by GORM
func (CompanySyncJoinORM) TableName() string {
	return "sso_sync_companies_join"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *CompanySyncJoin) ToORM(ctx context.Context) (CompanySyncJoinORM, error) {
	to := CompanySyncJoinORM{}
	var err error
	if prehook, ok := interface{}(m).(CompanySyncJoinWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.CompanyCode = m.CompanyCode
	to.Partner = m.Partner
	if m.SyncRequestDate != nil {
		t := m.SyncRequestDate.AsTime()
		to.SyncRequestDate = &t
	}
	if m.SyncDate != nil {
		t := m.SyncDate.AsTime()
		to.SyncDate = &t
	}
	to.SyncStatus = m.SyncStatus
	to.TaskID = m.TaskID
	to.CompanyID = m.CompanyID
	to.Status = m.Status
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	if posthook, ok := interface{}(m).(CompanySyncJoinWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *CompanySyncJoinORM) ToPB(ctx context.Context) (CompanySyncJoin, error) {
	to := CompanySyncJoin{}
	var err error
	if prehook, ok := interface{}(m).(CompanySyncJoinWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.CompanyCode = m.CompanyCode
	to.Partner = m.Partner
	if m.SyncRequestDate != nil {
		to.SyncRequestDate = timestamppb.New(*m.SyncRequestDate)
	}
	if m.SyncDate != nil {
		to.SyncDate = timestamppb.New(*m.SyncDate)
	}
	to.SyncStatus = m.SyncStatus
	to.TaskID = m.TaskID
	to.CompanyID = m.CompanyID
	to.Status = m.Status
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	if posthook, ok := interface{}(m).(CompanySyncJoinWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type CompanySyncJoin the arg will be the target, the caller the one being converted from

// CompanySyncJoinBeforeToORM called before default ToORM code
type CompanySyncJoinWithBeforeToORM interface {
	BeforeToORM(context.Context, *CompanySyncJoinORM) error
}

// CompanySyncJoinAfterToORM called after default ToORM code
type CompanySyncJoinWithAfterToORM interface {
	AfterToORM(context.Context, *CompanySyncJoinORM) error
}

// CompanySyncJoinBeforeToPB called before default ToPB code
type CompanySyncJoinWithBeforeToPB interface {
	BeforeToPB(context.Context, *CompanySyncJoin) error
}

// CompanySyncJoinAfterToPB called after default ToPB code
type CompanySyncJoinWithAfterToPB interface {
	AfterToPB(context.Context, *CompanySyncJoin) error
}

type UserSyncJoinORM struct {
	Partner         string     `gorm:"column:Partner"`
	Status          int32      `gorm:"column:status"`
	SyncDate        *time.Time `gorm:"column:SyncDate"`
	SyncRequestDate *time.Time `gorm:"column:SyncRequestDate"`
	SyncStatus      string     `gorm:"column:SyncStatus"`
	TaskID          uint64     `gorm:"column:TaskID"`
	UpdatedAt       *time.Time `gorm:"column:updated_at"`
	UserID          uint64     `gorm:"column:UserID"`
	UserTypeName    string     `gorm:"column:UserTypeName"`
	Username        string     `gorm:"column:Username"`
}

// TableName overrides the default tablename generated by GORM
func (UserSyncJoinORM) TableName() string {
	return "sso_sync_users_join"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *UserSyncJoin) ToORM(ctx context.Context) (UserSyncJoinORM, error) {
	to := UserSyncJoinORM{}
	var err error
	if prehook, ok := interface{}(m).(UserSyncJoinWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.UserID = m.UserID
	to.Username = m.Username
	to.UserTypeName = m.UserTypeName
	to.Partner = m.Partner
	if m.SyncRequestDate != nil {
		t := m.SyncRequestDate.AsTime()
		to.SyncRequestDate = &t
	}
	if m.SyncDate != nil {
		t := m.SyncDate.AsTime()
		to.SyncDate = &t
	}
	to.SyncStatus = m.SyncStatus
	to.TaskID = m.TaskID
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	to.Status = m.Status
	if posthook, ok := interface{}(m).(UserSyncJoinWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *UserSyncJoinORM) ToPB(ctx context.Context) (UserSyncJoin, error) {
	to := UserSyncJoin{}
	var err error
	if prehook, ok := interface{}(m).(UserSyncJoinWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.UserID = m.UserID
	to.Username = m.Username
	to.UserTypeName = m.UserTypeName
	to.Partner = m.Partner
	if m.SyncRequestDate != nil {
		to.SyncRequestDate = timestamppb.New(*m.SyncRequestDate)
	}
	if m.SyncDate != nil {
		to.SyncDate = timestamppb.New(*m.SyncDate)
	}
	to.SyncStatus = m.SyncStatus
	to.TaskID = m.TaskID
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	to.Status = m.Status
	if posthook, ok := interface{}(m).(UserSyncJoinWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type UserSyncJoin the arg will be the target, the caller the one being converted from

// UserSyncJoinBeforeToORM called before default ToORM code
type UserSyncJoinWithBeforeToORM interface {
	BeforeToORM(context.Context, *UserSyncJoinORM) error
}

// UserSyncJoinAfterToORM called after default ToORM code
type UserSyncJoinWithAfterToORM interface {
	AfterToORM(context.Context, *UserSyncJoinORM) error
}

// UserSyncJoinBeforeToPB called before default ToPB code
type UserSyncJoinWithBeforeToPB interface {
	BeforeToPB(context.Context, *UserSyncJoin) error
}

// UserSyncJoinAfterToPB called after default ToPB code
type UserSyncJoinWithAfterToPB interface {
	AfterToPB(context.Context, *UserSyncJoin) error
}

// DefaultCreateSSOSession executes a basic gorm create call
func DefaultCreateSSOSession(ctx context.Context, in *SSOSession, db *gorm.DB) (*SSOSession, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SSOSessionORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SSOSessionORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type SSOSessionORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SSOSessionORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadSSOSession(ctx context.Context, in *SSOSession, db *gorm.DB) (*SSOSession, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Client == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(SSOSessionORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &SSOSessionORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SSOSessionORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := SSOSessionORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(SSOSessionORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type SSOSessionORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SSOSessionORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SSOSessionORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteSSOSession(ctx context.Context, in *SSOSession, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Client == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(SSOSessionORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&SSOSessionORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(SSOSessionORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type SSOSessionORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SSOSessionORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteSSOSessionSet(ctx context.Context, in []*SSOSession, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.UserID == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.UserID)
	}
	if hook, ok := (interface{}(&SSOSessionORM{})).(SSOSessionORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("user_id in (?)", keys).Delete(&SSOSessionORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&SSOSessionORM{})).(SSOSessionORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type SSOSessionORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*SSOSession, *gorm.DB) (*gorm.DB, error)
}
type SSOSessionORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*SSOSession, *gorm.DB) error
}

// DefaultStrictUpdateSSOSession clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateSSOSession(ctx context.Context, in *SSOSession, db *gorm.DB) (*SSOSession, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateSSOSession")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &SSOSessionORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("UserID=?", ormObj.UserID).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(SSOSessionORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(SSOSessionORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SSOSessionORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type SSOSessionORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SSOSessionORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SSOSessionORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchSSOSession executes a basic gorm update call with patch behavior
func DefaultPatchSSOSession(ctx context.Context, in *SSOSession, updateMask *field_mask.FieldMask, db *gorm.DB) (*SSOSession, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj SSOSession
	var err error
	if hook, ok := interface{}(&pbObj).(SSOSessionWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&pbObj).(SSOSessionWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskSSOSession(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(SSOSessionWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateSSOSession(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(SSOSessionWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type SSOSessionWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *SSOSession, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type SSOSessionWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *SSOSession, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type SSOSessionWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *SSOSession, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type SSOSessionWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *SSOSession, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetSSOSession executes a bulk gorm update call with patch behavior
func DefaultPatchSetSSOSession(ctx context.Context, objects []*SSOSession, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*SSOSession, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*SSOSession, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchSSOSession(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskSSOSession patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskSSOSession(ctx context.Context, patchee *SSOSession, patcher *SSOSession, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*SSOSession, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedExpiredAt bool
	var updatedCreatedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"UserID" {
			patchee.UserID = patcher.UserID
			continue
		}
		if f == prefix+"Client" {
			patchee.Client = patcher.Client
			continue
		}
		if f == prefix+"SessionID" {
			patchee.SessionID = patcher.SessionID
			continue
		}
		if f == prefix+"Token" {
			patchee.Token = patcher.Token
			continue
		}
		if f == prefix+"ClientToken" {
			patchee.ClientToken = patcher.ClientToken
			continue
		}
		if !updatedExpiredAt && strings.HasPrefix(f, prefix+"ExpiredAt.") {
			if patcher.ExpiredAt == nil {
				patchee.ExpiredAt = nil
				continue
			}
			if patchee.ExpiredAt == nil {
				patchee.ExpiredAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"ExpiredAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.ExpiredAt, patchee.ExpiredAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"ExpiredAt" {
			updatedExpiredAt = true
			patchee.ExpiredAt = patcher.ExpiredAt
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListSSOSession executes a gorm list call
func DefaultListSSOSession(ctx context.Context, db *gorm.DB) ([]*SSOSession, error) {
	in := SSOSession{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SSOSessionORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &SSOSessionORM{}, &SSOSession{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SSOSessionORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("SessionID")
	ormResponse := []SSOSessionORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SSOSessionORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*SSOSession{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type SSOSessionORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SSOSessionORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SSOSessionORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]SSOSessionORM) error
}

// DefaultCreateSSOSyncUser executes a basic gorm create call
func DefaultCreateSSOSyncUser(ctx context.Context, in *SSOSyncUser, db *gorm.DB) (*SSOSyncUser, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SSOSyncUserORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SSOSyncUserORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type SSOSyncUserORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SSOSyncUserORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadSSOSyncUser(ctx context.Context, in *SSOSyncUser, db *gorm.DB) (*SSOSyncUser, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.UserSyncID == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(SSOSyncUserORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &SSOSyncUserORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SSOSyncUserORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := SSOSyncUserORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(SSOSyncUserORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type SSOSyncUserORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SSOSyncUserORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SSOSyncUserORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteSSOSyncUser(ctx context.Context, in *SSOSyncUser, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.UserSyncID == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(SSOSyncUserORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&SSOSyncUserORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(SSOSyncUserORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type SSOSyncUserORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SSOSyncUserORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteSSOSyncUserSet(ctx context.Context, in []*SSOSyncUser, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []uint64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.UserSyncID == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.UserSyncID)
	}
	if hook, ok := (interface{}(&SSOSyncUserORM{})).(SSOSyncUserORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("user_sync_id in (?)", keys).Delete(&SSOSyncUserORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&SSOSyncUserORM{})).(SSOSyncUserORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type SSOSyncUserORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*SSOSyncUser, *gorm.DB) (*gorm.DB, error)
}
type SSOSyncUserORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*SSOSyncUser, *gorm.DB) error
}

// DefaultStrictUpdateSSOSyncUser clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateSSOSyncUser(ctx context.Context, in *SSOSyncUser, db *gorm.DB) (*SSOSyncUser, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateSSOSyncUser")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &SSOSyncUserORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("UserSyncID=?", ormObj.UserSyncID).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(SSOSyncUserORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(SSOSyncUserORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SSOSyncUserORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type SSOSyncUserORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SSOSyncUserORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SSOSyncUserORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchSSOSyncUser executes a basic gorm update call with patch behavior
func DefaultPatchSSOSyncUser(ctx context.Context, in *SSOSyncUser, updateMask *field_mask.FieldMask, db *gorm.DB) (*SSOSyncUser, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj SSOSyncUser
	var err error
	if hook, ok := interface{}(&pbObj).(SSOSyncUserWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&pbObj).(SSOSyncUserWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskSSOSyncUser(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(SSOSyncUserWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateSSOSyncUser(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(SSOSyncUserWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type SSOSyncUserWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *SSOSyncUser, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type SSOSyncUserWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *SSOSyncUser, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type SSOSyncUserWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *SSOSyncUser, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type SSOSyncUserWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *SSOSyncUser, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetSSOSyncUser executes a bulk gorm update call with patch behavior
func DefaultPatchSetSSOSyncUser(ctx context.Context, objects []*SSOSyncUser, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*SSOSyncUser, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*SSOSyncUser, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchSSOSyncUser(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskSSOSyncUser patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskSSOSyncUser(ctx context.Context, patchee *SSOSyncUser, patcher *SSOSyncUser, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*SSOSyncUser, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"UserSyncID" {
			patchee.UserSyncID = patcher.UserSyncID
			continue
		}
		if f == prefix+"AddonsUserID" {
			patchee.AddonsUserID = patcher.AddonsUserID
			continue
		}
		if f == prefix+"Client" {
			patchee.Client = patcher.Client
			continue
		}
		if f == prefix+"UserID" {
			patchee.UserID = patcher.UserID
			continue
		}
		if f == prefix+"RoleID" {
			patchee.RoleID = patcher.RoleID
			continue
		}
		if f == prefix+"AddonsUserName" {
			patchee.AddonsUserName = patcher.AddonsUserName
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListSSOSyncUser executes a gorm list call
func DefaultListSSOSyncUser(ctx context.Context, db *gorm.DB) ([]*SSOSyncUser, error) {
	in := SSOSyncUser{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SSOSyncUserORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &SSOSyncUserORM{}, &SSOSyncUser{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SSOSyncUserORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("UserSyncID")
	ormResponse := []SSOSyncUserORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SSOSyncUserORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*SSOSyncUser{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type SSOSyncUserORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SSOSyncUserORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SSOSyncUserORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]SSOSyncUserORM) error
}

// DefaultCreateSSOSyncCompany executes a basic gorm create call
func DefaultCreateSSOSyncCompany(ctx context.Context, in *SSOSyncCompany, db *gorm.DB) (*SSOSyncCompany, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SSOSyncCompanyORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SSOSyncCompanyORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type SSOSyncCompanyORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SSOSyncCompanyORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadSSOSyncCompany(ctx context.Context, in *SSOSyncCompany, db *gorm.DB) (*SSOSyncCompany, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.CompanySyncID == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(SSOSyncCompanyORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &SSOSyncCompanyORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SSOSyncCompanyORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := SSOSyncCompanyORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(SSOSyncCompanyORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type SSOSyncCompanyORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SSOSyncCompanyORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SSOSyncCompanyORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteSSOSyncCompany(ctx context.Context, in *SSOSyncCompany, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.CompanySyncID == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(SSOSyncCompanyORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&SSOSyncCompanyORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(SSOSyncCompanyORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type SSOSyncCompanyORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SSOSyncCompanyORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteSSOSyncCompanySet(ctx context.Context, in []*SSOSyncCompany, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []uint64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.CompanySyncID == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.CompanySyncID)
	}
	if hook, ok := (interface{}(&SSOSyncCompanyORM{})).(SSOSyncCompanyORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("company_sync_id in (?)", keys).Delete(&SSOSyncCompanyORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&SSOSyncCompanyORM{})).(SSOSyncCompanyORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type SSOSyncCompanyORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*SSOSyncCompany, *gorm.DB) (*gorm.DB, error)
}
type SSOSyncCompanyORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*SSOSyncCompany, *gorm.DB) error
}

// DefaultStrictUpdateSSOSyncCompany clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateSSOSyncCompany(ctx context.Context, in *SSOSyncCompany, db *gorm.DB) (*SSOSyncCompany, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateSSOSyncCompany")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &SSOSyncCompanyORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("CompanySyncID=?", ormObj.CompanySyncID).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(SSOSyncCompanyORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(SSOSyncCompanyORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SSOSyncCompanyORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type SSOSyncCompanyORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SSOSyncCompanyORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SSOSyncCompanyORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchSSOSyncCompany executes a basic gorm update call with patch behavior
func DefaultPatchSSOSyncCompany(ctx context.Context, in *SSOSyncCompany, updateMask *field_mask.FieldMask, db *gorm.DB) (*SSOSyncCompany, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj SSOSyncCompany
	var err error
	if hook, ok := interface{}(&pbObj).(SSOSyncCompanyWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&pbObj).(SSOSyncCompanyWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskSSOSyncCompany(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(SSOSyncCompanyWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateSSOSyncCompany(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(SSOSyncCompanyWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type SSOSyncCompanyWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *SSOSyncCompany, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type SSOSyncCompanyWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *SSOSyncCompany, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type SSOSyncCompanyWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *SSOSyncCompany, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type SSOSyncCompanyWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *SSOSyncCompany, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetSSOSyncCompany executes a bulk gorm update call with patch behavior
func DefaultPatchSetSSOSyncCompany(ctx context.Context, objects []*SSOSyncCompany, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*SSOSyncCompany, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*SSOSyncCompany, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchSSOSyncCompany(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskSSOSyncCompany patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskSSOSyncCompany(ctx context.Context, patchee *SSOSyncCompany, patcher *SSOSyncCompany, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*SSOSyncCompany, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"CompanySyncID" {
			patchee.CompanySyncID = patcher.CompanySyncID
			continue
		}
		if f == prefix+"AddonsCompanyID" {
			patchee.AddonsCompanyID = patcher.AddonsCompanyID
			continue
		}
		if f == prefix+"Client" {
			patchee.Client = patcher.Client
			continue
		}
		if f == prefix+"CompanyID" {
			patchee.CompanyID = patcher.CompanyID
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListSSOSyncCompany executes a gorm list call
func DefaultListSSOSyncCompany(ctx context.Context, db *gorm.DB) ([]*SSOSyncCompany, error) {
	in := SSOSyncCompany{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SSOSyncCompanyORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &SSOSyncCompanyORM{}, &SSOSyncCompany{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SSOSyncCompanyORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("CompanySyncID")
	ormResponse := []SSOSyncCompanyORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SSOSyncCompanyORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*SSOSyncCompany{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type SSOSyncCompanyORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SSOSyncCompanyORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SSOSyncCompanyORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]SSOSyncCompanyORM) error
}

// DefaultCreateSSOClient executes a basic gorm create call
func DefaultCreateSSOClient(ctx context.Context, in *SSOClient, db *gorm.DB) (*SSOClient, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SSOClientORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SSOClientORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type SSOClientORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SSOClientORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadSSOClient(ctx context.Context, in *SSOClient, db *gorm.DB) (*SSOClient, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.ClientID == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(SSOClientORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &SSOClientORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SSOClientORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := SSOClientORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(SSOClientORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type SSOClientORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SSOClientORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SSOClientORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteSSOClient(ctx context.Context, in *SSOClient, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.ClientID == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(SSOClientORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&SSOClientORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(SSOClientORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type SSOClientORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SSOClientORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteSSOClientSet(ctx context.Context, in []*SSOClient, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []uint64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.ClientID == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.ClientID)
	}
	if hook, ok := (interface{}(&SSOClientORM{})).(SSOClientORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("client_id in (?)", keys).Delete(&SSOClientORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&SSOClientORM{})).(SSOClientORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type SSOClientORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*SSOClient, *gorm.DB) (*gorm.DB, error)
}
type SSOClientORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*SSOClient, *gorm.DB) error
}

// DefaultStrictUpdateSSOClient clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateSSOClient(ctx context.Context, in *SSOClient, db *gorm.DB) (*SSOClient, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateSSOClient")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &SSOClientORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("ClientID=?", ormObj.ClientID).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(SSOClientORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(SSOClientORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SSOClientORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type SSOClientORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SSOClientORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SSOClientORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchSSOClient executes a basic gorm update call with patch behavior
func DefaultPatchSSOClient(ctx context.Context, in *SSOClient, updateMask *field_mask.FieldMask, db *gorm.DB) (*SSOClient, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj SSOClient
	var err error
	if hook, ok := interface{}(&pbObj).(SSOClientWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&pbObj).(SSOClientWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskSSOClient(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(SSOClientWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateSSOClient(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(SSOClientWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type SSOClientWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *SSOClient, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type SSOClientWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *SSOClient, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type SSOClientWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *SSOClient, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type SSOClientWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *SSOClient, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetSSOClient executes a bulk gorm update call with patch behavior
func DefaultPatchSetSSOClient(ctx context.Context, objects []*SSOClient, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*SSOClient, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*SSOClient, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchSSOClient(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskSSOClient patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskSSOClient(ctx context.Context, patchee *SSOClient, patcher *SSOClient, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*SSOClient, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"ClientID" {
			patchee.ClientID = patcher.ClientID
			continue
		}
		if f == prefix+"Name" {
			patchee.Name = patcher.Name
			continue
		}
		if f == prefix+"Code" {
			patchee.Code = patcher.Code
			continue
		}
		if f == prefix+"LoginURL" {
			patchee.LoginURL = patcher.LoginURL
			continue
		}
		if f == prefix+"LogoutURL" {
			patchee.LogoutURL = patcher.LogoutURL
			continue
		}
		if f == prefix+"SyncUserURL" {
			patchee.SyncUserURL = patcher.SyncUserURL
			continue
		}
		if f == prefix+"SyncCompanyURL" {
			patchee.SyncCompanyURL = patcher.SyncCompanyURL
			continue
		}
		if f == prefix+"UpdatedByID" {
			patchee.UpdatedByID = patcher.UpdatedByID
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListSSOClient executes a gorm list call
func DefaultListSSOClient(ctx context.Context, db *gorm.DB) ([]*SSOClient, error) {
	in := SSOClient{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SSOClientORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &SSOClientORM{}, &SSOClient{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SSOClientORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("ClientID")
	ormResponse := []SSOClientORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SSOClientORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*SSOClient{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type SSOClientORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SSOClientORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SSOClientORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]SSOClientORM) error
}

// DefaultCreateSSOClientRole executes a basic gorm create call
func DefaultCreateSSOClientRole(ctx context.Context, in *SSOClientRole, db *gorm.DB) (*SSOClientRole, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SSOClientRoleORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SSOClientRoleORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type SSOClientRoleORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SSOClientRoleORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadSSOClientRole(ctx context.Context, in *SSOClientRole, db *gorm.DB) (*SSOClientRole, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.RoleID == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(SSOClientRoleORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &SSOClientRoleORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SSOClientRoleORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := SSOClientRoleORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(SSOClientRoleORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type SSOClientRoleORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SSOClientRoleORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SSOClientRoleORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteSSOClientRole(ctx context.Context, in *SSOClientRole, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.RoleID == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(SSOClientRoleORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&SSOClientRoleORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(SSOClientRoleORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type SSOClientRoleORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SSOClientRoleORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteSSOClientRoleSet(ctx context.Context, in []*SSOClientRole, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []uint64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.RoleID == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.RoleID)
	}
	if hook, ok := (interface{}(&SSOClientRoleORM{})).(SSOClientRoleORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("role_id in (?)", keys).Delete(&SSOClientRoleORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&SSOClientRoleORM{})).(SSOClientRoleORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type SSOClientRoleORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*SSOClientRole, *gorm.DB) (*gorm.DB, error)
}
type SSOClientRoleORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*SSOClientRole, *gorm.DB) error
}

// DefaultStrictUpdateSSOClientRole clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateSSOClientRole(ctx context.Context, in *SSOClientRole, db *gorm.DB) (*SSOClientRole, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateSSOClientRole")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &SSOClientRoleORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("RoleID=?", ormObj.RoleID).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(SSOClientRoleORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(SSOClientRoleORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SSOClientRoleORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type SSOClientRoleORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SSOClientRoleORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SSOClientRoleORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchSSOClientRole executes a basic gorm update call with patch behavior
func DefaultPatchSSOClientRole(ctx context.Context, in *SSOClientRole, updateMask *field_mask.FieldMask, db *gorm.DB) (*SSOClientRole, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj SSOClientRole
	var err error
	if hook, ok := interface{}(&pbObj).(SSOClientRoleWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&pbObj).(SSOClientRoleWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskSSOClientRole(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(SSOClientRoleWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateSSOClientRole(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(SSOClientRoleWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type SSOClientRoleWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *SSOClientRole, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type SSOClientRoleWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *SSOClientRole, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type SSOClientRoleWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *SSOClientRole, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type SSOClientRoleWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *SSOClientRole, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetSSOClientRole executes a bulk gorm update call with patch behavior
func DefaultPatchSetSSOClientRole(ctx context.Context, objects []*SSOClientRole, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*SSOClientRole, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*SSOClientRole, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchSSOClientRole(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskSSOClientRole patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskSSOClientRole(ctx context.Context, patchee *SSOClientRole, patcher *SSOClientRole, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*SSOClientRole, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCreatedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"RoleID" {
			patchee.RoleID = patcher.RoleID
			continue
		}
		if f == prefix+"ClientRoleCode" {
			patchee.ClientRoleCode = patcher.ClientRoleCode
			continue
		}
		if f == prefix+"Name" {
			patchee.Name = patcher.Name
			continue
		}
		if f == prefix+"Client" {
			patchee.Client = patcher.Client
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListSSOClientRole executes a gorm list call
func DefaultListSSOClientRole(ctx context.Context, db *gorm.DB) ([]*SSOClientRole, error) {
	in := SSOClientRole{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SSOClientRoleORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &SSOClientRoleORM{}, &SSOClientRole{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SSOClientRoleORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("RoleID")
	ormResponse := []SSOClientRoleORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SSOClientRoleORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*SSOClientRole{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type SSOClientRoleORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SSOClientRoleORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type SSOClientRoleORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]SSOClientRoleORM) error
}

// DefaultCreateCompanySyncJoin executes a basic gorm create call
func DefaultCreateCompanySyncJoin(ctx context.Context, in *CompanySyncJoin, db *gorm.DB) (*CompanySyncJoin, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CompanySyncJoinORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CompanySyncJoinORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type CompanySyncJoinORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CompanySyncJoinORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

// DefaultApplyFieldMaskCompanySyncJoin patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskCompanySyncJoin(ctx context.Context, patchee *CompanySyncJoin, patcher *CompanySyncJoin, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*CompanySyncJoin, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedSyncRequestDate bool
	var updatedSyncDate bool
	var updatedUpdatedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"CompanyCode" {
			patchee.CompanyCode = patcher.CompanyCode
			continue
		}
		if f == prefix+"Partner" {
			patchee.Partner = patcher.Partner
			continue
		}
		if !updatedSyncRequestDate && strings.HasPrefix(f, prefix+"SyncRequestDate.") {
			if patcher.SyncRequestDate == nil {
				patchee.SyncRequestDate = nil
				continue
			}
			if patchee.SyncRequestDate == nil {
				patchee.SyncRequestDate = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"SyncRequestDate."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.SyncRequestDate, patchee.SyncRequestDate, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"SyncRequestDate" {
			updatedSyncRequestDate = true
			patchee.SyncRequestDate = patcher.SyncRequestDate
			continue
		}
		if !updatedSyncDate && strings.HasPrefix(f, prefix+"SyncDate.") {
			if patcher.SyncDate == nil {
				patchee.SyncDate = nil
				continue
			}
			if patchee.SyncDate == nil {
				patchee.SyncDate = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"SyncDate."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.SyncDate, patchee.SyncDate, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"SyncDate" {
			updatedSyncDate = true
			patchee.SyncDate = patcher.SyncDate
			continue
		}
		if f == prefix+"SyncStatus" {
			patchee.SyncStatus = patcher.SyncStatus
			continue
		}
		if f == prefix+"TaskID" {
			patchee.TaskID = patcher.TaskID
			continue
		}
		if f == prefix+"CompanyID" {
			patchee.CompanyID = patcher.CompanyID
			continue
		}
		if f == prefix+"Status" {
			patchee.Status = patcher.Status
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListCompanySyncJoin executes a gorm list call
func DefaultListCompanySyncJoin(ctx context.Context, db *gorm.DB) ([]*CompanySyncJoin, error) {
	in := CompanySyncJoin{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CompanySyncJoinORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &CompanySyncJoinORM{}, &CompanySyncJoin{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CompanySyncJoinORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	ormResponse := []CompanySyncJoinORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CompanySyncJoinORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*CompanySyncJoin{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type CompanySyncJoinORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CompanySyncJoinORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CompanySyncJoinORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]CompanySyncJoinORM) error
}

// DefaultCreateUserSyncJoin executes a basic gorm create call
func DefaultCreateUserSyncJoin(ctx context.Context, in *UserSyncJoin, db *gorm.DB) (*UserSyncJoin, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(UserSyncJoinORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(UserSyncJoinORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type UserSyncJoinORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type UserSyncJoinORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

// DefaultApplyFieldMaskUserSyncJoin patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskUserSyncJoin(ctx context.Context, patchee *UserSyncJoin, patcher *UserSyncJoin, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*UserSyncJoin, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedSyncRequestDate bool
	var updatedSyncDate bool
	var updatedUpdatedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"UserID" {
			patchee.UserID = patcher.UserID
			continue
		}
		if f == prefix+"Username" {
			patchee.Username = patcher.Username
			continue
		}
		if f == prefix+"UserTypeName" {
			patchee.UserTypeName = patcher.UserTypeName
			continue
		}
		if f == prefix+"Partner" {
			patchee.Partner = patcher.Partner
			continue
		}
		if !updatedSyncRequestDate && strings.HasPrefix(f, prefix+"SyncRequestDate.") {
			if patcher.SyncRequestDate == nil {
				patchee.SyncRequestDate = nil
				continue
			}
			if patchee.SyncRequestDate == nil {
				patchee.SyncRequestDate = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"SyncRequestDate."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.SyncRequestDate, patchee.SyncRequestDate, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"SyncRequestDate" {
			updatedSyncRequestDate = true
			patchee.SyncRequestDate = patcher.SyncRequestDate
			continue
		}
		if !updatedSyncDate && strings.HasPrefix(f, prefix+"SyncDate.") {
			if patcher.SyncDate == nil {
				patchee.SyncDate = nil
				continue
			}
			if patchee.SyncDate == nil {
				patchee.SyncDate = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"SyncDate."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.SyncDate, patchee.SyncDate, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"SyncDate" {
			updatedSyncDate = true
			patchee.SyncDate = patcher.SyncDate
			continue
		}
		if f == prefix+"SyncStatus" {
			patchee.SyncStatus = patcher.SyncStatus
			continue
		}
		if f == prefix+"TaskID" {
			patchee.TaskID = patcher.TaskID
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
		if f == prefix+"Status" {
			patchee.Status = patcher.Status
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListUserSyncJoin executes a gorm list call
func DefaultListUserSyncJoin(ctx context.Context, db *gorm.DB) ([]*UserSyncJoin, error) {
	in := UserSyncJoin{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(UserSyncJoinORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &UserSyncJoinORM{}, &UserSyncJoin{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(UserSyncJoinORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	ormResponse := []UserSyncJoinORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(UserSyncJoinORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*UserSyncJoin{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type UserSyncJoinORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type UserSyncJoinORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type UserSyncJoinORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]UserSyncJoinORM) error
}
