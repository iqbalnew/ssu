// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: sso_api.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiServiceClient is the client API for ApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiServiceClient interface {
	HealthCheck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	CBMGetToken(ctx context.Context, in *CBMTokenRequest, opts ...grpc.CallOption) (*CBMTokenResponse, error)
	CBMSessionValidation(ctx context.Context, in *CBMSessionValidationRequest, opts ...grpc.CallOption) (*CBMSessionValidationResponse, error)
	SSOGetLoginURL(ctx context.Context, in *SSOGetLoginURLReq, opts ...grpc.CallOption) (*SSOGetLoginURLRes, error)
	SSOLogout(ctx context.Context, in *SSOGetLoginURLReq, opts ...grpc.CallOption) (*SSOLogoutRes, error)
	CBMSyncUser(ctx context.Context, in *CBMSyncUserReq, opts ...grpc.CallOption) (*CBMSyncUserRes, error)
	CBMSyncCompany(ctx context.Context, in *CBMSyncCompanyReq, opts ...grpc.CallOption) (*CBMSyncCompanyRes, error)
	CreateSyncUserTask(ctx context.Context, in *CreateSyncUserTaskReq, opts ...grpc.CallOption) (*CreateSyncUserTaskRes, error)
	ListSyncUserTask(ctx context.Context, in *ListTaskReq, opts ...grpc.CallOption) (*ListSyncUserTaskRes, error)
	GetSyncUserTask(ctx context.Context, in *GetTaskReq, opts ...grpc.CallOption) (*GetSyncUserTaskRes, error)
	DeleteSyncUserTask(ctx context.Context, in *GetTaskReq, opts ...grpc.CallOption) (*GetSyncUserTaskRes, error)
	ListSyncUser(ctx context.Context, in *ListSyncDataReq, opts ...grpc.CallOption) (*ListSyncUserRes, error)
	SaveSyncUser(ctx context.Context, in *WriteSyncUserTask, opts ...grpc.CallOption) (*SetSyncUserRes, error)
	DeleteSyncUser(ctx context.Context, in *WriteSyncUserTask, opts ...grpc.CallOption) (*SetSyncUserRes, error)
	CreateSyncCompanyTask(ctx context.Context, in *CreateSyncCompanyTaskReq, opts ...grpc.CallOption) (*CreateSyncCompanyTaskRes, error)
	ListSyncCompanyTask(ctx context.Context, in *ListTaskReq, opts ...grpc.CallOption) (*ListSyncCompanyTaskRes, error)
	GetSyncCompanyTask(ctx context.Context, in *GetTaskReq, opts ...grpc.CallOption) (*GetSyncCompanyTaskRes, error)
	DeleteSyncCompanyTask(ctx context.Context, in *GetTaskReq, opts ...grpc.CallOption) (*GetSyncCompanyTaskRes, error)
	ListSyncCompany(ctx context.Context, in *ListSyncDataReq, opts ...grpc.CallOption) (*ListSyncCompanyRes, error)
	SaveSyncCompany(ctx context.Context, in *WriteSyncCompanyTask, opts ...grpc.CallOption) (*SetSyncCompanyRes, error)
	DeleteSyncCompany(ctx context.Context, in *WriteSyncCompanyTask, opts ...grpc.CallOption) (*SetSyncCompanyRes, error)
}

type apiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiServiceClient(cc grpc.ClientConnInterface) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) HealthCheck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/sso.service.v1.ApiService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CBMGetToken(ctx context.Context, in *CBMTokenRequest, opts ...grpc.CallOption) (*CBMTokenResponse, error) {
	out := new(CBMTokenResponse)
	err := c.cc.Invoke(ctx, "/sso.service.v1.ApiService/CBMGetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CBMSessionValidation(ctx context.Context, in *CBMSessionValidationRequest, opts ...grpc.CallOption) (*CBMSessionValidationResponse, error) {
	out := new(CBMSessionValidationResponse)
	err := c.cc.Invoke(ctx, "/sso.service.v1.ApiService/CBMSessionValidation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SSOGetLoginURL(ctx context.Context, in *SSOGetLoginURLReq, opts ...grpc.CallOption) (*SSOGetLoginURLRes, error) {
	out := new(SSOGetLoginURLRes)
	err := c.cc.Invoke(ctx, "/sso.service.v1.ApiService/SSOGetLoginURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SSOLogout(ctx context.Context, in *SSOGetLoginURLReq, opts ...grpc.CallOption) (*SSOLogoutRes, error) {
	out := new(SSOLogoutRes)
	err := c.cc.Invoke(ctx, "/sso.service.v1.ApiService/SSOLogout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CBMSyncUser(ctx context.Context, in *CBMSyncUserReq, opts ...grpc.CallOption) (*CBMSyncUserRes, error) {
	out := new(CBMSyncUserRes)
	err := c.cc.Invoke(ctx, "/sso.service.v1.ApiService/CBMSyncUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CBMSyncCompany(ctx context.Context, in *CBMSyncCompanyReq, opts ...grpc.CallOption) (*CBMSyncCompanyRes, error) {
	out := new(CBMSyncCompanyRes)
	err := c.cc.Invoke(ctx, "/sso.service.v1.ApiService/CBMSyncCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateSyncUserTask(ctx context.Context, in *CreateSyncUserTaskReq, opts ...grpc.CallOption) (*CreateSyncUserTaskRes, error) {
	out := new(CreateSyncUserTaskRes)
	err := c.cc.Invoke(ctx, "/sso.service.v1.ApiService/CreateSyncUserTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListSyncUserTask(ctx context.Context, in *ListTaskReq, opts ...grpc.CallOption) (*ListSyncUserTaskRes, error) {
	out := new(ListSyncUserTaskRes)
	err := c.cc.Invoke(ctx, "/sso.service.v1.ApiService/ListSyncUserTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetSyncUserTask(ctx context.Context, in *GetTaskReq, opts ...grpc.CallOption) (*GetSyncUserTaskRes, error) {
	out := new(GetSyncUserTaskRes)
	err := c.cc.Invoke(ctx, "/sso.service.v1.ApiService/GetSyncUserTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DeleteSyncUserTask(ctx context.Context, in *GetTaskReq, opts ...grpc.CallOption) (*GetSyncUserTaskRes, error) {
	out := new(GetSyncUserTaskRes)
	err := c.cc.Invoke(ctx, "/sso.service.v1.ApiService/DeleteSyncUserTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListSyncUser(ctx context.Context, in *ListSyncDataReq, opts ...grpc.CallOption) (*ListSyncUserRes, error) {
	out := new(ListSyncUserRes)
	err := c.cc.Invoke(ctx, "/sso.service.v1.ApiService/ListSyncUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SaveSyncUser(ctx context.Context, in *WriteSyncUserTask, opts ...grpc.CallOption) (*SetSyncUserRes, error) {
	out := new(SetSyncUserRes)
	err := c.cc.Invoke(ctx, "/sso.service.v1.ApiService/SaveSyncUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DeleteSyncUser(ctx context.Context, in *WriteSyncUserTask, opts ...grpc.CallOption) (*SetSyncUserRes, error) {
	out := new(SetSyncUserRes)
	err := c.cc.Invoke(ctx, "/sso.service.v1.ApiService/DeleteSyncUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateSyncCompanyTask(ctx context.Context, in *CreateSyncCompanyTaskReq, opts ...grpc.CallOption) (*CreateSyncCompanyTaskRes, error) {
	out := new(CreateSyncCompanyTaskRes)
	err := c.cc.Invoke(ctx, "/sso.service.v1.ApiService/CreateSyncCompanyTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListSyncCompanyTask(ctx context.Context, in *ListTaskReq, opts ...grpc.CallOption) (*ListSyncCompanyTaskRes, error) {
	out := new(ListSyncCompanyTaskRes)
	err := c.cc.Invoke(ctx, "/sso.service.v1.ApiService/ListSyncCompanyTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetSyncCompanyTask(ctx context.Context, in *GetTaskReq, opts ...grpc.CallOption) (*GetSyncCompanyTaskRes, error) {
	out := new(GetSyncCompanyTaskRes)
	err := c.cc.Invoke(ctx, "/sso.service.v1.ApiService/GetSyncCompanyTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DeleteSyncCompanyTask(ctx context.Context, in *GetTaskReq, opts ...grpc.CallOption) (*GetSyncCompanyTaskRes, error) {
	out := new(GetSyncCompanyTaskRes)
	err := c.cc.Invoke(ctx, "/sso.service.v1.ApiService/DeleteSyncCompanyTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListSyncCompany(ctx context.Context, in *ListSyncDataReq, opts ...grpc.CallOption) (*ListSyncCompanyRes, error) {
	out := new(ListSyncCompanyRes)
	err := c.cc.Invoke(ctx, "/sso.service.v1.ApiService/ListSyncCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SaveSyncCompany(ctx context.Context, in *WriteSyncCompanyTask, opts ...grpc.CallOption) (*SetSyncCompanyRes, error) {
	out := new(SetSyncCompanyRes)
	err := c.cc.Invoke(ctx, "/sso.service.v1.ApiService/SaveSyncCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DeleteSyncCompany(ctx context.Context, in *WriteSyncCompanyTask, opts ...grpc.CallOption) (*SetSyncCompanyRes, error) {
	out := new(SetSyncCompanyRes)
	err := c.cc.Invoke(ctx, "/sso.service.v1.ApiService/DeleteSyncCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServiceServer is the server API for ApiService service.
// All implementations must embed UnimplementedApiServiceServer
// for forward compatibility
type ApiServiceServer interface {
	HealthCheck(context.Context, *Empty) (*HealthCheckResponse, error)
	CBMGetToken(context.Context, *CBMTokenRequest) (*CBMTokenResponse, error)
	CBMSessionValidation(context.Context, *CBMSessionValidationRequest) (*CBMSessionValidationResponse, error)
	SSOGetLoginURL(context.Context, *SSOGetLoginURLReq) (*SSOGetLoginURLRes, error)
	SSOLogout(context.Context, *SSOGetLoginURLReq) (*SSOLogoutRes, error)
	CBMSyncUser(context.Context, *CBMSyncUserReq) (*CBMSyncUserRes, error)
	CBMSyncCompany(context.Context, *CBMSyncCompanyReq) (*CBMSyncCompanyRes, error)
	CreateSyncUserTask(context.Context, *CreateSyncUserTaskReq) (*CreateSyncUserTaskRes, error)
	ListSyncUserTask(context.Context, *ListTaskReq) (*ListSyncUserTaskRes, error)
	GetSyncUserTask(context.Context, *GetTaskReq) (*GetSyncUserTaskRes, error)
	DeleteSyncUserTask(context.Context, *GetTaskReq) (*GetSyncUserTaskRes, error)
	ListSyncUser(context.Context, *ListSyncDataReq) (*ListSyncUserRes, error)
	SaveSyncUser(context.Context, *WriteSyncUserTask) (*SetSyncUserRes, error)
	DeleteSyncUser(context.Context, *WriteSyncUserTask) (*SetSyncUserRes, error)
	CreateSyncCompanyTask(context.Context, *CreateSyncCompanyTaskReq) (*CreateSyncCompanyTaskRes, error)
	ListSyncCompanyTask(context.Context, *ListTaskReq) (*ListSyncCompanyTaskRes, error)
	GetSyncCompanyTask(context.Context, *GetTaskReq) (*GetSyncCompanyTaskRes, error)
	DeleteSyncCompanyTask(context.Context, *GetTaskReq) (*GetSyncCompanyTaskRes, error)
	ListSyncCompany(context.Context, *ListSyncDataReq) (*ListSyncCompanyRes, error)
	SaveSyncCompany(context.Context, *WriteSyncCompanyTask) (*SetSyncCompanyRes, error)
	DeleteSyncCompany(context.Context, *WriteSyncCompanyTask) (*SetSyncCompanyRes, error)
	mustEmbedUnimplementedApiServiceServer()
}

// UnimplementedApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApiServiceServer struct {
}

func (UnimplementedApiServiceServer) HealthCheck(context.Context, *Empty) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedApiServiceServer) CBMGetToken(context.Context, *CBMTokenRequest) (*CBMTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CBMGetToken not implemented")
}
func (UnimplementedApiServiceServer) CBMSessionValidation(context.Context, *CBMSessionValidationRequest) (*CBMSessionValidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CBMSessionValidation not implemented")
}
func (UnimplementedApiServiceServer) SSOGetLoginURL(context.Context, *SSOGetLoginURLReq) (*SSOGetLoginURLRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SSOGetLoginURL not implemented")
}
func (UnimplementedApiServiceServer) SSOLogout(context.Context, *SSOGetLoginURLReq) (*SSOLogoutRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SSOLogout not implemented")
}
func (UnimplementedApiServiceServer) CBMSyncUser(context.Context, *CBMSyncUserReq) (*CBMSyncUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CBMSyncUser not implemented")
}
func (UnimplementedApiServiceServer) CBMSyncCompany(context.Context, *CBMSyncCompanyReq) (*CBMSyncCompanyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CBMSyncCompany not implemented")
}
func (UnimplementedApiServiceServer) CreateSyncUserTask(context.Context, *CreateSyncUserTaskReq) (*CreateSyncUserTaskRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSyncUserTask not implemented")
}
func (UnimplementedApiServiceServer) ListSyncUserTask(context.Context, *ListTaskReq) (*ListSyncUserTaskRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSyncUserTask not implemented")
}
func (UnimplementedApiServiceServer) GetSyncUserTask(context.Context, *GetTaskReq) (*GetSyncUserTaskRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncUserTask not implemented")
}
func (UnimplementedApiServiceServer) DeleteSyncUserTask(context.Context, *GetTaskReq) (*GetSyncUserTaskRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSyncUserTask not implemented")
}
func (UnimplementedApiServiceServer) ListSyncUser(context.Context, *ListSyncDataReq) (*ListSyncUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSyncUser not implemented")
}
func (UnimplementedApiServiceServer) SaveSyncUser(context.Context, *WriteSyncUserTask) (*SetSyncUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveSyncUser not implemented")
}
func (UnimplementedApiServiceServer) DeleteSyncUser(context.Context, *WriteSyncUserTask) (*SetSyncUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSyncUser not implemented")
}
func (UnimplementedApiServiceServer) CreateSyncCompanyTask(context.Context, *CreateSyncCompanyTaskReq) (*CreateSyncCompanyTaskRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSyncCompanyTask not implemented")
}
func (UnimplementedApiServiceServer) ListSyncCompanyTask(context.Context, *ListTaskReq) (*ListSyncCompanyTaskRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSyncCompanyTask not implemented")
}
func (UnimplementedApiServiceServer) GetSyncCompanyTask(context.Context, *GetTaskReq) (*GetSyncCompanyTaskRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncCompanyTask not implemented")
}
func (UnimplementedApiServiceServer) DeleteSyncCompanyTask(context.Context, *GetTaskReq) (*GetSyncCompanyTaskRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSyncCompanyTask not implemented")
}
func (UnimplementedApiServiceServer) ListSyncCompany(context.Context, *ListSyncDataReq) (*ListSyncCompanyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSyncCompany not implemented")
}
func (UnimplementedApiServiceServer) SaveSyncCompany(context.Context, *WriteSyncCompanyTask) (*SetSyncCompanyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveSyncCompany not implemented")
}
func (UnimplementedApiServiceServer) DeleteSyncCompany(context.Context, *WriteSyncCompanyTask) (*SetSyncCompanyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSyncCompany not implemented")
}
func (UnimplementedApiServiceServer) mustEmbedUnimplementedApiServiceServer() {}

// UnsafeApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServiceServer will
// result in compilation errors.
type UnsafeApiServiceServer interface {
	mustEmbedUnimplementedApiServiceServer()
}

func RegisterApiServiceServer(s grpc.ServiceRegistrar, srv ApiServiceServer) {
	s.RegisterService(&ApiService_ServiceDesc, srv)
}

func _ApiService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.service.v1.ApiService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).HealthCheck(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CBMGetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBMTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CBMGetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.service.v1.ApiService/CBMGetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CBMGetToken(ctx, req.(*CBMTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CBMSessionValidation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBMSessionValidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CBMSessionValidation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.service.v1.ApiService/CBMSessionValidation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CBMSessionValidation(ctx, req.(*CBMSessionValidationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SSOGetLoginURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSOGetLoginURLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SSOGetLoginURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.service.v1.ApiService/SSOGetLoginURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SSOGetLoginURL(ctx, req.(*SSOGetLoginURLReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SSOLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSOGetLoginURLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SSOLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.service.v1.ApiService/SSOLogout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SSOLogout(ctx, req.(*SSOGetLoginURLReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CBMSyncUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBMSyncUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CBMSyncUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.service.v1.ApiService/CBMSyncUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CBMSyncUser(ctx, req.(*CBMSyncUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CBMSyncCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBMSyncCompanyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CBMSyncCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.service.v1.ApiService/CBMSyncCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CBMSyncCompany(ctx, req.(*CBMSyncCompanyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateSyncUserTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSyncUserTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateSyncUserTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.service.v1.ApiService/CreateSyncUserTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateSyncUserTask(ctx, req.(*CreateSyncUserTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListSyncUserTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListSyncUserTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.service.v1.ApiService/ListSyncUserTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListSyncUserTask(ctx, req.(*ListTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetSyncUserTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetSyncUserTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.service.v1.ApiService/GetSyncUserTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetSyncUserTask(ctx, req.(*GetTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DeleteSyncUserTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DeleteSyncUserTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.service.v1.ApiService/DeleteSyncUserTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DeleteSyncUserTask(ctx, req.(*GetTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListSyncUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSyncDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListSyncUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.service.v1.ApiService/ListSyncUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListSyncUser(ctx, req.(*ListSyncDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SaveSyncUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteSyncUserTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SaveSyncUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.service.v1.ApiService/SaveSyncUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SaveSyncUser(ctx, req.(*WriteSyncUserTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DeleteSyncUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteSyncUserTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DeleteSyncUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.service.v1.ApiService/DeleteSyncUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DeleteSyncUser(ctx, req.(*WriteSyncUserTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateSyncCompanyTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSyncCompanyTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateSyncCompanyTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.service.v1.ApiService/CreateSyncCompanyTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateSyncCompanyTask(ctx, req.(*CreateSyncCompanyTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListSyncCompanyTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListSyncCompanyTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.service.v1.ApiService/ListSyncCompanyTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListSyncCompanyTask(ctx, req.(*ListTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetSyncCompanyTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetSyncCompanyTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.service.v1.ApiService/GetSyncCompanyTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetSyncCompanyTask(ctx, req.(*GetTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DeleteSyncCompanyTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DeleteSyncCompanyTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.service.v1.ApiService/DeleteSyncCompanyTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DeleteSyncCompanyTask(ctx, req.(*GetTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListSyncCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSyncDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListSyncCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.service.v1.ApiService/ListSyncCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListSyncCompany(ctx, req.(*ListSyncDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SaveSyncCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteSyncCompanyTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SaveSyncCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.service.v1.ApiService/SaveSyncCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SaveSyncCompany(ctx, req.(*WriteSyncCompanyTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DeleteSyncCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteSyncCompanyTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DeleteSyncCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.service.v1.ApiService/DeleteSyncCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DeleteSyncCompany(ctx, req.(*WriteSyncCompanyTask))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiService_ServiceDesc is the grpc.ServiceDesc for ApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sso.service.v1.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _ApiService_HealthCheck_Handler,
		},
		{
			MethodName: "CBMGetToken",
			Handler:    _ApiService_CBMGetToken_Handler,
		},
		{
			MethodName: "CBMSessionValidation",
			Handler:    _ApiService_CBMSessionValidation_Handler,
		},
		{
			MethodName: "SSOGetLoginURL",
			Handler:    _ApiService_SSOGetLoginURL_Handler,
		},
		{
			MethodName: "SSOLogout",
			Handler:    _ApiService_SSOLogout_Handler,
		},
		{
			MethodName: "CBMSyncUser",
			Handler:    _ApiService_CBMSyncUser_Handler,
		},
		{
			MethodName: "CBMSyncCompany",
			Handler:    _ApiService_CBMSyncCompany_Handler,
		},
		{
			MethodName: "CreateSyncUserTask",
			Handler:    _ApiService_CreateSyncUserTask_Handler,
		},
		{
			MethodName: "ListSyncUserTask",
			Handler:    _ApiService_ListSyncUserTask_Handler,
		},
		{
			MethodName: "GetSyncUserTask",
			Handler:    _ApiService_GetSyncUserTask_Handler,
		},
		{
			MethodName: "DeleteSyncUserTask",
			Handler:    _ApiService_DeleteSyncUserTask_Handler,
		},
		{
			MethodName: "ListSyncUser",
			Handler:    _ApiService_ListSyncUser_Handler,
		},
		{
			MethodName: "SaveSyncUser",
			Handler:    _ApiService_SaveSyncUser_Handler,
		},
		{
			MethodName: "DeleteSyncUser",
			Handler:    _ApiService_DeleteSyncUser_Handler,
		},
		{
			MethodName: "CreateSyncCompanyTask",
			Handler:    _ApiService_CreateSyncCompanyTask_Handler,
		},
		{
			MethodName: "ListSyncCompanyTask",
			Handler:    _ApiService_ListSyncCompanyTask_Handler,
		},
		{
			MethodName: "GetSyncCompanyTask",
			Handler:    _ApiService_GetSyncCompanyTask_Handler,
		},
		{
			MethodName: "DeleteSyncCompanyTask",
			Handler:    _ApiService_DeleteSyncCompanyTask_Handler,
		},
		{
			MethodName: "ListSyncCompany",
			Handler:    _ApiService_ListSyncCompany_Handler,
		},
		{
			MethodName: "SaveSyncCompany",
			Handler:    _ApiService_SaveSyncCompany_Handler,
		},
		{
			MethodName: "DeleteSyncCompany",
			Handler:    _ApiService_DeleteSyncCompany_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sso_api.proto",
}
