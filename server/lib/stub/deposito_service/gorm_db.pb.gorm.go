package pb

import (
	context "context"
	fmt "fmt"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	gorm "github.com/jinzhu/gorm"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	strings "strings"
	time "time"
)

type DepositoDataORM struct {
	BUY_RATE        string `gorm:"type:varchar(100)"`
	CHARGE_AMOUNT   string `gorm:"type:varchar(100)"`
	CREDIT_ACCOUNT  string `gorm:"type:varchar(100)"`
	CREDIT_AMOUNT   string `gorm:"type:varchar(100)"`
	CREDIT_CURRENCY string `gorm:"type:varchar(100)"`
	CreatedAt       *time.Time
	DEBIT_ACCOUNT   string `gorm:"type:varchar(100)"`
	DEBIT_AMOUNT    string `gorm:"type:varchar(100)"`
	DEBIT_CURRENCY  string `gorm:"type:varchar(100)"`
	DepositoID      uint64 `gorm:"primary_key;not null"`
	NOBILYET        string `gorm:"type:varchar(100)"`
	NUM_LEMBAR      string `gorm:"type:varchar(100)"`
	REMARK          string `gorm:"type:varchar(100)"`
	SELL_RATE       string `gorm:"type:varchar(100)"`
	TaskID          uint64
	UpdatedAt       *time.Time
}

// TableName overrides the default tablename generated by GORM
func (DepositoDataORM) TableName() string {
	return "remittance_transactions"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *DepositoData) ToORM(ctx context.Context) (DepositoDataORM, error) {
	to := DepositoDataORM{}
	var err error
	if prehook, ok := interface{}(m).(DepositoDataWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.DepositoID = m.DepositoID
	to.DEBIT_ACCOUNT = m.DEBIT_ACCOUNT
	to.DEBIT_AMOUNT = m.DEBIT_AMOUNT
	to.SELL_RATE = m.SELL_RATE
	to.BUY_RATE = m.BUY_RATE
	to.CHARGE_AMOUNT = m.CHARGE_AMOUNT
	to.CREDIT_ACCOUNT = m.CREDIT_ACCOUNT
	to.CREDIT_AMOUNT = m.CREDIT_AMOUNT
	to.NUM_LEMBAR = m.NUM_LEMBAR
	to.DEBIT_CURRENCY = m.DEBIT_CURRENCY
	to.CREDIT_CURRENCY = m.CREDIT_CURRENCY
	to.REMARK = m.REMARK
	to.NOBILYET = m.NOBILYET
	to.TaskID = m.TaskID
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	if posthook, ok := interface{}(m).(DepositoDataWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *DepositoDataORM) ToPB(ctx context.Context) (DepositoData, error) {
	to := DepositoData{}
	var err error
	if prehook, ok := interface{}(m).(DepositoDataWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.DepositoID = m.DepositoID
	to.DEBIT_ACCOUNT = m.DEBIT_ACCOUNT
	to.DEBIT_AMOUNT = m.DEBIT_AMOUNT
	to.SELL_RATE = m.SELL_RATE
	to.BUY_RATE = m.BUY_RATE
	to.CHARGE_AMOUNT = m.CHARGE_AMOUNT
	to.CREDIT_ACCOUNT = m.CREDIT_ACCOUNT
	to.CREDIT_AMOUNT = m.CREDIT_AMOUNT
	to.NUM_LEMBAR = m.NUM_LEMBAR
	to.DEBIT_CURRENCY = m.DEBIT_CURRENCY
	to.CREDIT_CURRENCY = m.CREDIT_CURRENCY
	to.REMARK = m.REMARK
	to.NOBILYET = m.NOBILYET
	to.TaskID = m.TaskID
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	if posthook, ok := interface{}(m).(DepositoDataWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type DepositoData the arg will be the target, the caller the one being converted from

// DepositoDataBeforeToORM called before default ToORM code
type DepositoDataWithBeforeToORM interface {
	BeforeToORM(context.Context, *DepositoDataORM) error
}

// DepositoDataAfterToORM called after default ToORM code
type DepositoDataWithAfterToORM interface {
	AfterToORM(context.Context, *DepositoDataORM) error
}

// DepositoDataBeforeToPB called before default ToPB code
type DepositoDataWithBeforeToPB interface {
	BeforeToPB(context.Context, *DepositoData) error
}

// DepositoDataAfterToPB called after default ToPB code
type DepositoDataWithAfterToPB interface {
	AfterToPB(context.Context, *DepositoData) error
}

type DepositoORM struct {
	AccInterestID  uint64
	AccNo_Deposito string `gorm:"type:varchar(100)"`
	AccPrincipalID uint64
	AccTDID        uint64
	Amount         string `gorm:"type:varchar(100)"`
	Code           string `gorm:"type:varchar(100)"`
	CompanyID      uint64
	CreatedAt      *time.Time
	CreatedById    uint64
	DepositType    string `gorm:"type:varchar(100)"`
	DepositoID     uint64 `gorm:"primary_key;not null"`
	DepositoName   string `gorm:"type:varchar(100)"`
	InterestRate   string `gorm:"type:varchar(100)"`
	Tenor          string `gorm:"type:varchar(100)"`
	UpdatedAt      *time.Time
	UpdatedById    uint64
	Voucher        string `gorm:"type:varchar(100)"`
	WhitdrawAt     *time.Time
}

// TableName overrides the default tablename generated by GORM
func (DepositoORM) TableName() string {
	return "deposito"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Deposito) ToORM(ctx context.Context) (DepositoORM, error) {
	to := DepositoORM{}
	var err error
	if prehook, ok := interface{}(m).(DepositoWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.DepositoID = m.DepositoID
	to.CompanyID = m.CompanyID
	to.AccNo_Deposito = m.AccNo_Deposito
	to.AccTDID = m.AccTDID
	to.AccInterestID = m.AccInterestID
	to.AccPrincipalID = m.AccPrincipalID
	to.DepositoName = m.DepositoName
	to.DepositType = m.DepositType
	to.Tenor = m.Tenor
	to.Amount = m.Amount
	to.InterestRate = m.InterestRate
	if m.WhitdrawAt != nil {
		t := m.WhitdrawAt.AsTime()
		to.WhitdrawAt = &t
	}
	to.CreatedById = m.CreatedById
	to.UpdatedById = m.UpdatedById
	to.Code = m.Code
	to.Voucher = m.Voucher
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	if posthook, ok := interface{}(m).(DepositoWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *DepositoORM) ToPB(ctx context.Context) (Deposito, error) {
	to := Deposito{}
	var err error
	if prehook, ok := interface{}(m).(DepositoWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.DepositoID = m.DepositoID
	to.CompanyID = m.CompanyID
	to.AccNo_Deposito = m.AccNo_Deposito
	to.AccTDID = m.AccTDID
	to.AccInterestID = m.AccInterestID
	to.AccPrincipalID = m.AccPrincipalID
	to.DepositoName = m.DepositoName
	to.DepositType = m.DepositType
	to.Tenor = m.Tenor
	to.Amount = m.Amount
	to.InterestRate = m.InterestRate
	if m.WhitdrawAt != nil {
		to.WhitdrawAt = timestamppb.New(*m.WhitdrawAt)
	}
	to.CreatedById = m.CreatedById
	to.UpdatedById = m.UpdatedById
	to.Code = m.Code
	to.Voucher = m.Voucher
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	if posthook, ok := interface{}(m).(DepositoWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Deposito the arg will be the target, the caller the one being converted from

// DepositoBeforeToORM called before default ToORM code
type DepositoWithBeforeToORM interface {
	BeforeToORM(context.Context, *DepositoORM) error
}

// DepositoAfterToORM called after default ToORM code
type DepositoWithAfterToORM interface {
	AfterToORM(context.Context, *DepositoORM) error
}

// DepositoBeforeToPB called before default ToPB code
type DepositoWithBeforeToPB interface {
	BeforeToPB(context.Context, *Deposito) error
}

// DepositoAfterToPB called after default ToPB code
type DepositoWithAfterToPB interface {
	AfterToPB(context.Context, *Deposito) error
}

// DefaultCreateDepositoData executes a basic gorm create call
func DefaultCreateDepositoData(ctx context.Context, in *DepositoData, db *gorm.DB) (*DepositoData, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DepositoDataORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DepositoDataORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type DepositoDataORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DepositoDataORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadDepositoData(ctx context.Context, in *DepositoData, db *gorm.DB) (*DepositoData, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.DepositoID == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(DepositoDataORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &DepositoDataORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DepositoDataORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := DepositoDataORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(DepositoDataORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type DepositoDataORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DepositoDataORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DepositoDataORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteDepositoData(ctx context.Context, in *DepositoData, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.DepositoID == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(DepositoDataORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&DepositoDataORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(DepositoDataORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type DepositoDataORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DepositoDataORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteDepositoDataSet(ctx context.Context, in []*DepositoData, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []uint64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.DepositoID == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.DepositoID)
	}
	if hook, ok := (interface{}(&DepositoDataORM{})).(DepositoDataORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("deposito_id in (?)", keys).Delete(&DepositoDataORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&DepositoDataORM{})).(DepositoDataORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type DepositoDataORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*DepositoData, *gorm.DB) (*gorm.DB, error)
}
type DepositoDataORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*DepositoData, *gorm.DB) error
}

// DefaultStrictUpdateDepositoData clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateDepositoData(ctx context.Context, in *DepositoData, db *gorm.DB) (*DepositoData, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateDepositoData")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &DepositoDataORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("deposito_id=?", ormObj.DepositoID).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(DepositoDataORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(DepositoDataORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DepositoDataORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type DepositoDataORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DepositoDataORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DepositoDataORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchDepositoData executes a basic gorm update call with patch behavior
func DefaultPatchDepositoData(ctx context.Context, in *DepositoData, updateMask *field_mask.FieldMask, db *gorm.DB) (*DepositoData, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj DepositoData
	var err error
	if hook, ok := interface{}(&pbObj).(DepositoDataWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&pbObj).(DepositoDataWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskDepositoData(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(DepositoDataWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateDepositoData(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(DepositoDataWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type DepositoDataWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *DepositoData, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type DepositoDataWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *DepositoData, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type DepositoDataWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *DepositoData, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type DepositoDataWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *DepositoData, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetDepositoData executes a bulk gorm update call with patch behavior
func DefaultPatchSetDepositoData(ctx context.Context, objects []*DepositoData, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*DepositoData, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*DepositoData, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchDepositoData(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskDepositoData patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskDepositoData(ctx context.Context, patchee *DepositoData, patcher *DepositoData, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*DepositoData, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"DepositoID" {
			patchee.DepositoID = patcher.DepositoID
			continue
		}
		if f == prefix+"DEBIT_ACCOUNT" {
			patchee.DEBIT_ACCOUNT = patcher.DEBIT_ACCOUNT
			continue
		}
		if f == prefix+"DEBIT_AMOUNT" {
			patchee.DEBIT_AMOUNT = patcher.DEBIT_AMOUNT
			continue
		}
		if f == prefix+"SELL_RATE" {
			patchee.SELL_RATE = patcher.SELL_RATE
			continue
		}
		if f == prefix+"BUY_RATE" {
			patchee.BUY_RATE = patcher.BUY_RATE
			continue
		}
		if f == prefix+"CHARGE_AMOUNT" {
			patchee.CHARGE_AMOUNT = patcher.CHARGE_AMOUNT
			continue
		}
		if f == prefix+"CREDIT_ACCOUNT" {
			patchee.CREDIT_ACCOUNT = patcher.CREDIT_ACCOUNT
			continue
		}
		if f == prefix+"CREDIT_AMOUNT" {
			patchee.CREDIT_AMOUNT = patcher.CREDIT_AMOUNT
			continue
		}
		if f == prefix+"NUM_LEMBAR" {
			patchee.NUM_LEMBAR = patcher.NUM_LEMBAR
			continue
		}
		if f == prefix+"DEBIT_CURRENCY" {
			patchee.DEBIT_CURRENCY = patcher.DEBIT_CURRENCY
			continue
		}
		if f == prefix+"CREDIT_CURRENCY" {
			patchee.CREDIT_CURRENCY = patcher.CREDIT_CURRENCY
			continue
		}
		if f == prefix+"REMARK" {
			patchee.REMARK = patcher.REMARK
			continue
		}
		if f == prefix+"NOBILYET" {
			patchee.NOBILYET = patcher.NOBILYET
			continue
		}
		if f == prefix+"TaskID" {
			patchee.TaskID = patcher.TaskID
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListDepositoData executes a gorm list call
func DefaultListDepositoData(ctx context.Context, db *gorm.DB) ([]*DepositoData, error) {
	in := DepositoData{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DepositoDataORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &DepositoDataORM{}, &DepositoData{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DepositoDataORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("deposito_id")
	ormResponse := []DepositoDataORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DepositoDataORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*DepositoData{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type DepositoDataORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DepositoDataORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DepositoDataORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]DepositoDataORM) error
}

// DefaultCreateDeposito executes a basic gorm create call
func DefaultCreateDeposito(ctx context.Context, in *Deposito, db *gorm.DB) (*Deposito, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DepositoORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DepositoORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type DepositoORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DepositoORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadDeposito(ctx context.Context, in *Deposito, db *gorm.DB) (*Deposito, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.DepositoID == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(DepositoORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &DepositoORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DepositoORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := DepositoORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(DepositoORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type DepositoORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DepositoORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DepositoORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteDeposito(ctx context.Context, in *Deposito, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.DepositoID == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(DepositoORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&DepositoORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(DepositoORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type DepositoORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DepositoORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteDepositoSet(ctx context.Context, in []*Deposito, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []uint64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.DepositoID == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.DepositoID)
	}
	if hook, ok := (interface{}(&DepositoORM{})).(DepositoORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("deposito_id in (?)", keys).Delete(&DepositoORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&DepositoORM{})).(DepositoORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type DepositoORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Deposito, *gorm.DB) (*gorm.DB, error)
}
type DepositoORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Deposito, *gorm.DB) error
}

// DefaultStrictUpdateDeposito clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateDeposito(ctx context.Context, in *Deposito, db *gorm.DB) (*Deposito, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateDeposito")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &DepositoORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("deposito_id=?", ormObj.DepositoID).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(DepositoORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(DepositoORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DepositoORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type DepositoORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DepositoORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DepositoORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchDeposito executes a basic gorm update call with patch behavior
func DefaultPatchDeposito(ctx context.Context, in *Deposito, updateMask *field_mask.FieldMask, db *gorm.DB) (*Deposito, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Deposito
	var err error
	if hook, ok := interface{}(&pbObj).(DepositoWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&pbObj).(DepositoWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskDeposito(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(DepositoWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateDeposito(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(DepositoWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type DepositoWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Deposito, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type DepositoWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Deposito, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type DepositoWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Deposito, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type DepositoWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Deposito, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetDeposito executes a bulk gorm update call with patch behavior
func DefaultPatchSetDeposito(ctx context.Context, objects []*Deposito, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Deposito, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Deposito, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchDeposito(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskDeposito patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskDeposito(ctx context.Context, patchee *Deposito, patcher *Deposito, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Deposito, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedWhitdrawAt bool
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"DepositoID" {
			patchee.DepositoID = patcher.DepositoID
			continue
		}
		if f == prefix+"CompanyID" {
			patchee.CompanyID = patcher.CompanyID
			continue
		}
		if f == prefix+"AccNo_Deposito" {
			patchee.AccNo_Deposito = patcher.AccNo_Deposito
			continue
		}
		if f == prefix+"AccTDID" {
			patchee.AccTDID = patcher.AccTDID
			continue
		}
		if f == prefix+"AccInterestID" {
			patchee.AccInterestID = patcher.AccInterestID
			continue
		}
		if f == prefix+"AccPrincipalID" {
			patchee.AccPrincipalID = patcher.AccPrincipalID
			continue
		}
		if f == prefix+"DepositoName" {
			patchee.DepositoName = patcher.DepositoName
			continue
		}
		if f == prefix+"DepositType" {
			patchee.DepositType = patcher.DepositType
			continue
		}
		if f == prefix+"Tenor" {
			patchee.Tenor = patcher.Tenor
			continue
		}
		if f == prefix+"Amount" {
			patchee.Amount = patcher.Amount
			continue
		}
		if f == prefix+"InterestRate" {
			patchee.InterestRate = patcher.InterestRate
			continue
		}
		if !updatedWhitdrawAt && strings.HasPrefix(f, prefix+"WhitdrawAt.") {
			if patcher.WhitdrawAt == nil {
				patchee.WhitdrawAt = nil
				continue
			}
			if patchee.WhitdrawAt == nil {
				patchee.WhitdrawAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"WhitdrawAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.WhitdrawAt, patchee.WhitdrawAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"WhitdrawAt" {
			updatedWhitdrawAt = true
			patchee.WhitdrawAt = patcher.WhitdrawAt
			continue
		}
		if f == prefix+"CreatedById" {
			patchee.CreatedById = patcher.CreatedById
			continue
		}
		if f == prefix+"UpdatedById" {
			patchee.UpdatedById = patcher.UpdatedById
			continue
		}
		if f == prefix+"Code" {
			patchee.Code = patcher.Code
			continue
		}
		if f == prefix+"Voucher" {
			patchee.Voucher = patcher.Voucher
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListDeposito executes a gorm list call
func DefaultListDeposito(ctx context.Context, db *gorm.DB) ([]*Deposito, error) {
	in := Deposito{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DepositoORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &DepositoORM{}, &Deposito{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DepositoORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("deposito_id")
	ormResponse := []DepositoORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DepositoORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Deposito{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type DepositoORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DepositoORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DepositoORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]DepositoORM) error
}
