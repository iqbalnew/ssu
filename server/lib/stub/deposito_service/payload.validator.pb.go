// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: payload.proto

package pb

import (
	fmt "fmt"
	math "math"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *PaginationResponse) Validate() error {
	return nil
}
func (this *Task) Validate() error {
	if this.CreatedAt != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.CreatedAt); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("CreatedAt", err)
		}
	}
	if this.UpdatedAt != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.UpdatedAt); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("UpdatedAt", err)
		}
	}
	return nil
}
func (this *CreateDepositoTaskRequest) Validate() error {
	if this.Data != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Data); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
		}
	}
	return nil
}
func (this *TaskData) Validate() error {
	if this.Task != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Task); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Task", err)
		}
	}
	if this.Deposito != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Deposito); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Deposito", err)
		}
	}
	if this.Company != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Company); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Company", err)
		}
	}
	if this.Account != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Account); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Account", err)
		}
	}
	return nil
}
func (this *Account) Validate() error {
	return nil
}
func (this *Accounts) Validate() error {
	if this.AccTD != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.AccTD); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("AccTD", err)
		}
	}
	if this.AccPrincipal != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.AccPrincipal); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("AccPrincipal", err)
		}
	}
	if this.AccInterest != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.AccInterest); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("AccInterest", err)
		}
	}
	return nil
}
func (this *Company) Validate() error {
	return nil
}
func (this *TaskActionRequest) Validate() error {
	return nil
}
func (this *TaskActionResponse) Validate() error {
	if this.Data != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Data); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
		}
	}
	return nil
}
func (this *CreateDepositoTaskResponse) Validate() error {
	if this.Data != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Data); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
		}
	}
	return nil
}
func (this *DepositoListTaskRequest) Validate() error {
	return nil
}
func (this *DepositoListTaskResponse) Validate() error {
	for _, item := range this.Data {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
			}
		}
	}
	if this.Pagination != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Pagination); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Pagination", err)
		}
	}
	return nil
}
func (this *FileTaskListRequest) Validate() error {
	return nil
}
func (this *GetDepositoTaskByIDRequest) Validate() error {
	return nil
}
func (this *GetDepositoTaskByIDResponse) Validate() error {
	if this.Data != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Data); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
		}
	}
	return nil
}
func (this *DepositoDataListRequest) Validate() error {
	if this.Filter != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Filter); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Filter", err)
		}
	}
	return nil
}
func (this *DepositoDataListRequest_DataListFilter) Validate() error {
	return nil
}
func (this *DepositoDataks) Validate() error {
	if this.Deposito != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Deposito); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Deposito", err)
		}
	}
	if this.Accounts != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Accounts); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Accounts", err)
		}
	}
	return nil
}
func (this *DepositoDataListResponse) Validate() error {
	for _, item := range this.Data {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
			}
		}
	}
	if this.Pagination != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Pagination); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Pagination", err)
		}
	}
	return nil
}
func (this *DepositoDataDetailRequest) Validate() error {
	return nil
}
func (this *DepositoDataDetailResponse) Validate() error {
	if this.Data != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Data); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
		}
	}
	return nil
}
func (this *CreateDepositoRequest) Validate() error {
	if this.Data != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Data); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
		}
	}
	return nil
}
func (this *CreateDepositoResponse) Validate() error {
	if this.Data != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Data); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
		}
	}
	return nil
}
func (this *DepositInquiryRateRequest) Validate() error {
	return nil
}
func (this *DepositInquiryRate) Validate() error {
	return nil
}
func (this *DepositInquiryRateRespons) Validate() error {
	if this.Data != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Data); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
		}
	}
	return nil
}
func (this *DepositoMaintananceRequest) Validate() error {
	return nil
}
func (this *DepositoMaintanance) Validate() error {
	return nil
}
func (this *DepositoMaintananceRespons) Validate() error {
	if this.Data != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Data); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
		}
	}
	return nil
}
func (this *DepositoCreateAccountRequest) Validate() error {
	return nil
}
func (this *DepositoCreateAccount) Validate() error {
	return nil
}
func (this *DepositoCreateAccountRespons) Validate() error {
	if this.Data != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Data); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
		}
	}
	return nil
}
func (this *DepositoPlacementRequest) Validate() error {
	return nil
}
func (this *DepositoPlacement) Validate() error {
	return nil
}
func (this *DepositoPlacementRespons) Validate() error {
	if this.Data != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Data); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
		}
	}
	return nil
}
