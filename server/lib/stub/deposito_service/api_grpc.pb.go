// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: api.proto

package pb

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DepositoServiceClient is the client API for DepositoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DepositoServiceClient interface {
	CreateDepositoTask(ctx context.Context, in *CreateDepositoTaskRequest, opts ...grpc.CallOption) (*CreateDepositoTaskResponse, error)
	SendForDepositoTask(ctx context.Context, in *GetDepositoTaskByIDRequest, opts ...grpc.CallOption) (*GetDepositoTaskByIDResponse, error)
	DepositoActionTask(ctx context.Context, in *TaskActionRequest, opts ...grpc.CallOption) (*TaskActionResponse, error)
	DepositoListTask(ctx context.Context, in *DepositoListTaskRequest, opts ...grpc.CallOption) (*DepositoListTaskResponse, error)
	GetDepositoTaskByID(ctx context.Context, in *GetDepositoTaskByIDRequest, opts ...grpc.CallOption) (*GetDepositoTaskByIDResponse, error)
	GetDepositoTaskByDepositoID(ctx context.Context, in *DepositoDataDetailRequest, opts ...grpc.CallOption) (*GetDepositoTaskByIDResponse, error)
	DownloadDepositoListTask(ctx context.Context, in *FileTaskListRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	ListDeposito(ctx context.Context, in *DepositoDataListRequest, opts ...grpc.CallOption) (*DepositoDataListResponse, error)
	DepositoDetail(ctx context.Context, in *DepositoDataDetailRequest, opts ...grpc.CallOption) (*DepositoDataDetailResponse, error)
	CreateDeposito(ctx context.Context, in *CreateDepositoRequest, opts ...grpc.CallOption) (*CreateDepositoResponse, error)
	DepositInquiryRate(ctx context.Context, in *DepositInquiryRateRequest, opts ...grpc.CallOption) (*DepositInquiryRateRespons, error)
	DepositoMaintanance(ctx context.Context, in *DepositoMaintananceRequest, opts ...grpc.CallOption) (*DepositoMaintananceRespons, error)
	DepositoCreateAccount(ctx context.Context, in *DepositoCreateAccountRequest, opts ...grpc.CallOption) (*DepositoCreateAccountRespons, error)
	DepositoPlacement(ctx context.Context, in *DepositoPlacementRequest, opts ...grpc.CallOption) (*DepositoPlacementRespons, error)
}

type depositoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDepositoServiceClient(cc grpc.ClientConnInterface) DepositoServiceClient {
	return &depositoServiceClient{cc}
}

func (c *depositoServiceClient) CreateDepositoTask(ctx context.Context, in *CreateDepositoTaskRequest, opts ...grpc.CallOption) (*CreateDepositoTaskResponse, error) {
	out := new(CreateDepositoTaskResponse)
	err := c.cc.Invoke(ctx, "/deposito.service.v1.DepositoService/CreateDepositoTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositoServiceClient) SendForDepositoTask(ctx context.Context, in *GetDepositoTaskByIDRequest, opts ...grpc.CallOption) (*GetDepositoTaskByIDResponse, error) {
	out := new(GetDepositoTaskByIDResponse)
	err := c.cc.Invoke(ctx, "/deposito.service.v1.DepositoService/SendForDepositoTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositoServiceClient) DepositoActionTask(ctx context.Context, in *TaskActionRequest, opts ...grpc.CallOption) (*TaskActionResponse, error) {
	out := new(TaskActionResponse)
	err := c.cc.Invoke(ctx, "/deposito.service.v1.DepositoService/DepositoActionTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositoServiceClient) DepositoListTask(ctx context.Context, in *DepositoListTaskRequest, opts ...grpc.CallOption) (*DepositoListTaskResponse, error) {
	out := new(DepositoListTaskResponse)
	err := c.cc.Invoke(ctx, "/deposito.service.v1.DepositoService/DepositoListTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositoServiceClient) GetDepositoTaskByID(ctx context.Context, in *GetDepositoTaskByIDRequest, opts ...grpc.CallOption) (*GetDepositoTaskByIDResponse, error) {
	out := new(GetDepositoTaskByIDResponse)
	err := c.cc.Invoke(ctx, "/deposito.service.v1.DepositoService/GetDepositoTaskByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositoServiceClient) GetDepositoTaskByDepositoID(ctx context.Context, in *DepositoDataDetailRequest, opts ...grpc.CallOption) (*GetDepositoTaskByIDResponse, error) {
	out := new(GetDepositoTaskByIDResponse)
	err := c.cc.Invoke(ctx, "/deposito.service.v1.DepositoService/GetDepositoTaskByDepositoID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositoServiceClient) DownloadDepositoListTask(ctx context.Context, in *FileTaskListRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/deposito.service.v1.DepositoService/DownloadDepositoListTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositoServiceClient) ListDeposito(ctx context.Context, in *DepositoDataListRequest, opts ...grpc.CallOption) (*DepositoDataListResponse, error) {
	out := new(DepositoDataListResponse)
	err := c.cc.Invoke(ctx, "/deposito.service.v1.DepositoService/ListDeposito", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositoServiceClient) DepositoDetail(ctx context.Context, in *DepositoDataDetailRequest, opts ...grpc.CallOption) (*DepositoDataDetailResponse, error) {
	out := new(DepositoDataDetailResponse)
	err := c.cc.Invoke(ctx, "/deposito.service.v1.DepositoService/DepositoDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositoServiceClient) CreateDeposito(ctx context.Context, in *CreateDepositoRequest, opts ...grpc.CallOption) (*CreateDepositoResponse, error) {
	out := new(CreateDepositoResponse)
	err := c.cc.Invoke(ctx, "/deposito.service.v1.DepositoService/createDeposito", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositoServiceClient) DepositInquiryRate(ctx context.Context, in *DepositInquiryRateRequest, opts ...grpc.CallOption) (*DepositInquiryRateRespons, error) {
	out := new(DepositInquiryRateRespons)
	err := c.cc.Invoke(ctx, "/deposito.service.v1.DepositoService/DepositInquiryRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositoServiceClient) DepositoMaintanance(ctx context.Context, in *DepositoMaintananceRequest, opts ...grpc.CallOption) (*DepositoMaintananceRespons, error) {
	out := new(DepositoMaintananceRespons)
	err := c.cc.Invoke(ctx, "/deposito.service.v1.DepositoService/DepositoMaintanance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositoServiceClient) DepositoCreateAccount(ctx context.Context, in *DepositoCreateAccountRequest, opts ...grpc.CallOption) (*DepositoCreateAccountRespons, error) {
	out := new(DepositoCreateAccountRespons)
	err := c.cc.Invoke(ctx, "/deposito.service.v1.DepositoService/DepositoCreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositoServiceClient) DepositoPlacement(ctx context.Context, in *DepositoPlacementRequest, opts ...grpc.CallOption) (*DepositoPlacementRespons, error) {
	out := new(DepositoPlacementRespons)
	err := c.cc.Invoke(ctx, "/deposito.service.v1.DepositoService/DepositoPlacement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DepositoServiceServer is the server API for DepositoService service.
// All implementations must embed UnimplementedDepositoServiceServer
// for forward compatibility
type DepositoServiceServer interface {
	CreateDepositoTask(context.Context, *CreateDepositoTaskRequest) (*CreateDepositoTaskResponse, error)
	SendForDepositoTask(context.Context, *GetDepositoTaskByIDRequest) (*GetDepositoTaskByIDResponse, error)
	DepositoActionTask(context.Context, *TaskActionRequest) (*TaskActionResponse, error)
	DepositoListTask(context.Context, *DepositoListTaskRequest) (*DepositoListTaskResponse, error)
	GetDepositoTaskByID(context.Context, *GetDepositoTaskByIDRequest) (*GetDepositoTaskByIDResponse, error)
	GetDepositoTaskByDepositoID(context.Context, *DepositoDataDetailRequest) (*GetDepositoTaskByIDResponse, error)
	DownloadDepositoListTask(context.Context, *FileTaskListRequest) (*httpbody.HttpBody, error)
	ListDeposito(context.Context, *DepositoDataListRequest) (*DepositoDataListResponse, error)
	DepositoDetail(context.Context, *DepositoDataDetailRequest) (*DepositoDataDetailResponse, error)
	CreateDeposito(context.Context, *CreateDepositoRequest) (*CreateDepositoResponse, error)
	DepositInquiryRate(context.Context, *DepositInquiryRateRequest) (*DepositInquiryRateRespons, error)
	DepositoMaintanance(context.Context, *DepositoMaintananceRequest) (*DepositoMaintananceRespons, error)
	DepositoCreateAccount(context.Context, *DepositoCreateAccountRequest) (*DepositoCreateAccountRespons, error)
	DepositoPlacement(context.Context, *DepositoPlacementRequest) (*DepositoPlacementRespons, error)
	mustEmbedUnimplementedDepositoServiceServer()
}

// UnimplementedDepositoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDepositoServiceServer struct {
}

func (UnimplementedDepositoServiceServer) CreateDepositoTask(context.Context, *CreateDepositoTaskRequest) (*CreateDepositoTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDepositoTask not implemented")
}
func (UnimplementedDepositoServiceServer) SendForDepositoTask(context.Context, *GetDepositoTaskByIDRequest) (*GetDepositoTaskByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendForDepositoTask not implemented")
}
func (UnimplementedDepositoServiceServer) DepositoActionTask(context.Context, *TaskActionRequest) (*TaskActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositoActionTask not implemented")
}
func (UnimplementedDepositoServiceServer) DepositoListTask(context.Context, *DepositoListTaskRequest) (*DepositoListTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositoListTask not implemented")
}
func (UnimplementedDepositoServiceServer) GetDepositoTaskByID(context.Context, *GetDepositoTaskByIDRequest) (*GetDepositoTaskByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepositoTaskByID not implemented")
}
func (UnimplementedDepositoServiceServer) GetDepositoTaskByDepositoID(context.Context, *DepositoDataDetailRequest) (*GetDepositoTaskByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepositoTaskByDepositoID not implemented")
}
func (UnimplementedDepositoServiceServer) DownloadDepositoListTask(context.Context, *FileTaskListRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadDepositoListTask not implemented")
}
func (UnimplementedDepositoServiceServer) ListDeposito(context.Context, *DepositoDataListRequest) (*DepositoDataListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeposito not implemented")
}
func (UnimplementedDepositoServiceServer) DepositoDetail(context.Context, *DepositoDataDetailRequest) (*DepositoDataDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositoDetail not implemented")
}
func (UnimplementedDepositoServiceServer) CreateDeposito(context.Context, *CreateDepositoRequest) (*CreateDepositoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeposito not implemented")
}
func (UnimplementedDepositoServiceServer) DepositInquiryRate(context.Context, *DepositInquiryRateRequest) (*DepositInquiryRateRespons, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositInquiryRate not implemented")
}
func (UnimplementedDepositoServiceServer) DepositoMaintanance(context.Context, *DepositoMaintananceRequest) (*DepositoMaintananceRespons, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositoMaintanance not implemented")
}
func (UnimplementedDepositoServiceServer) DepositoCreateAccount(context.Context, *DepositoCreateAccountRequest) (*DepositoCreateAccountRespons, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositoCreateAccount not implemented")
}
func (UnimplementedDepositoServiceServer) DepositoPlacement(context.Context, *DepositoPlacementRequest) (*DepositoPlacementRespons, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositoPlacement not implemented")
}
func (UnimplementedDepositoServiceServer) mustEmbedUnimplementedDepositoServiceServer() {}

// UnsafeDepositoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DepositoServiceServer will
// result in compilation errors.
type UnsafeDepositoServiceServer interface {
	mustEmbedUnimplementedDepositoServiceServer()
}

func RegisterDepositoServiceServer(s grpc.ServiceRegistrar, srv DepositoServiceServer) {
	s.RegisterService(&DepositoService_ServiceDesc, srv)
}

func _DepositoService_CreateDepositoTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDepositoTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositoServiceServer).CreateDepositoTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deposito.service.v1.DepositoService/CreateDepositoTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositoServiceServer).CreateDepositoTask(ctx, req.(*CreateDepositoTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositoService_SendForDepositoTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepositoTaskByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositoServiceServer).SendForDepositoTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deposito.service.v1.DepositoService/SendForDepositoTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositoServiceServer).SendForDepositoTask(ctx, req.(*GetDepositoTaskByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositoService_DepositoActionTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositoServiceServer).DepositoActionTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deposito.service.v1.DepositoService/DepositoActionTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositoServiceServer).DepositoActionTask(ctx, req.(*TaskActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositoService_DepositoListTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositoListTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositoServiceServer).DepositoListTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deposito.service.v1.DepositoService/DepositoListTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositoServiceServer).DepositoListTask(ctx, req.(*DepositoListTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositoService_GetDepositoTaskByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepositoTaskByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositoServiceServer).GetDepositoTaskByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deposito.service.v1.DepositoService/GetDepositoTaskByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositoServiceServer).GetDepositoTaskByID(ctx, req.(*GetDepositoTaskByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositoService_GetDepositoTaskByDepositoID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositoDataDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositoServiceServer).GetDepositoTaskByDepositoID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deposito.service.v1.DepositoService/GetDepositoTaskByDepositoID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositoServiceServer).GetDepositoTaskByDepositoID(ctx, req.(*DepositoDataDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositoService_DownloadDepositoListTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileTaskListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositoServiceServer).DownloadDepositoListTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deposito.service.v1.DepositoService/DownloadDepositoListTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositoServiceServer).DownloadDepositoListTask(ctx, req.(*FileTaskListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositoService_ListDeposito_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositoDataListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositoServiceServer).ListDeposito(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deposito.service.v1.DepositoService/ListDeposito",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositoServiceServer).ListDeposito(ctx, req.(*DepositoDataListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositoService_DepositoDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositoDataDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositoServiceServer).DepositoDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deposito.service.v1.DepositoService/DepositoDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositoServiceServer).DepositoDetail(ctx, req.(*DepositoDataDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositoService_CreateDeposito_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDepositoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositoServiceServer).CreateDeposito(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deposito.service.v1.DepositoService/createDeposito",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositoServiceServer).CreateDeposito(ctx, req.(*CreateDepositoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositoService_DepositInquiryRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositInquiryRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositoServiceServer).DepositInquiryRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deposito.service.v1.DepositoService/DepositInquiryRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositoServiceServer).DepositInquiryRate(ctx, req.(*DepositInquiryRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositoService_DepositoMaintanance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositoMaintananceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositoServiceServer).DepositoMaintanance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deposito.service.v1.DepositoService/DepositoMaintanance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositoServiceServer).DepositoMaintanance(ctx, req.(*DepositoMaintananceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositoService_DepositoCreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositoCreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositoServiceServer).DepositoCreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deposito.service.v1.DepositoService/DepositoCreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositoServiceServer).DepositoCreateAccount(ctx, req.(*DepositoCreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositoService_DepositoPlacement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositoPlacementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositoServiceServer).DepositoPlacement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deposito.service.v1.DepositoService/DepositoPlacement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositoServiceServer).DepositoPlacement(ctx, req.(*DepositoPlacementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DepositoService_ServiceDesc is the grpc.ServiceDesc for DepositoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DepositoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "deposito.service.v1.DepositoService",
	HandlerType: (*DepositoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDepositoTask",
			Handler:    _DepositoService_CreateDepositoTask_Handler,
		},
		{
			MethodName: "SendForDepositoTask",
			Handler:    _DepositoService_SendForDepositoTask_Handler,
		},
		{
			MethodName: "DepositoActionTask",
			Handler:    _DepositoService_DepositoActionTask_Handler,
		},
		{
			MethodName: "DepositoListTask",
			Handler:    _DepositoService_DepositoListTask_Handler,
		},
		{
			MethodName: "GetDepositoTaskByID",
			Handler:    _DepositoService_GetDepositoTaskByID_Handler,
		},
		{
			MethodName: "GetDepositoTaskByDepositoID",
			Handler:    _DepositoService_GetDepositoTaskByDepositoID_Handler,
		},
		{
			MethodName: "DownloadDepositoListTask",
			Handler:    _DepositoService_DownloadDepositoListTask_Handler,
		},
		{
			MethodName: "ListDeposito",
			Handler:    _DepositoService_ListDeposito_Handler,
		},
		{
			MethodName: "DepositoDetail",
			Handler:    _DepositoService_DepositoDetail_Handler,
		},
		{
			MethodName: "createDeposito",
			Handler:    _DepositoService_CreateDeposito_Handler,
		},
		{
			MethodName: "DepositInquiryRate",
			Handler:    _DepositoService_DepositInquiryRate_Handler,
		},
		{
			MethodName: "DepositoMaintanance",
			Handler:    _DepositoService_DepositoMaintanance_Handler,
		},
		{
			MethodName: "DepositoCreateAccount",
			Handler:    _DepositoService_DepositoCreateAccount_Handler,
		},
		{
			MethodName: "DepositoPlacement",
			Handler:    _DepositoService_DepositoPlacement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
