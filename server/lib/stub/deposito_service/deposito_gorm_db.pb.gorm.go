package pb

import (
	context "context"
	fmt "fmt"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	gorm "github.com/jinzhu/gorm"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	strings "strings"
	time "time"
)

type DepositoORM struct {
	AccInterestID    uint64
	AccNo_Deposito   string `gorm:"type:varchar(100)"`
	AccPrincipalID   uint64
	AccTDID          uint64
	Amount           string `gorm:"type:varchar(100)"`
	Code             string `gorm:"type:varchar(100)"`
	CompanyID        uint64
	CreatedAt        *time.Time
	CreatedById      uint64
	Currency         string `gorm:"type:varchar(100)"`
	DepositType      string `gorm:"type:varchar(100)"`
	DepositoID       uint64 `gorm:"primary_key;not null"`
	DepositoName     string `gorm:"type:varchar(100)"`
	InterestRate     string `gorm:"type:varchar(100)"`
	LastRenewalDate  *time.Time
	OpenDate         *time.Time
	Status           string
	Tenor            string `gorm:"type:varchar(100)"`
	TransactionSvcId uint64 `gorm:"default:0;not null"`
	UpdatedAt        *time.Time
	UpdatedById      uint64
	Voucher          string `gorm:"type:varchar(100)"`
	WithdrawAt       *time.Time
}

// TableName overrides the default tablename generated by GORM
func (DepositoORM) TableName() string {
	return "deposito"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Deposito) ToORM(ctx context.Context) (DepositoORM, error) {
	to := DepositoORM{}
	var err error
	if prehook, ok := interface{}(m).(DepositoWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.DepositoID = m.DepositoID
	to.CompanyID = m.CompanyID
	to.AccNo_Deposito = m.AccNo_Deposito
	to.AccTDID = m.AccTDID
	to.AccInterestID = m.AccInterestID
	to.AccPrincipalID = m.AccPrincipalID
	to.DepositoName = m.DepositoName
	to.DepositType = m.DepositType
	to.Tenor = m.Tenor
	to.Amount = m.Amount
	to.InterestRate = m.InterestRate
	to.Currency = m.Currency
	if m.WithdrawAt != nil {
		t := m.WithdrawAt.AsTime()
		to.WithdrawAt = &t
	}
	if m.OpenDate != nil {
		t := m.OpenDate.AsTime()
		to.OpenDate = &t
	}
	if m.LastRenewalDate != nil {
		t := m.LastRenewalDate.AsTime()
		to.LastRenewalDate = &t
	}
	to.Status = m.Status
	to.CreatedById = m.CreatedById
	to.UpdatedById = m.UpdatedById
	to.Code = m.Code
	to.Voucher = m.Voucher
	to.TransactionSvcId = m.TransactionSvcId
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	if posthook, ok := interface{}(m).(DepositoWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *DepositoORM) ToPB(ctx context.Context) (Deposito, error) {
	to := Deposito{}
	var err error
	if prehook, ok := interface{}(m).(DepositoWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.DepositoID = m.DepositoID
	to.CompanyID = m.CompanyID
	to.AccNo_Deposito = m.AccNo_Deposito
	to.AccTDID = m.AccTDID
	to.AccInterestID = m.AccInterestID
	to.AccPrincipalID = m.AccPrincipalID
	to.DepositoName = m.DepositoName
	to.DepositType = m.DepositType
	to.Tenor = m.Tenor
	to.Amount = m.Amount
	to.InterestRate = m.InterestRate
	to.Currency = m.Currency
	if m.WithdrawAt != nil {
		to.WithdrawAt = timestamppb.New(*m.WithdrawAt)
	}
	if m.OpenDate != nil {
		to.OpenDate = timestamppb.New(*m.OpenDate)
	}
	if m.LastRenewalDate != nil {
		to.LastRenewalDate = timestamppb.New(*m.LastRenewalDate)
	}
	to.Status = m.Status
	to.CreatedById = m.CreatedById
	to.UpdatedById = m.UpdatedById
	to.Code = m.Code
	to.Voucher = m.Voucher
	to.TransactionSvcId = m.TransactionSvcId
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	if posthook, ok := interface{}(m).(DepositoWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Deposito the arg will be the target, the caller the one being converted from

// DepositoBeforeToORM called before default ToORM code
type DepositoWithBeforeToORM interface {
	BeforeToORM(context.Context, *DepositoORM) error
}

// DepositoAfterToORM called after default ToORM code
type DepositoWithAfterToORM interface {
	AfterToORM(context.Context, *DepositoORM) error
}

// DepositoBeforeToPB called before default ToPB code
type DepositoWithBeforeToPB interface {
	BeforeToPB(context.Context, *Deposito) error
}

// DepositoAfterToPB called after default ToPB code
type DepositoWithAfterToPB interface {
	AfterToPB(context.Context, *Deposito) error
}

type Deposito_ProductORM struct {
	CreatedAt         *time.Time
	Currency          string `gorm:"type:varchar(50)"`
	DepositoProductID uint64 `gorm:"primary_key;not null"`
	ProductCode       string `gorm:"type:varchar(50)"`
	Tenor             string `gorm:"type:varchar(50)"`
	UpdatedAt         *time.Time
}

// TableName overrides the default tablename generated by GORM
func (Deposito_ProductORM) TableName() string {
	return "deposito_product"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Deposito_Product) ToORM(ctx context.Context) (Deposito_ProductORM, error) {
	to := Deposito_ProductORM{}
	var err error
	if prehook, ok := interface{}(m).(Deposito_ProductWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.DepositoProductID = m.DepositoProductID
	to.Tenor = m.Tenor
	to.Currency = m.Currency
	to.ProductCode = m.ProductCode
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	if posthook, ok := interface{}(m).(Deposito_ProductWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *Deposito_ProductORM) ToPB(ctx context.Context) (Deposito_Product, error) {
	to := Deposito_Product{}
	var err error
	if prehook, ok := interface{}(m).(Deposito_ProductWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.DepositoProductID = m.DepositoProductID
	to.Tenor = m.Tenor
	to.Currency = m.Currency
	to.ProductCode = m.ProductCode
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	if posthook, ok := interface{}(m).(Deposito_ProductWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Deposito_Product the arg will be the target, the caller the one being converted from

// Deposito_ProductBeforeToORM called before default ToORM code
type Deposito_ProductWithBeforeToORM interface {
	BeforeToORM(context.Context, *Deposito_ProductORM) error
}

// Deposito_ProductAfterToORM called after default ToORM code
type Deposito_ProductWithAfterToORM interface {
	AfterToORM(context.Context, *Deposito_ProductORM) error
}

// Deposito_ProductBeforeToPB called before default ToPB code
type Deposito_ProductWithBeforeToPB interface {
	BeforeToPB(context.Context, *Deposito_Product) error
}

// Deposito_ProductAfterToPB called after default ToPB code
type Deposito_ProductWithAfterToPB interface {
	AfterToPB(context.Context, *Deposito_Product) error
}

// DefaultCreateDeposito executes a basic gorm create call
func DefaultCreateDeposito(ctx context.Context, in *Deposito, db *gorm.DB) (*Deposito, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DepositoORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DepositoORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type DepositoORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DepositoORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadDeposito(ctx context.Context, in *Deposito, db *gorm.DB) (*Deposito, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.DepositoID == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(DepositoORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &DepositoORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DepositoORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := DepositoORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(DepositoORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type DepositoORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DepositoORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DepositoORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteDeposito(ctx context.Context, in *Deposito, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.DepositoID == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(DepositoORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&DepositoORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(DepositoORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type DepositoORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DepositoORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteDepositoSet(ctx context.Context, in []*Deposito, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []uint64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.DepositoID == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.DepositoID)
	}
	if hook, ok := (interface{}(&DepositoORM{})).(DepositoORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("deposito_id in (?)", keys).Delete(&DepositoORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&DepositoORM{})).(DepositoORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type DepositoORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Deposito, *gorm.DB) (*gorm.DB, error)
}
type DepositoORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Deposito, *gorm.DB) error
}

// DefaultStrictUpdateDeposito clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateDeposito(ctx context.Context, in *Deposito, db *gorm.DB) (*Deposito, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateDeposito")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &DepositoORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("deposito_id=?", ormObj.DepositoID).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(DepositoORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(DepositoORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DepositoORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type DepositoORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DepositoORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DepositoORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchDeposito executes a basic gorm update call with patch behavior
func DefaultPatchDeposito(ctx context.Context, in *Deposito, updateMask *field_mask.FieldMask, db *gorm.DB) (*Deposito, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Deposito
	var err error
	if hook, ok := interface{}(&pbObj).(DepositoWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&pbObj).(DepositoWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskDeposito(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(DepositoWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateDeposito(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(DepositoWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type DepositoWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Deposito, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type DepositoWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Deposito, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type DepositoWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Deposito, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type DepositoWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Deposito, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetDeposito executes a bulk gorm update call with patch behavior
func DefaultPatchSetDeposito(ctx context.Context, objects []*Deposito, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Deposito, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Deposito, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchDeposito(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskDeposito patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskDeposito(ctx context.Context, patchee *Deposito, patcher *Deposito, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Deposito, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedWithdrawAt bool
	var updatedOpenDate bool
	var updatedLastRenewalDate bool
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"DepositoID" {
			patchee.DepositoID = patcher.DepositoID
			continue
		}
		if f == prefix+"CompanyID" {
			patchee.CompanyID = patcher.CompanyID
			continue
		}
		if f == prefix+"AccNo_Deposito" {
			patchee.AccNo_Deposito = patcher.AccNo_Deposito
			continue
		}
		if f == prefix+"AccTDID" {
			patchee.AccTDID = patcher.AccTDID
			continue
		}
		if f == prefix+"AccInterestID" {
			patchee.AccInterestID = patcher.AccInterestID
			continue
		}
		if f == prefix+"AccPrincipalID" {
			patchee.AccPrincipalID = patcher.AccPrincipalID
			continue
		}
		if f == prefix+"DepositoName" {
			patchee.DepositoName = patcher.DepositoName
			continue
		}
		if f == prefix+"DepositType" {
			patchee.DepositType = patcher.DepositType
			continue
		}
		if f == prefix+"Tenor" {
			patchee.Tenor = patcher.Tenor
			continue
		}
		if f == prefix+"Amount" {
			patchee.Amount = patcher.Amount
			continue
		}
		if f == prefix+"InterestRate" {
			patchee.InterestRate = patcher.InterestRate
			continue
		}
		if f == prefix+"Currency" {
			patchee.Currency = patcher.Currency
			continue
		}
		if !updatedWithdrawAt && strings.HasPrefix(f, prefix+"WithdrawAt.") {
			if patcher.WithdrawAt == nil {
				patchee.WithdrawAt = nil
				continue
			}
			if patchee.WithdrawAt == nil {
				patchee.WithdrawAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"WithdrawAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.WithdrawAt, patchee.WithdrawAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"WithdrawAt" {
			updatedWithdrawAt = true
			patchee.WithdrawAt = patcher.WithdrawAt
			continue
		}
		if !updatedOpenDate && strings.HasPrefix(f, prefix+"OpenDate.") {
			if patcher.OpenDate == nil {
				patchee.OpenDate = nil
				continue
			}
			if patchee.OpenDate == nil {
				patchee.OpenDate = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"OpenDate."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.OpenDate, patchee.OpenDate, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"OpenDate" {
			updatedOpenDate = true
			patchee.OpenDate = patcher.OpenDate
			continue
		}
		if !updatedLastRenewalDate && strings.HasPrefix(f, prefix+"LastRenewalDate.") {
			if patcher.LastRenewalDate == nil {
				patchee.LastRenewalDate = nil
				continue
			}
			if patchee.LastRenewalDate == nil {
				patchee.LastRenewalDate = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"LastRenewalDate."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.LastRenewalDate, patchee.LastRenewalDate, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"LastRenewalDate" {
			updatedLastRenewalDate = true
			patchee.LastRenewalDate = patcher.LastRenewalDate
			continue
		}
		if f == prefix+"Status" {
			patchee.Status = patcher.Status
			continue
		}
		if f == prefix+"CreatedById" {
			patchee.CreatedById = patcher.CreatedById
			continue
		}
		if f == prefix+"UpdatedById" {
			patchee.UpdatedById = patcher.UpdatedById
			continue
		}
		if f == prefix+"Code" {
			patchee.Code = patcher.Code
			continue
		}
		if f == prefix+"Voucher" {
			patchee.Voucher = patcher.Voucher
			continue
		}
		if f == prefix+"TransactionSvcId" {
			patchee.TransactionSvcId = patcher.TransactionSvcId
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListDeposito executes a gorm list call
func DefaultListDeposito(ctx context.Context, db *gorm.DB) ([]*Deposito, error) {
	in := Deposito{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DepositoORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &DepositoORM{}, &Deposito{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DepositoORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("deposito_id")
	ormResponse := []DepositoORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DepositoORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Deposito{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type DepositoORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DepositoORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DepositoORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]DepositoORM) error
}

// DefaultCreateDeposito_Product executes a basic gorm create call
func DefaultCreateDeposito_Product(ctx context.Context, in *Deposito_Product, db *gorm.DB) (*Deposito_Product, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(Deposito_ProductORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(Deposito_ProductORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type Deposito_ProductORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type Deposito_ProductORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadDeposito_Product(ctx context.Context, in *Deposito_Product, db *gorm.DB) (*Deposito_Product, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.DepositoProductID == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(Deposito_ProductORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &Deposito_ProductORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(Deposito_ProductORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := Deposito_ProductORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(Deposito_ProductORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type Deposito_ProductORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type Deposito_ProductORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type Deposito_ProductORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteDeposito_Product(ctx context.Context, in *Deposito_Product, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.DepositoProductID == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(Deposito_ProductORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&Deposito_ProductORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(Deposito_ProductORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type Deposito_ProductORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type Deposito_ProductORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteDeposito_ProductSet(ctx context.Context, in []*Deposito_Product, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []uint64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.DepositoProductID == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.DepositoProductID)
	}
	if hook, ok := (interface{}(&Deposito_ProductORM{})).(Deposito_ProductORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("deposito_product_id in (?)", keys).Delete(&Deposito_ProductORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&Deposito_ProductORM{})).(Deposito_ProductORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type Deposito_ProductORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Deposito_Product, *gorm.DB) (*gorm.DB, error)
}
type Deposito_ProductORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Deposito_Product, *gorm.DB) error
}

// DefaultStrictUpdateDeposito_Product clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateDeposito_Product(ctx context.Context, in *Deposito_Product, db *gorm.DB) (*Deposito_Product, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateDeposito_Product")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &Deposito_ProductORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("deposito_product_id=?", ormObj.DepositoProductID).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(Deposito_ProductORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(Deposito_ProductORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(Deposito_ProductORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type Deposito_ProductORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type Deposito_ProductORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type Deposito_ProductORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchDeposito_Product executes a basic gorm update call with patch behavior
func DefaultPatchDeposito_Product(ctx context.Context, in *Deposito_Product, updateMask *field_mask.FieldMask, db *gorm.DB) (*Deposito_Product, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Deposito_Product
	var err error
	if hook, ok := interface{}(&pbObj).(Deposito_ProductWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&pbObj).(Deposito_ProductWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskDeposito_Product(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(Deposito_ProductWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateDeposito_Product(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(Deposito_ProductWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type Deposito_ProductWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Deposito_Product, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type Deposito_ProductWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Deposito_Product, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type Deposito_ProductWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Deposito_Product, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type Deposito_ProductWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Deposito_Product, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetDeposito_Product executes a bulk gorm update call with patch behavior
func DefaultPatchSetDeposito_Product(ctx context.Context, objects []*Deposito_Product, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Deposito_Product, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Deposito_Product, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchDeposito_Product(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskDeposito_Product patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskDeposito_Product(ctx context.Context, patchee *Deposito_Product, patcher *Deposito_Product, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Deposito_Product, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"DepositoProductID" {
			patchee.DepositoProductID = patcher.DepositoProductID
			continue
		}
		if f == prefix+"Tenor" {
			patchee.Tenor = patcher.Tenor
			continue
		}
		if f == prefix+"Currency" {
			patchee.Currency = patcher.Currency
			continue
		}
		if f == prefix+"ProductCode" {
			patchee.ProductCode = patcher.ProductCode
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListDeposito_Product executes a gorm list call
func DefaultListDeposito_Product(ctx context.Context, db *gorm.DB) ([]*Deposito_Product, error) {
	in := Deposito_Product{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(Deposito_ProductORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &Deposito_ProductORM{}, &Deposito_Product{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(Deposito_ProductORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("deposito_product_id")
	ormResponse := []Deposito_ProductORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(Deposito_ProductORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Deposito_Product{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type Deposito_ProductORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type Deposito_ProductORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type Deposito_ProductORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]Deposito_ProductORM) error
}
