// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.16.0
// source: menu.api.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiServiceClient is the client API for ApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiServiceClient interface {
	HealthCheck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	UpdateMenuAdmin(ctx context.Context, in *CommonResponse, opts ...grpc.CallOption) (*CommonResponse, error)
	ListMenuTask(ctx context.Context, in *ListMenuTaskRequest, opts ...grpc.CallOption) (*ListMenuResponse, error)
	CreateMenu(ctx context.Context, in *CreateMenuRequest, opts ...grpc.CallOption) (*CreateMenuResponse, error)
	CreateMenuTask(ctx context.Context, in *CreateMenuTaskRequest, opts ...grpc.CallOption) (*CreateMenuResponse, error)
	GetMenuTaskByID(ctx context.Context, in *GetByTaskID, opts ...grpc.CallOption) (*ListMenuResponse, error)
	ListMenu(ctx context.Context, in *ListMenuDataRequest, opts ...grpc.CallOption) (*ListMenuActiveResponse, error)
	ListModule(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListModuleResponse, error)
	ListMenuDisable(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListMenuDisableResponse, error)
	SetTaskMenuAppearance(ctx context.Context, in *SetTaskMenuAppearanceReq, opts ...grpc.CallOption) (*SetTaskMenuAppearanceRes, error)
	GetListTaskMenuAppearance(ctx context.Context, in *GetListTaskMenuAppearanceReq, opts ...grpc.CallOption) (*GetListTaskMenuAppearanceRes, error)
	GetTaskMenuAppearance(ctx context.Context, in *GetTaskMenuAppearanceReq, opts ...grpc.CallOption) (*GetTaskMenuAppearanceRes, error)
	SaveMenuAppearance(ctx context.Context, in *SaveMenuAppearanceReq, opts ...grpc.CallOption) (*SaveMenuAppearanceRes, error)
	GetMenuAppearance(ctx context.Context, in *GetMenuAppearanceReq, opts ...grpc.CallOption) (*GetMenuAppearanceRes, error)
	SetTaskMenuLicense(ctx context.Context, in *SetTaskMenuLicenseReq, opts ...grpc.CallOption) (*SetTaskMenuLicenseRes, error)
	SaveMenuLicense(ctx context.Context, in *SaveMenuLicenseReq, opts ...grpc.CallOption) (*SaveMenuLicenseRes, error)
}

type apiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiServiceClient(cc grpc.ClientConnInterface) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) HealthCheck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/menu.service.v1.ApiService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateMenuAdmin(ctx context.Context, in *CommonResponse, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/menu.service.v1.ApiService/UpdateMenuAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListMenuTask(ctx context.Context, in *ListMenuTaskRequest, opts ...grpc.CallOption) (*ListMenuResponse, error) {
	out := new(ListMenuResponse)
	err := c.cc.Invoke(ctx, "/menu.service.v1.ApiService/ListMenuTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateMenu(ctx context.Context, in *CreateMenuRequest, opts ...grpc.CallOption) (*CreateMenuResponse, error) {
	out := new(CreateMenuResponse)
	err := c.cc.Invoke(ctx, "/menu.service.v1.ApiService/CreateMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateMenuTask(ctx context.Context, in *CreateMenuTaskRequest, opts ...grpc.CallOption) (*CreateMenuResponse, error) {
	out := new(CreateMenuResponse)
	err := c.cc.Invoke(ctx, "/menu.service.v1.ApiService/CreateMenuTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetMenuTaskByID(ctx context.Context, in *GetByTaskID, opts ...grpc.CallOption) (*ListMenuResponse, error) {
	out := new(ListMenuResponse)
	err := c.cc.Invoke(ctx, "/menu.service.v1.ApiService/GetMenuTaskByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListMenu(ctx context.Context, in *ListMenuDataRequest, opts ...grpc.CallOption) (*ListMenuActiveResponse, error) {
	out := new(ListMenuActiveResponse)
	err := c.cc.Invoke(ctx, "/menu.service.v1.ApiService/ListMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListModule(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListModuleResponse, error) {
	out := new(ListModuleResponse)
	err := c.cc.Invoke(ctx, "/menu.service.v1.ApiService/ListModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListMenuDisable(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListMenuDisableResponse, error) {
	out := new(ListMenuDisableResponse)
	err := c.cc.Invoke(ctx, "/menu.service.v1.ApiService/ListMenuDisable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SetTaskMenuAppearance(ctx context.Context, in *SetTaskMenuAppearanceReq, opts ...grpc.CallOption) (*SetTaskMenuAppearanceRes, error) {
	out := new(SetTaskMenuAppearanceRes)
	err := c.cc.Invoke(ctx, "/menu.service.v1.ApiService/SetTaskMenuAppearance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetListTaskMenuAppearance(ctx context.Context, in *GetListTaskMenuAppearanceReq, opts ...grpc.CallOption) (*GetListTaskMenuAppearanceRes, error) {
	out := new(GetListTaskMenuAppearanceRes)
	err := c.cc.Invoke(ctx, "/menu.service.v1.ApiService/GetListTaskMenuAppearance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTaskMenuAppearance(ctx context.Context, in *GetTaskMenuAppearanceReq, opts ...grpc.CallOption) (*GetTaskMenuAppearanceRes, error) {
	out := new(GetTaskMenuAppearanceRes)
	err := c.cc.Invoke(ctx, "/menu.service.v1.ApiService/GetTaskMenuAppearance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SaveMenuAppearance(ctx context.Context, in *SaveMenuAppearanceReq, opts ...grpc.CallOption) (*SaveMenuAppearanceRes, error) {
	out := new(SaveMenuAppearanceRes)
	err := c.cc.Invoke(ctx, "/menu.service.v1.ApiService/SaveMenuAppearance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetMenuAppearance(ctx context.Context, in *GetMenuAppearanceReq, opts ...grpc.CallOption) (*GetMenuAppearanceRes, error) {
	out := new(GetMenuAppearanceRes)
	err := c.cc.Invoke(ctx, "/menu.service.v1.ApiService/GetMenuAppearance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SetTaskMenuLicense(ctx context.Context, in *SetTaskMenuLicenseReq, opts ...grpc.CallOption) (*SetTaskMenuLicenseRes, error) {
	out := new(SetTaskMenuLicenseRes)
	err := c.cc.Invoke(ctx, "/menu.service.v1.ApiService/SetTaskMenuLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SaveMenuLicense(ctx context.Context, in *SaveMenuLicenseReq, opts ...grpc.CallOption) (*SaveMenuLicenseRes, error) {
	out := new(SaveMenuLicenseRes)
	err := c.cc.Invoke(ctx, "/menu.service.v1.ApiService/SaveMenuLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServiceServer is the server API for ApiService service.
// All implementations must embed UnimplementedApiServiceServer
// for forward compatibility
type ApiServiceServer interface {
	HealthCheck(context.Context, *Empty) (*HealthCheckResponse, error)
	UpdateMenuAdmin(context.Context, *CommonResponse) (*CommonResponse, error)
	ListMenuTask(context.Context, *ListMenuTaskRequest) (*ListMenuResponse, error)
	CreateMenu(context.Context, *CreateMenuRequest) (*CreateMenuResponse, error)
	CreateMenuTask(context.Context, *CreateMenuTaskRequest) (*CreateMenuResponse, error)
	GetMenuTaskByID(context.Context, *GetByTaskID) (*ListMenuResponse, error)
	ListMenu(context.Context, *ListMenuDataRequest) (*ListMenuActiveResponse, error)
	ListModule(context.Context, *Empty) (*ListModuleResponse, error)
	ListMenuDisable(context.Context, *Empty) (*ListMenuDisableResponse, error)
	SetTaskMenuAppearance(context.Context, *SetTaskMenuAppearanceReq) (*SetTaskMenuAppearanceRes, error)
	GetListTaskMenuAppearance(context.Context, *GetListTaskMenuAppearanceReq) (*GetListTaskMenuAppearanceRes, error)
	GetTaskMenuAppearance(context.Context, *GetTaskMenuAppearanceReq) (*GetTaskMenuAppearanceRes, error)
	SaveMenuAppearance(context.Context, *SaveMenuAppearanceReq) (*SaveMenuAppearanceRes, error)
	GetMenuAppearance(context.Context, *GetMenuAppearanceReq) (*GetMenuAppearanceRes, error)
	SetTaskMenuLicense(context.Context, *SetTaskMenuLicenseReq) (*SetTaskMenuLicenseRes, error)
	SaveMenuLicense(context.Context, *SaveMenuLicenseReq) (*SaveMenuLicenseRes, error)
	mustEmbedUnimplementedApiServiceServer()
}

// UnimplementedApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApiServiceServer struct {
}

func (UnimplementedApiServiceServer) HealthCheck(context.Context, *Empty) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedApiServiceServer) UpdateMenuAdmin(context.Context, *CommonResponse) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenuAdmin not implemented")
}
func (UnimplementedApiServiceServer) ListMenuTask(context.Context, *ListMenuTaskRequest) (*ListMenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMenuTask not implemented")
}
func (UnimplementedApiServiceServer) CreateMenu(context.Context, *CreateMenuRequest) (*CreateMenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMenu not implemented")
}
func (UnimplementedApiServiceServer) CreateMenuTask(context.Context, *CreateMenuTaskRequest) (*CreateMenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMenuTask not implemented")
}
func (UnimplementedApiServiceServer) GetMenuTaskByID(context.Context, *GetByTaskID) (*ListMenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuTaskByID not implemented")
}
func (UnimplementedApiServiceServer) ListMenu(context.Context, *ListMenuDataRequest) (*ListMenuActiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMenu not implemented")
}
func (UnimplementedApiServiceServer) ListModule(context.Context, *Empty) (*ListModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModule not implemented")
}
func (UnimplementedApiServiceServer) ListMenuDisable(context.Context, *Empty) (*ListMenuDisableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMenuDisable not implemented")
}
func (UnimplementedApiServiceServer) SetTaskMenuAppearance(context.Context, *SetTaskMenuAppearanceReq) (*SetTaskMenuAppearanceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTaskMenuAppearance not implemented")
}
func (UnimplementedApiServiceServer) GetListTaskMenuAppearance(context.Context, *GetListTaskMenuAppearanceReq) (*GetListTaskMenuAppearanceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListTaskMenuAppearance not implemented")
}
func (UnimplementedApiServiceServer) GetTaskMenuAppearance(context.Context, *GetTaskMenuAppearanceReq) (*GetTaskMenuAppearanceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskMenuAppearance not implemented")
}
func (UnimplementedApiServiceServer) SaveMenuAppearance(context.Context, *SaveMenuAppearanceReq) (*SaveMenuAppearanceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveMenuAppearance not implemented")
}
func (UnimplementedApiServiceServer) GetMenuAppearance(context.Context, *GetMenuAppearanceReq) (*GetMenuAppearanceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuAppearance not implemented")
}
func (UnimplementedApiServiceServer) SetTaskMenuLicense(context.Context, *SetTaskMenuLicenseReq) (*SetTaskMenuLicenseRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTaskMenuLicense not implemented")
}
func (UnimplementedApiServiceServer) SaveMenuLicense(context.Context, *SaveMenuLicenseReq) (*SaveMenuLicenseRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveMenuLicense not implemented")
}
func (UnimplementedApiServiceServer) mustEmbedUnimplementedApiServiceServer() {}

// UnsafeApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServiceServer will
// result in compilation errors.
type UnsafeApiServiceServer interface {
	mustEmbedUnimplementedApiServiceServer()
}

func RegisterApiServiceServer(s grpc.ServiceRegistrar, srv ApiServiceServer) {
	s.RegisterService(&ApiService_ServiceDesc, srv)
}

func _ApiService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.service.v1.ApiService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).HealthCheck(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UpdateMenuAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UpdateMenuAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.service.v1.ApiService/UpdateMenuAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UpdateMenuAdmin(ctx, req.(*CommonResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListMenuTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMenuTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListMenuTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.service.v1.ApiService/ListMenuTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListMenuTask(ctx, req.(*ListMenuTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.service.v1.ApiService/CreateMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateMenu(ctx, req.(*CreateMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateMenuTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMenuTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateMenuTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.service.v1.ApiService/CreateMenuTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateMenuTask(ctx, req.(*CreateMenuTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetMenuTaskByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByTaskID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetMenuTaskByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.service.v1.ApiService/GetMenuTaskByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetMenuTaskByID(ctx, req.(*GetByTaskID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMenuDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.service.v1.ApiService/ListMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListMenu(ctx, req.(*ListMenuDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.service.v1.ApiService/ListModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListModule(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListMenuDisable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListMenuDisable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.service.v1.ApiService/ListMenuDisable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListMenuDisable(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SetTaskMenuAppearance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTaskMenuAppearanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SetTaskMenuAppearance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.service.v1.ApiService/SetTaskMenuAppearance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SetTaskMenuAppearance(ctx, req.(*SetTaskMenuAppearanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetListTaskMenuAppearance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListTaskMenuAppearanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetListTaskMenuAppearance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.service.v1.ApiService/GetListTaskMenuAppearance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetListTaskMenuAppearance(ctx, req.(*GetListTaskMenuAppearanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTaskMenuAppearance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskMenuAppearanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTaskMenuAppearance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.service.v1.ApiService/GetTaskMenuAppearance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTaskMenuAppearance(ctx, req.(*GetTaskMenuAppearanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SaveMenuAppearance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveMenuAppearanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SaveMenuAppearance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.service.v1.ApiService/SaveMenuAppearance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SaveMenuAppearance(ctx, req.(*SaveMenuAppearanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetMenuAppearance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMenuAppearanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetMenuAppearance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.service.v1.ApiService/GetMenuAppearance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetMenuAppearance(ctx, req.(*GetMenuAppearanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SetTaskMenuLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTaskMenuLicenseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SetTaskMenuLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.service.v1.ApiService/SetTaskMenuLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SetTaskMenuLicense(ctx, req.(*SetTaskMenuLicenseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SaveMenuLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveMenuLicenseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SaveMenuLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.service.v1.ApiService/SaveMenuLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SaveMenuLicense(ctx, req.(*SaveMenuLicenseReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiService_ServiceDesc is the grpc.ServiceDesc for ApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "menu.service.v1.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _ApiService_HealthCheck_Handler,
		},
		{
			MethodName: "UpdateMenuAdmin",
			Handler:    _ApiService_UpdateMenuAdmin_Handler,
		},
		{
			MethodName: "ListMenuTask",
			Handler:    _ApiService_ListMenuTask_Handler,
		},
		{
			MethodName: "CreateMenu",
			Handler:    _ApiService_CreateMenu_Handler,
		},
		{
			MethodName: "CreateMenuTask",
			Handler:    _ApiService_CreateMenuTask_Handler,
		},
		{
			MethodName: "GetMenuTaskByID",
			Handler:    _ApiService_GetMenuTaskByID_Handler,
		},
		{
			MethodName: "ListMenu",
			Handler:    _ApiService_ListMenu_Handler,
		},
		{
			MethodName: "ListModule",
			Handler:    _ApiService_ListModule_Handler,
		},
		{
			MethodName: "ListMenuDisable",
			Handler:    _ApiService_ListMenuDisable_Handler,
		},
		{
			MethodName: "SetTaskMenuAppearance",
			Handler:    _ApiService_SetTaskMenuAppearance_Handler,
		},
		{
			MethodName: "GetListTaskMenuAppearance",
			Handler:    _ApiService_GetListTaskMenuAppearance_Handler,
		},
		{
			MethodName: "GetTaskMenuAppearance",
			Handler:    _ApiService_GetTaskMenuAppearance_Handler,
		},
		{
			MethodName: "SaveMenuAppearance",
			Handler:    _ApiService_SaveMenuAppearance_Handler,
		},
		{
			MethodName: "GetMenuAppearance",
			Handler:    _ApiService_GetMenuAppearance_Handler,
		},
		{
			MethodName: "SetTaskMenuLicense",
			Handler:    _ApiService_SetTaskMenuLicense_Handler,
		},
		{
			MethodName: "SaveMenuLicense",
			Handler:    _ApiService_SaveMenuLicense_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "menu.api.proto",
}
