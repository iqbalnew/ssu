// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proxy_management_api.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiServiceClient is the client API for ApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiServiceClient interface {
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	GetTaskProxyManagement(ctx context.Context, in *GetTaskProxyManagementRequest, opts ...grpc.CallOption) (*GetTaskProxyManagementResponse, error)
	GetTaskProxyManagementDetail(ctx context.Context, in *GetTaskProxyManagementDetailRequest, opts ...grpc.CallOption) (*GetTaskProxyManagementDetailResponse, error)
	CreateTaskProxyManagementSingle(ctx context.Context, in *CreateTaskProxyManagementSingleRequest, opts ...grpc.CallOption) (*CreateTaskProxyManagementSingleResponse, error)
	SetActionTaskProxyManagement(ctx context.Context, in *SetTaskProxyManagementRequest, opts ...grpc.CallOption) (*SetTaskProxyManagementResponse, error)
}

type apiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiServiceClient(cc grpc.ClientConnInterface) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/proxy_management.service.v1.ApiService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTaskProxyManagement(ctx context.Context, in *GetTaskProxyManagementRequest, opts ...grpc.CallOption) (*GetTaskProxyManagementResponse, error) {
	out := new(GetTaskProxyManagementResponse)
	err := c.cc.Invoke(ctx, "/proxy_management.service.v1.ApiService/GetTaskProxyManagement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTaskProxyManagementDetail(ctx context.Context, in *GetTaskProxyManagementDetailRequest, opts ...grpc.CallOption) (*GetTaskProxyManagementDetailResponse, error) {
	out := new(GetTaskProxyManagementDetailResponse)
	err := c.cc.Invoke(ctx, "/proxy_management.service.v1.ApiService/GetTaskProxyManagementDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateTaskProxyManagementSingle(ctx context.Context, in *CreateTaskProxyManagementSingleRequest, opts ...grpc.CallOption) (*CreateTaskProxyManagementSingleResponse, error) {
	out := new(CreateTaskProxyManagementSingleResponse)
	err := c.cc.Invoke(ctx, "/proxy_management.service.v1.ApiService/CreateTaskProxyManagementSingle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SetActionTaskProxyManagement(ctx context.Context, in *SetTaskProxyManagementRequest, opts ...grpc.CallOption) (*SetTaskProxyManagementResponse, error) {
	out := new(SetTaskProxyManagementResponse)
	err := c.cc.Invoke(ctx, "/proxy_management.service.v1.ApiService/SetActionTaskProxyManagement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServiceServer is the server API for ApiService service.
// All implementations must embed UnimplementedApiServiceServer
// for forward compatibility
type ApiServiceServer interface {
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	GetTaskProxyManagement(context.Context, *GetTaskProxyManagementRequest) (*GetTaskProxyManagementResponse, error)
	GetTaskProxyManagementDetail(context.Context, *GetTaskProxyManagementDetailRequest) (*GetTaskProxyManagementDetailResponse, error)
	CreateTaskProxyManagementSingle(context.Context, *CreateTaskProxyManagementSingleRequest) (*CreateTaskProxyManagementSingleResponse, error)
	SetActionTaskProxyManagement(context.Context, *SetTaskProxyManagementRequest) (*SetTaskProxyManagementResponse, error)
	mustEmbedUnimplementedApiServiceServer()
}

// UnimplementedApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApiServiceServer struct {
}

func (UnimplementedApiServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedApiServiceServer) GetTaskProxyManagement(context.Context, *GetTaskProxyManagementRequest) (*GetTaskProxyManagementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskProxyManagement not implemented")
}
func (UnimplementedApiServiceServer) GetTaskProxyManagementDetail(context.Context, *GetTaskProxyManagementDetailRequest) (*GetTaskProxyManagementDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskProxyManagementDetail not implemented")
}
func (UnimplementedApiServiceServer) CreateTaskProxyManagementSingle(context.Context, *CreateTaskProxyManagementSingleRequest) (*CreateTaskProxyManagementSingleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskProxyManagementSingle not implemented")
}
func (UnimplementedApiServiceServer) SetActionTaskProxyManagement(context.Context, *SetTaskProxyManagementRequest) (*SetTaskProxyManagementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetActionTaskProxyManagement not implemented")
}
func (UnimplementedApiServiceServer) mustEmbedUnimplementedApiServiceServer() {}

// UnsafeApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServiceServer will
// result in compilation errors.
type UnsafeApiServiceServer interface {
	mustEmbedUnimplementedApiServiceServer()
}

func RegisterApiServiceServer(s grpc.ServiceRegistrar, srv ApiServiceServer) {
	s.RegisterService(&ApiService_ServiceDesc, srv)
}

func _ApiService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy_management.service.v1.ApiService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTaskProxyManagement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskProxyManagementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTaskProxyManagement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy_management.service.v1.ApiService/GetTaskProxyManagement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTaskProxyManagement(ctx, req.(*GetTaskProxyManagementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTaskProxyManagementDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskProxyManagementDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTaskProxyManagementDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy_management.service.v1.ApiService/GetTaskProxyManagementDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTaskProxyManagementDetail(ctx, req.(*GetTaskProxyManagementDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateTaskProxyManagementSingle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskProxyManagementSingleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateTaskProxyManagementSingle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy_management.service.v1.ApiService/CreateTaskProxyManagementSingle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateTaskProxyManagementSingle(ctx, req.(*CreateTaskProxyManagementSingleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SetActionTaskProxyManagement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTaskProxyManagementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SetActionTaskProxyManagement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy_management.service.v1.ApiService/SetActionTaskProxyManagement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SetActionTaskProxyManagement(ctx, req.(*SetTaskProxyManagementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiService_ServiceDesc is the grpc.ServiceDesc for ApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proxy_management.service.v1.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _ApiService_HealthCheck_Handler,
		},
		{
			MethodName: "GetTaskProxyManagement",
			Handler:    _ApiService_GetTaskProxyManagement_Handler,
		},
		{
			MethodName: "GetTaskProxyManagementDetail",
			Handler:    _ApiService_GetTaskProxyManagementDetail_Handler,
		},
		{
			MethodName: "CreateTaskProxyManagementSingle",
			Handler:    _ApiService_CreateTaskProxyManagementSingle_Handler,
		},
		{
			MethodName: "SetActionTaskProxyManagement",
			Handler:    _ApiService_SetActionTaskProxyManagement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proxy_management_api.proto",
}
