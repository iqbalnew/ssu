// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.6.1
// source: proxy_management_payload.proto

package pb

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProxyManagementData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReferenceNumber string                       `protobuf:"bytes,1,opt,name=referenceNumber,proto3" json:"referenceNumber,omitempty"`
	RegistrationId  string                       `protobuf:"bytes,2,opt,name=registrationId,proto3" json:"registrationId,omitempty"`
	AccountNumber   string                       `protobuf:"bytes,3,opt,name=accountNumber,proto3" json:"accountNumber,omitempty"`
	AccountType     ProxyManagementAccountType   `protobuf:"varint,4,opt,name=accountType,proto3,enum=proxy_management.service.v1.ProxyManagementAccountType" json:"accountType,omitempty"`
	AccountName     string                       `protobuf:"bytes,5,opt,name=accountName,proto3" json:"accountName,omitempty"`
	AccountStatus   ProxyManagementAccountStatus `protobuf:"varint,6,opt,name=accountStatus,proto3,enum=proxy_management.service.v1.ProxyManagementAccountStatus" json:"accountStatus,omitempty"`
	AccountCurrency string                       `protobuf:"bytes,7,opt,name=accountCurrency,proto3" json:"accountCurrency,omitempty"`
	Email           string                       `protobuf:"bytes,8,opt,name=email,proto3" json:"email,omitempty"`
	MobileNumber    string                       `protobuf:"bytes,9,opt,name=mobileNumber,proto3" json:"mobileNumber,omitempty"`
	ProxyType       ProxyManagementType          `protobuf:"varint,10,opt,name=proxyType,proto3,enum=proxy_management.service.v1.ProxyManagementType" json:"proxyType,omitempty"`
}

func (x *ProxyManagementData) Reset() {
	*x = ProxyManagementData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxy_management_payload_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyManagementData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyManagementData) ProtoMessage() {}

func (x *ProxyManagementData) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_management_payload_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyManagementData.ProtoReflect.Descriptor instead.
func (*ProxyManagementData) Descriptor() ([]byte, []int) {
	return file_proxy_management_payload_proto_rawDescGZIP(), []int{0}
}

func (x *ProxyManagementData) GetReferenceNumber() string {
	if x != nil {
		return x.ReferenceNumber
	}
	return ""
}

func (x *ProxyManagementData) GetRegistrationId() string {
	if x != nil {
		return x.RegistrationId
	}
	return ""
}

func (x *ProxyManagementData) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *ProxyManagementData) GetAccountType() ProxyManagementAccountType {
	if x != nil {
		return x.AccountType
	}
	return ProxyManagementAccountType_NullAccountType
}

func (x *ProxyManagementData) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *ProxyManagementData) GetAccountStatus() ProxyManagementAccountStatus {
	if x != nil {
		return x.AccountStatus
	}
	return ProxyManagementAccountStatus_NullAccountStatus
}

func (x *ProxyManagementData) GetAccountCurrency() string {
	if x != nil {
		return x.AccountCurrency
	}
	return ""
}

func (x *ProxyManagementData) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ProxyManagementData) GetMobileNumber() string {
	if x != nil {
		return x.MobileNumber
	}
	return ""
}

func (x *ProxyManagementData) GetProxyType() ProxyManagementType {
	if x != nil {
		return x.ProxyType
	}
	return ProxyManagementType_NullProxyManagementType
}

type TaskProxyManagementData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task     *Task                 `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	Data     *ProxyManagementData  `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Workflow *ValidateWorkflowData `protobuf:"bytes,3,opt,name=workflow,proto3" json:"workflow,omitempty"`
}

func (x *TaskProxyManagementData) Reset() {
	*x = TaskProxyManagementData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxy_management_payload_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskProxyManagementData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskProxyManagementData) ProtoMessage() {}

func (x *TaskProxyManagementData) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_management_payload_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskProxyManagementData.ProtoReflect.Descriptor instead.
func (*TaskProxyManagementData) Descriptor() ([]byte, []int) {
	return file_proxy_management_payload_proto_rawDescGZIP(), []int{1}
}

func (x *TaskProxyManagementData) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *TaskProxyManagementData) GetData() *ProxyManagementData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TaskProxyManagementData) GetWorkflow() *ValidateWorkflowData {
	if x != nil {
		return x.Workflow
	}
	return nil
}

type GetTaskProxyManagementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   TaskStatus `protobuf:"varint,1,opt,name=status,proto3,enum=proxy_management.service.v1.TaskStatus" json:"status,omitempty"`
	Step     TaskStep   `protobuf:"varint,2,opt,name=step,proto3,enum=proxy_management.service.v1.TaskStep" json:"step,omitempty"`
	Limit    int32      `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Page     int32      `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Sort     string     `protobuf:"bytes,5,opt,name=sort,proto3" json:"sort,omitempty"`
	Dir      Direction  `protobuf:"varint,6,opt,name=dir,proto3,enum=proxy_management.service.v1.Direction" json:"dir,omitempty"`
	Filter   string     `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty"`
	FilterOr string     `protobuf:"bytes,8,opt,name=filterOr,proto3" json:"filterOr,omitempty"`
	Query    string     `protobuf:"bytes,9,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *GetTaskProxyManagementRequest) Reset() {
	*x = GetTaskProxyManagementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxy_management_payload_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskProxyManagementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskProxyManagementRequest) ProtoMessage() {}

func (x *GetTaskProxyManagementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_management_payload_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskProxyManagementRequest.ProtoReflect.Descriptor instead.
func (*GetTaskProxyManagementRequest) Descriptor() ([]byte, []int) {
	return file_proxy_management_payload_proto_rawDescGZIP(), []int{2}
}

func (x *GetTaskProxyManagementRequest) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_AllStatus
}

func (x *GetTaskProxyManagementRequest) GetStep() TaskStep {
	if x != nil {
		return x.Step
	}
	return TaskStep_AllStep
}

func (x *GetTaskProxyManagementRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetTaskProxyManagementRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetTaskProxyManagementRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *GetTaskProxyManagementRequest) GetDir() Direction {
	if x != nil {
		return x.Dir
	}
	return Direction_DESC
}

func (x *GetTaskProxyManagementRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *GetTaskProxyManagementRequest) GetFilterOr() string {
	if x != nil {
		return x.FilterOr
	}
	return ""
}

func (x *GetTaskProxyManagementRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type GetTaskProxyManagementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      bool                       `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code       uint32                     `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message    string                     `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data       []*TaskProxyManagementData `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	Pagination *PaginationResponse        `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetTaskProxyManagementResponse) Reset() {
	*x = GetTaskProxyManagementResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxy_management_payload_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskProxyManagementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskProxyManagementResponse) ProtoMessage() {}

func (x *GetTaskProxyManagementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_management_payload_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskProxyManagementResponse.ProtoReflect.Descriptor instead.
func (*GetTaskProxyManagementResponse) Descriptor() ([]byte, []int) {
	return file_proxy_management_payload_proto_rawDescGZIP(), []int{3}
}

func (x *GetTaskProxyManagementResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *GetTaskProxyManagementResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetTaskProxyManagementResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetTaskProxyManagementResponse) GetData() []*TaskProxyManagementData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetTaskProxyManagementResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetTaskProxyManagementDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID uint64 `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
}

func (x *GetTaskProxyManagementDetailRequest) Reset() {
	*x = GetTaskProxyManagementDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxy_management_payload_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskProxyManagementDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskProxyManagementDetailRequest) ProtoMessage() {}

func (x *GetTaskProxyManagementDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_management_payload_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskProxyManagementDetailRequest.ProtoReflect.Descriptor instead.
func (*GetTaskProxyManagementDetailRequest) Descriptor() ([]byte, []int) {
	return file_proxy_management_payload_proto_rawDescGZIP(), []int{4}
}

func (x *GetTaskProxyManagementDetailRequest) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

type GetTaskProxyManagementDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool                     `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32                   `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string                   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *TaskProxyManagementData `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetTaskProxyManagementDetailResponse) Reset() {
	*x = GetTaskProxyManagementDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxy_management_payload_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskProxyManagementDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskProxyManagementDetailResponse) ProtoMessage() {}

func (x *GetTaskProxyManagementDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_management_payload_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskProxyManagementDetailResponse.ProtoReflect.Descriptor instead.
func (*GetTaskProxyManagementDetailResponse) Descriptor() ([]byte, []int) {
	return file_proxy_management_payload_proto_rawDescGZIP(), []int{5}
}

func (x *GetTaskProxyManagementDetailResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *GetTaskProxyManagementDetailResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetTaskProxyManagementDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetTaskProxyManagementDetailResponse) GetData() *TaskProxyManagementData {
	if x != nil {
		return x.Data
	}
	return nil
}

type SetTaskProxyManagementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID   uint64 `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Action   string `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	Comment  string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	Reasons  string `protobuf:"bytes,4,opt,name=reasons,proto3" json:"reasons,omitempty"`
	PassCode string `protobuf:"bytes,5,opt,name=passCode,proto3" json:"passCode,omitempty"`
}

func (x *SetTaskProxyManagementRequest) Reset() {
	*x = SetTaskProxyManagementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxy_management_payload_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTaskProxyManagementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTaskProxyManagementRequest) ProtoMessage() {}

func (x *SetTaskProxyManagementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_management_payload_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTaskProxyManagementRequest.ProtoReflect.Descriptor instead.
func (*SetTaskProxyManagementRequest) Descriptor() ([]byte, []int) {
	return file_proxy_management_payload_proto_rawDescGZIP(), []int{6}
}

func (x *SetTaskProxyManagementRequest) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *SetTaskProxyManagementRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *SetTaskProxyManagementRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *SetTaskProxyManagementRequest) GetReasons() string {
	if x != nil {
		return x.Reasons
	}
	return ""
}

func (x *SetTaskProxyManagementRequest) GetPassCode() string {
	if x != nil {
		return x.PassCode
	}
	return ""
}

type SetTaskProxyManagementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Task  `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SetTaskProxyManagementResponse) Reset() {
	*x = SetTaskProxyManagementResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxy_management_payload_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTaskProxyManagementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTaskProxyManagementResponse) ProtoMessage() {}

func (x *SetTaskProxyManagementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_management_payload_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTaskProxyManagementResponse.ProtoReflect.Descriptor instead.
func (*SetTaskProxyManagementResponse) Descriptor() ([]byte, []int) {
	return file_proxy_management_payload_proto_rawDescGZIP(), []int{7}
}

func (x *SetTaskProxyManagementResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *SetTaskProxyManagementResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SetTaskProxyManagementResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SetTaskProxyManagementResponse) GetData() *Task {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateTaskProxyManagementSingleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID   uint64               `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Data     *ProxyManagementData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	IsDraft  bool                 `protobuf:"varint,3,opt,name=isDraft,proto3" json:"isDraft,omitempty"`
	PassCode string               `protobuf:"bytes,4,opt,name=passCode,proto3" json:"passCode,omitempty"`
}

func (x *CreateTaskProxyManagementSingleRequest) Reset() {
	*x = CreateTaskProxyManagementSingleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxy_management_payload_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTaskProxyManagementSingleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskProxyManagementSingleRequest) ProtoMessage() {}

func (x *CreateTaskProxyManagementSingleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_management_payload_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskProxyManagementSingleRequest.ProtoReflect.Descriptor instead.
func (*CreateTaskProxyManagementSingleRequest) Descriptor() ([]byte, []int) {
	return file_proxy_management_payload_proto_rawDescGZIP(), []int{8}
}

func (x *CreateTaskProxyManagementSingleRequest) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *CreateTaskProxyManagementSingleRequest) GetData() *ProxyManagementData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CreateTaskProxyManagementSingleRequest) GetIsDraft() bool {
	if x != nil {
		return x.IsDraft
	}
	return false
}

func (x *CreateTaskProxyManagementSingleRequest) GetPassCode() string {
	if x != nil {
		return x.PassCode
	}
	return ""
}

type CreateTaskProxyManagementSingleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Task  `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateTaskProxyManagementSingleResponse) Reset() {
	*x = CreateTaskProxyManagementSingleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxy_management_payload_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTaskProxyManagementSingleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskProxyManagementSingleResponse) ProtoMessage() {}

func (x *CreateTaskProxyManagementSingleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_management_payload_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskProxyManagementSingleResponse.ProtoReflect.Descriptor instead.
func (*CreateTaskProxyManagementSingleResponse) Descriptor() ([]byte, []int) {
	return file_proxy_management_payload_proto_rawDescGZIP(), []int{9}
}

func (x *CreateTaskProxyManagementSingleResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *CreateTaskProxyManagementSingleResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateTaskProxyManagementSingleResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateTaskProxyManagementSingleResponse) GetData() *Task {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateProxyManagementTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID          uint64                `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Data            *ProxyManagementData  `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	CurrentWorkflow *ValidateWorkflowData `protobuf:"bytes,3,opt,name=currentWorkflow,proto3" json:"currentWorkflow,omitempty"`
}

func (x *CreateProxyManagementTransactionRequest) Reset() {
	*x = CreateProxyManagementTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxy_management_payload_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProxyManagementTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProxyManagementTransactionRequest) ProtoMessage() {}

func (x *CreateProxyManagementTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_management_payload_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProxyManagementTransactionRequest.ProtoReflect.Descriptor instead.
func (*CreateProxyManagementTransactionRequest) Descriptor() ([]byte, []int) {
	return file_proxy_management_payload_proto_rawDescGZIP(), []int{10}
}

func (x *CreateProxyManagementTransactionRequest) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *CreateProxyManagementTransactionRequest) GetData() *ProxyManagementData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CreateProxyManagementTransactionRequest) GetCurrentWorkflow() *ValidateWorkflowData {
	if x != nil {
		return x.CurrentWorkflow
	}
	return nil
}

type CreateProxyManagementTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateProxyManagementTransactionResponse) Reset() {
	*x = CreateProxyManagementTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxy_management_payload_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProxyManagementTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProxyManagementTransactionResponse) ProtoMessage() {}

func (x *CreateProxyManagementTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_management_payload_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProxyManagementTransactionResponse.ProtoReflect.Descriptor instead.
func (*CreateProxyManagementTransactionResponse) Descriptor() ([]byte, []int) {
	return file_proxy_management_payload_proto_rawDescGZIP(), []int{11}
}

func (x *CreateProxyManagementTransactionResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *CreateProxyManagementTransactionResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateProxyManagementTransactionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ExecProxyManagementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ExecProxyManagementRequest) Reset() {
	*x = ExecProxyManagementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxy_management_payload_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecProxyManagementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecProxyManagementRequest) ProtoMessage() {}

func (x *ExecProxyManagementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_management_payload_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecProxyManagementRequest.ProtoReflect.Descriptor instead.
func (*ExecProxyManagementRequest) Descriptor() ([]byte, []int) {
	return file_proxy_management_payload_proto_rawDescGZIP(), []int{12}
}

func (x *ExecProxyManagementRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ExecProxyManagementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error           bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code            uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message         string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	JournalSequence string `protobuf:"bytes,4,opt,name=journalSequence,proto3" json:"journalSequence,omitempty"`
	Status          string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"` // 1 | 2 | 3 | 4
	ResponseDetail  string `protobuf:"bytes,6,opt,name=responseDetail,proto3" json:"responseDetail,omitempty"`
}

func (x *ExecProxyManagementResponse) Reset() {
	*x = ExecProxyManagementResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxy_management_payload_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecProxyManagementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecProxyManagementResponse) ProtoMessage() {}

func (x *ExecProxyManagementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_management_payload_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecProxyManagementResponse.ProtoReflect.Descriptor instead.
func (*ExecProxyManagementResponse) Descriptor() ([]byte, []int) {
	return file_proxy_management_payload_proto_rawDescGZIP(), []int{13}
}

func (x *ExecProxyManagementResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *ExecProxyManagementResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ExecProxyManagementResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ExecProxyManagementResponse) GetJournalSequence() string {
	if x != nil {
		return x.JournalSequence
	}
	return ""
}

func (x *ExecProxyManagementResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ExecProxyManagementResponse) GetResponseDetail() string {
	if x != nil {
		return x.ResponseDetail
	}
	return ""
}

var File_proxy_management_payload_proto protoreflect.FileDescriptor

var file_proxy_management_payload_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1b, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x67, 0x6f, 0x72, 0x6d, 0x5f, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x72,
	0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2b, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9f,
	0x04, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x59,
	0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5f, 0x0a, 0x0d, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x22, 0x0a, 0x0c,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x4e, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x22, 0xe5, 0x01, 0x0a, 0x17, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x04,
	0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74,
	0x61, 0x73, 0x6b, 0x12, 0x44, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x08, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0xfb, 0x0e, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x65, 0x70,
	0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x54, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32, 0x39, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x70, 0x65, 0x72, 0x20, 0x70, 0x61, 0x67, 0x65, 0x2e,
	0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x27,
	0x2d, 0x31, 0x27, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x55, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x32,
	0x3c, 0x50, 0x61, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20,
	0x67, 0x65, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x27, 0x2d, 0x31, 0x27, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32, 0x19, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x64, 0x61,
	0x74, 0x61, 0x20, 0x62, 0x79, 0x20, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x20, 0x6e, 0x61, 0x6d,
	0x65, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x67, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x2d, 0x92, 0x41,
	0x2a, 0x32, 0x28, 0x53, 0x6f, 0x72, 0x74, 0x20, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20,
	0x41, 0x53, 0x43, 0x20, 0x6f, 0x72, 0x20, 0x44, 0x45, 0x53, 0x43, 0x52, 0x03, 0x64, 0x69, 0x72,
	0x12, 0x8e, 0x04, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0xf5, 0x03, 0x92, 0x41, 0xf1, 0x03, 0x32, 0xee, 0x03, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x20, 0x27, 0x41, 0x4e, 0x44, 0x27, 0x20, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20,
	0x0a, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x20, 0x5b, 0x6b, 0x65, 0x79, 0x3a, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x2c, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5d, 0x20,
	0x0a, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x3d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x3a, 0x31, 0x2c, 0x74, 0x79, 0x70, 0x65,
	0x3a, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x3d, 0x3e,
	0x20, 0x57, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x20, 0x3d,
	0x20, 0x31, 0x20, 0x41, 0x4e, 0x44, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x41,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x20, 0x0a, 0x20, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x0a, 0x20, 0x2d, 0x20,
	0x27, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27,
	0x6b, 0x65, 0x79, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d,
	0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d,
	0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x21,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x49,
	0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20,
	0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x3e, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20,
	0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3e, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x3c, 0x3d, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x3a,
	0x3e, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x2c, 0x6b, 0x65, 0x79, 0x32, 0x3a, 0x3c, 0x3d,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31,
	0x20, 0x3e, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x20, 0x41, 0x4e, 0x44, 0x20, 0x6b,
	0x65, 0x79, 0x32, 0x20, 0x3c, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x27, 0x20, 0x42,
	0x45, 0x54, 0x57, 0x45, 0x45, 0x4e, 0x20, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x20, 0x0a,
	0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b,
	0x65, 0x79, 0x31, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b,
	0x65, 0x79, 0x31, 0x2d, 0x3e, 0x3e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31,
	0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x91, 0x04, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x42, 0xf4, 0x03, 0x92, 0x41, 0xf0, 0x03, 0x32, 0xed, 0x03, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x20, 0x27, 0x4f, 0x52, 0x27, 0x20, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x20, 0x0a, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x20, 0x5b, 0x6b, 0x65, 0x79,
	0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2c, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5d, 0x20, 0x0a, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a, 0x20, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x3d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x3a, 0x31, 0x2c, 0x74, 0x79,
	0x70, 0x65, 0x3a, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20,
	0x3d, 0x3e, 0x20, 0x57, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64,
	0x20, 0x3d, 0x20, 0x31, 0x20, 0x41, 0x4e, 0x44, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x20,
	0x27, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x20, 0x0a,
	0x20, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x0a, 0x20,
	0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e,
	0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a,
	0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27,
	0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a,
	0x25, 0x21, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79,
	0x20, 0x49, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20,
	0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x3e, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3e, 0x3d, 0x20, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x3c, 0x3d, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3c, 0x3d,
	0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79,
	0x31, 0x3a, 0x3e, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x2c, 0x6b, 0x65, 0x79, 0x32, 0x3a,
	0x3c, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65,
	0x79, 0x31, 0x20, 0x3e, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x20, 0x41, 0x4e, 0x44,
	0x20, 0x6b, 0x65, 0x79, 0x32, 0x20, 0x3c, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x27,
	0x20, 0x42, 0x45, 0x54, 0x57, 0x45, 0x45, 0x4e, 0x20, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45,
	0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2e, 0x6e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x4b, 0x65, 0x79, 0x31, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20,
	0x27, 0x6b, 0x65, 0x79, 0x31, 0x2d, 0x3e, 0x3e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65,
	0x79, 0x31, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x4f, 0x72, 0x12, 0xee, 0x02, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0xd7, 0x02, 0x92, 0x41, 0xd3, 0x02, 0x32, 0xd0, 0x02, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x27, 0x4f, 0x52, 0x27, 0x20, 0x71, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x20, 0x0a, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x20, 0x5b, 0x6b, 0x65,
	0x79, 0x31, 0x2c, 0x6b, 0x65, 0x79, 0x32, 0x2c, 0x6b, 0x65, 0x79, 0x33, 0x3a, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5d, 0x20, 0x0a, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a, 0x20, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x3d, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x41,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x3d, 0x3e, 0x20, 0x57,
	0x68, 0x65, 0x72, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x41, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x20, 0x4f, 0x52, 0x20, 0x74, 0x79,
	0x70, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x27, 0x20, 0x0a, 0x20, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x3a, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x25, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x4c, 0x49,
	0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20,
	0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x21, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e,
	0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x49, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2e, 0x6e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27,
	0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2d, 0x3e, 0x3e, 0x6e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0xff, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x48, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4f, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3d, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x22, 0xb4, 0x01, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd5,
	0x01, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x4c, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0x92, 0x41, 0x31, 0x32, 0x2f, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x27, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x27,
	0x2c, 0x20, 0x27, 0x72, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x27, 0x2c, 0x20, 0x27, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x27, 0x2c, 0x20, 0x27, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x27, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x1e, 0x53, 0x65, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xbc, 0x01, 0x0a, 0x26, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x44, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x73, 0x44, 0x72, 0x61, 0x66, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x44, 0x72, 0x61, 0x66, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x27, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe4, 0x01, 0x0a, 0x27, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x44,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x5b, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x22, 0x6e, 0x0a, 0x28, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x2c, 0x0a, 0x1a, 0x45, 0x78, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xcb, 0x01, 0x0a, 0x1b, 0x45, 0x78, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6a, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x06, 0x5a,
	0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proxy_management_payload_proto_rawDescOnce sync.Once
	file_proxy_management_payload_proto_rawDescData = file_proxy_management_payload_proto_rawDesc
)

func file_proxy_management_payload_proto_rawDescGZIP() []byte {
	file_proxy_management_payload_proto_rawDescOnce.Do(func() {
		file_proxy_management_payload_proto_rawDescData = protoimpl.X.CompressGZIP(file_proxy_management_payload_proto_rawDescData)
	})
	return file_proxy_management_payload_proto_rawDescData
}

var file_proxy_management_payload_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_proxy_management_payload_proto_goTypes = []interface{}{
	(*ProxyManagementData)(nil),                      // 0: proxy_management.service.v1.ProxyManagementData
	(*TaskProxyManagementData)(nil),                  // 1: proxy_management.service.v1.TaskProxyManagementData
	(*GetTaskProxyManagementRequest)(nil),            // 2: proxy_management.service.v1.GetTaskProxyManagementRequest
	(*GetTaskProxyManagementResponse)(nil),           // 3: proxy_management.service.v1.GetTaskProxyManagementResponse
	(*GetTaskProxyManagementDetailRequest)(nil),      // 4: proxy_management.service.v1.GetTaskProxyManagementDetailRequest
	(*GetTaskProxyManagementDetailResponse)(nil),     // 5: proxy_management.service.v1.GetTaskProxyManagementDetailResponse
	(*SetTaskProxyManagementRequest)(nil),            // 6: proxy_management.service.v1.SetTaskProxyManagementRequest
	(*SetTaskProxyManagementResponse)(nil),           // 7: proxy_management.service.v1.SetTaskProxyManagementResponse
	(*CreateTaskProxyManagementSingleRequest)(nil),   // 8: proxy_management.service.v1.CreateTaskProxyManagementSingleRequest
	(*CreateTaskProxyManagementSingleResponse)(nil),  // 9: proxy_management.service.v1.CreateTaskProxyManagementSingleResponse
	(*CreateProxyManagementTransactionRequest)(nil),  // 10: proxy_management.service.v1.CreateProxyManagementTransactionRequest
	(*CreateProxyManagementTransactionResponse)(nil), // 11: proxy_management.service.v1.CreateProxyManagementTransactionResponse
	(*ExecProxyManagementRequest)(nil),               // 12: proxy_management.service.v1.ExecProxyManagementRequest
	(*ExecProxyManagementResponse)(nil),              // 13: proxy_management.service.v1.ExecProxyManagementResponse
	(ProxyManagementAccountType)(0),                  // 14: proxy_management.service.v1.ProxyManagementAccountType
	(ProxyManagementAccountStatus)(0),                // 15: proxy_management.service.v1.ProxyManagementAccountStatus
	(ProxyManagementType)(0),                         // 16: proxy_management.service.v1.ProxyManagementType
	(*Task)(nil),                                     // 17: proxy_management.service.v1.Task
	(*ValidateWorkflowData)(nil),                     // 18: proxy_management.service.v1.ValidateWorkflowData
	(TaskStatus)(0),                                  // 19: proxy_management.service.v1.TaskStatus
	(TaskStep)(0),                                    // 20: proxy_management.service.v1.TaskStep
	(Direction)(0),                                   // 21: proxy_management.service.v1.Direction
	(*PaginationResponse)(nil),                       // 22: proxy_management.service.v1.PaginationResponse
}
var file_proxy_management_payload_proto_depIdxs = []int32{
	14, // 0: proxy_management.service.v1.ProxyManagementData.accountType:type_name -> proxy_management.service.v1.ProxyManagementAccountType
	15, // 1: proxy_management.service.v1.ProxyManagementData.accountStatus:type_name -> proxy_management.service.v1.ProxyManagementAccountStatus
	16, // 2: proxy_management.service.v1.ProxyManagementData.proxyType:type_name -> proxy_management.service.v1.ProxyManagementType
	17, // 3: proxy_management.service.v1.TaskProxyManagementData.task:type_name -> proxy_management.service.v1.Task
	0,  // 4: proxy_management.service.v1.TaskProxyManagementData.data:type_name -> proxy_management.service.v1.ProxyManagementData
	18, // 5: proxy_management.service.v1.TaskProxyManagementData.workflow:type_name -> proxy_management.service.v1.ValidateWorkflowData
	19, // 6: proxy_management.service.v1.GetTaskProxyManagementRequest.status:type_name -> proxy_management.service.v1.TaskStatus
	20, // 7: proxy_management.service.v1.GetTaskProxyManagementRequest.step:type_name -> proxy_management.service.v1.TaskStep
	21, // 8: proxy_management.service.v1.GetTaskProxyManagementRequest.dir:type_name -> proxy_management.service.v1.Direction
	1,  // 9: proxy_management.service.v1.GetTaskProxyManagementResponse.data:type_name -> proxy_management.service.v1.TaskProxyManagementData
	22, // 10: proxy_management.service.v1.GetTaskProxyManagementResponse.pagination:type_name -> proxy_management.service.v1.PaginationResponse
	1,  // 11: proxy_management.service.v1.GetTaskProxyManagementDetailResponse.data:type_name -> proxy_management.service.v1.TaskProxyManagementData
	17, // 12: proxy_management.service.v1.SetTaskProxyManagementResponse.data:type_name -> proxy_management.service.v1.Task
	0,  // 13: proxy_management.service.v1.CreateTaskProxyManagementSingleRequest.data:type_name -> proxy_management.service.v1.ProxyManagementData
	17, // 14: proxy_management.service.v1.CreateTaskProxyManagementSingleResponse.data:type_name -> proxy_management.service.v1.Task
	0,  // 15: proxy_management.service.v1.CreateProxyManagementTransactionRequest.data:type_name -> proxy_management.service.v1.ProxyManagementData
	18, // 16: proxy_management.service.v1.CreateProxyManagementTransactionRequest.currentWorkflow:type_name -> proxy_management.service.v1.ValidateWorkflowData
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_proxy_management_payload_proto_init() }
func file_proxy_management_payload_proto_init() {
	if File_proxy_management_payload_proto != nil {
		return
	}
	file_proxy_management_gorm_db_proto_init()
	file_proxy_management_core_proto_init()
	file_proxy_management_core_payload_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proxy_management_payload_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyManagementData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxy_management_payload_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskProxyManagementData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxy_management_payload_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskProxyManagementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxy_management_payload_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskProxyManagementResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxy_management_payload_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskProxyManagementDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxy_management_payload_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskProxyManagementDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxy_management_payload_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTaskProxyManagementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxy_management_payload_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTaskProxyManagementResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxy_management_payload_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTaskProxyManagementSingleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxy_management_payload_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTaskProxyManagementSingleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxy_management_payload_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProxyManagementTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxy_management_payload_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProxyManagementTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxy_management_payload_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecProxyManagementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxy_management_payload_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecProxyManagementResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proxy_management_payload_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proxy_management_payload_proto_goTypes,
		DependencyIndexes: file_proxy_management_payload_proto_depIdxs,
		MessageInfos:      file_proxy_management_payload_proto_msgTypes,
	}.Build()
	File_proxy_management_payload_proto = out.File
	file_proxy_management_payload_proto_rawDesc = nil
	file_proxy_management_payload_proto_goTypes = nil
	file_proxy_management_payload_proto_depIdxs = nil
}
