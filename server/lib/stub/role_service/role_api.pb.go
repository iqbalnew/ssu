// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.16.1
// source: role_api.proto

package pb

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CheckRoleAvaibilityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleName string `protobuf:"bytes,1,opt,name=roleName,proto3" json:"roleName,omitempty"`
	TaskID   uint64 `protobuf:"varint,2,opt,name=taskID,proto3" json:"taskID,omitempty"`
}

func (x *CheckRoleAvaibilityRequest) Reset() {
	*x = CheckRoleAvaibilityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_role_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckRoleAvaibilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRoleAvaibilityRequest) ProtoMessage() {}

func (x *CheckRoleAvaibilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_role_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRoleAvaibilityRequest.ProtoReflect.Descriptor instead.
func (*CheckRoleAvaibilityRequest) Descriptor() ([]byte, []int) {
	return file_role_api_proto_rawDescGZIP(), []int{0}
}

func (x *CheckRoleAvaibilityRequest) GetRoleName() string {
	if x != nil {
		return x.RoleName
	}
	return ""
}

func (x *CheckRoleAvaibilityRequest) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

type CheckRoleAvaibilityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Available bool   `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"`
	Status    string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	TaskID    uint64 `protobuf:"varint,3,opt,name=taskID,proto3" json:"taskID,omitempty"`
}

func (x *CheckRoleAvaibilityResponse) Reset() {
	*x = CheckRoleAvaibilityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_role_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckRoleAvaibilityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRoleAvaibilityResponse) ProtoMessage() {}

func (x *CheckRoleAvaibilityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_role_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRoleAvaibilityResponse.ProtoReflect.Descriptor instead.
func (*CheckRoleAvaibilityResponse) Descriptor() ([]byte, []int) {
	return file_role_api_proto_rawDescGZIP(), []int{1}
}

func (x *CheckRoleAvaibilityResponse) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *CheckRoleAvaibilityResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CheckRoleAvaibilityResponse) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

var File_role_api_proto protoreflect.FileDescriptor

var file_role_api_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0f, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x74, 0x74, 0x70,
	0x62, 0x6f, 0x64, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x72, 0x6f, 0x6c, 0x65,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x50,
	0x0a, 0x1a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x76, 0x61, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0x22, 0x6b, 0x0a, 0x1b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x76, 0x61,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x32, 0xaa, 0x20,
	0x0a, 0x0a, 0x41, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9a, 0x01, 0x0a,
	0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x16, 0x2e, 0x72,
	0x6f, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x24, 0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x12, 0x12, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2f, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x92, 0x41, 0x32, 0x12, 0x0c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x20,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x1a, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x00, 0x12, 0x97, 0x01, 0x0a, 0x08, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x92, 0x41, 0x2d, 0x12, 0x0d, 0x47, 0x65, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74,
	0x20, 0x72, 0x6f, 0x6c, 0x65, 0x1a, 0x1a, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x67, 0x65, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x72, 0x6f, 0x6c,
	0x65, 0x62, 0x00, 0x12, 0xcc, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2a, 0x2e, 0x72, 0x6f, 0x6c,
	0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x5d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x2d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x92, 0x41, 0x39, 0x12, 0x13, 0x47, 0x65, 0x74, 0x20, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x1a, 0x20,
	0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x67, 0x65, 0x74,
	0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x62, 0x00, 0x12, 0xc6, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x29, 0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x6f, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x5a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x6f,
	0x6c, 0x65, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x92, 0x41, 0x37, 0x12, 0x12, 0x47, 0x65, 0x74, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x1a, 0x1f, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41,
	0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x67, 0x65, 0x74, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x62, 0x00, 0x12, 0xb2, 0x01, 0x0a, 0x0c,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x2e, 0x72,
	0x6f, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x55, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x15, 0x12, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x92, 0x41, 0x37, 0x12, 0x12, 0x47, 0x65, 0x74, 0x20, 0x6c,
	0x69, 0x73, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x1f, 0x54,
	0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x67, 0x65, 0x74, 0x20,
	0x6c, 0x69, 0x73, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x74, 0x79, 0x70, 0x65, 0x62, 0x00,
	0x12, 0xb2, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x24, 0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x55,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x6f, 0x6c,
	0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x72, 0x6f, 0x6c, 0x65, 0x92, 0x41, 0x37, 0x12, 0x12,
	0x47, 0x65, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x72, 0x6f,
	0x6c, 0x65, 0x1a, 0x1f, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x67, 0x65, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x72,
	0x6f, 0x6c, 0x65, 0x62, 0x00, 0x12, 0xb2, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x16, 0x2e,
	0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x22, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x6d, 0x65, 0x2f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x62, 0x79, 0x92, 0x41, 0x3e, 0x12, 0x1a, 0x47, 0x65,
	0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x1a, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41,
	0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x67, 0x65, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x12, 0xb6, 0x01, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x4d, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x16, 0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x72, 0x6f,
	0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x68, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1f, 0x12, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2f, 0x74, 0x61, 0x73,
	0x6b, 0x2f, 0x6d, 0x65, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x2d, 0x62, 0x79,
	0x92, 0x41, 0x40, 0x12, 0x1c, 0x47, 0x65, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x20, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x20, 0x74, 0x61, 0x73, 0x6b,
	0x73, 0x1a, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x67, 0x65, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x74,
	0x61, 0x73, 0x6b, 0x12, 0x55, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x22, 0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x22, 0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x72,
	0x6f, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0xd0, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2e, 0x2e,
	0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x6f, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x6f, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x2a, 0x17,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x7b,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x7d, 0x92, 0x41, 0x3c, 0x12, 0x18, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20,
	0x74, 0x61, 0x73, 0x6b, 0x1a, 0x1e, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20,
	0x74, 0x61, 0x73, 0x6b, 0x62, 0x00, 0x12, 0xd0, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x26, 0x2e, 0x72, 0x6f, 0x6c, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x31, 0x22, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2f, 0x74, 0x61,
	0x73, 0x6b, 0x3a, 0x01, 0x2a, 0x5a, 0x1c, 0x1a, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x6f,
	0x6c, 0x65, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x7d,
	0x3a, 0x01, 0x2a, 0x92, 0x41, 0x33, 0x12, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x72,
	0x6f, 0x6c, 0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x1a, 0x1d, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41,
	0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x72, 0x6f,
	0x6c, 0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x62, 0x00, 0x12, 0xcb, 0x01, 0x0a, 0x15, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x12, 0x2c, 0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48,
	0x74, 0x74, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x6e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12,
	0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f,
	0x66, 0x69, 0x6c, 0x65, 0x2f, 0x7b, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x7d, 0x92, 0x41, 0x43, 0x12, 0x18, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x6c,
	0x69, 0x73, 0x74, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x1a, 0x25,
	0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x73,
	0x20, 0x74, 0x61, 0x73, 0x6b, 0x62, 0x00, 0x12, 0x5d, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x6f, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f,
	0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x6f,
	0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x27,
	0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x73,
	0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x6f, 0x6c, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x67, 0x65, 0x74, 0x2f, 0x7b, 0x49, 0x44, 0x7d,
	0x92, 0x41, 0x02, 0x62, 0x00, 0x12, 0x5e, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xd8, 0x01, 0x0a, 0x16, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0x12, 0x2e, 0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x42, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x19, 0x12, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2f, 0x74, 0x61, 0x73,
	0x6b, 0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x7d, 0x92, 0x41, 0x43, 0x12, 0x18, 0x47,
	0x65, 0x74, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x20, 0x62, 0x79, 0x20,
	0x74, 0x61, 0x73, 0x6b, 0x20, 0x69, 0x64, 0x1a, 0x25, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50,
	0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x67, 0x65, 0x74, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x74,
	0x61, 0x73, 0x6b, 0x20, 0x62, 0x79, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x20, 0x69, 0x64, 0x62, 0x00,
	0x12, 0xdd, 0x01, 0x0a, 0x16, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x42, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x2e, 0x2e, 0x72, 0x6f,
	0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f,
	0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x52, 0x6f,
	0x6c, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x72, 0x6f,
	0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f,
	0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x72, 0x6f, 0x6c,
	0x65, 0x2f, 0x7b, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x44, 0x7d, 0x92, 0x41, 0x43, 0x12, 0x18, 0x47,
	0x65, 0x74, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x20, 0x62, 0x79, 0x20,
	0x72, 0x6f, 0x6c, 0x65, 0x20, 0x69, 0x64, 0x1a, 0x25, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50,
	0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x67, 0x65, 0x74, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x74,
	0x61, 0x73, 0x6b, 0x20, 0x62, 0x79, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x69, 0x64, 0x62, 0x00,
	0x12, 0xaf, 0x01, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x21, 0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0x58, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17,
	0x12, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x92, 0x41, 0x38, 0x12, 0x19, 0x47, 0x65, 0x74, 0x20,
	0x72, 0x6f, 0x6c, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0x19, 0x47, 0x65, 0x74, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x62, 0x00, 0x12, 0xe6, 0x01, 0x0a, 0x13, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x27, 0x2e, 0x72, 0x6f, 0x6c,
	0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x22, 0x7d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2f,
	0x72, 0x6f, 0x6c, 0x65, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2d, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x92, 0x41, 0x54, 0x12, 0x27, 0x47, 0x65, 0x74, 0x20, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x20, 0x77, 0x69,
	0x74, 0x68, 0x20, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x73,
	0x1a, 0x27, 0x47, 0x65, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x20,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x70, 0x61, 0x69, 0x72,
	0x69, 0x6e, 0x67, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x62, 0x00, 0x12, 0xc3, 0x01, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x4d, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x24, 0x2e, 0x72, 0x6f, 0x6c,
	0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x68, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12,
	0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f,
	0x6d, 0x65, 0x5a, 0x10, 0x12, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2f,
	0x74, 0x61, 0x73, 0x6b, 0x92, 0x41, 0x3a, 0x12, 0x16, 0x47, 0x65, 0x74, 0x20, 0x6c, 0x69, 0x73,
	0x74, 0x20, 0x6d, 0x79, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x1a,
	0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x67, 0x65,
	0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x20, 0x74, 0x61, 0x73,
	0x6b, 0x12, 0xd9, 0x01, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x6f, 0x6c, 0x65, 0x41,
	0x76, 0x61, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x2e, 0x72, 0x6f, 0x6c, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x76, 0x61, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x6f,
	0x6c, 0x65, 0x41, 0x76, 0x61, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x67, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2d, 0x72, 0x6f,
	0x6c, 0x65, 0x2d, 0x61, 0x76, 0x61, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x92, 0x41, 0x3d,
	0x12, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x61, 0x76, 0x61,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x22, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50,
	0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x72, 0x6f, 0x6c, 0x65,
	0x20, 0x61, 0x76, 0x61, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x62, 0x00, 0x12, 0x86, 0x01,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x49, 0x44, 0x79, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x27, 0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x49, 0x44, 0x79, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x72, 0x6f, 0x6c,
	0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x49, 0x44, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x13, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x92, 0x41, 0x02, 0x62, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x21, 0x2e, 0x72, 0x6f,
	0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x21,
	0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x72, 0x6f, 0x6c, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2d,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x92, 0x41, 0x02, 0x62, 0x00, 0x42, 0x72, 0x5a, 0x04, 0x2e, 0x2f,
	0x70, 0x62, 0x92, 0x41, 0x69, 0x5a, 0x59, 0x0a, 0x57, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65,
	0x72, 0x12, 0x4d, 0x08, 0x02, 0x12, 0x38, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2c, 0x20, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x3a,
	0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x20, 0x3c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3e, 0x1a,
	0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x02,
	0x62, 0x0c, 0x0a, 0x0a, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x00, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_role_api_proto_rawDescOnce sync.Once
	file_role_api_proto_rawDescData = file_role_api_proto_rawDesc
)

func file_role_api_proto_rawDescGZIP() []byte {
	file_role_api_proto_rawDescOnce.Do(func() {
		file_role_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_role_api_proto_rawDescData)
	})
	return file_role_api_proto_rawDescData
}

var file_role_api_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_role_api_proto_goTypes = []interface{}{
	(*CheckRoleAvaibilityRequest)(nil),    // 0: role.service.v1.CheckRoleAvaibilityRequest
	(*CheckRoleAvaibilityResponse)(nil),   // 1: role.service.v1.CheckRoleAvaibilityResponse
	(*Empty)(nil),                         // 2: role.service.v1.Empty
	(*ListRoleRequest)(nil),               // 3: role.service.v1.ListRoleRequest
	(*ListAuthorityLevelRequest)(nil),     // 4: role.service.v1.ListAuthorityLevelRequest
	(*ListRoleAuthorityRequest)(nil),      // 5: role.service.v1.ListRoleAuthorityRequest
	(*ListUserTypeRequest)(nil),           // 6: role.service.v1.ListUserTypeRequest
	(*ListUserRoleRequest)(nil),           // 7: role.service.v1.ListUserRoleRequest
	(*CreateRoleRequest)(nil),             // 8: role.service.v1.CreateRoleRequest
	(*RoleTaskDetailByTaskIDRequest)(nil), // 9: role.service.v1.RoleTaskDetailByTaskIDRequest
	(*CreateRoleTaskRequest)(nil),         // 10: role.service.v1.CreateRoleTaskRequest
	(*DownloadListRoleTaskRequest)(nil),   // 11: role.service.v1.DownloadListRoleTaskRequest
	(*ListRoleTaskRequest)(nil),           // 12: role.service.v1.ListRoleTaskRequest
	(*GetRoleUserByUserIDReq)(nil),        // 13: role.service.v1.GetRoleUserByUserIDReq
	(*AssignUserRolesRequest)(nil),        // 14: role.service.v1.AssignUserRolesRequest
	(*RoleTaskDetailByRoleIDRequest)(nil), // 15: role.service.v1.RoleTaskDetailByRoleIDRequest
	(*UserRoleCountReq)(nil),              // 16: role.service.v1.UserRoleCountReq
	(*RoleAuthorityLevelsReq)(nil),        // 17: role.service.v1.RoleAuthorityLevelsReq
	(*GetUsersIDyRoleRequest)(nil),        // 18: role.service.v1.GetUsersIDyRoleRequest
	(*CountUserRoleReq)(nil),              // 19: role.service.v1.CountUserRoleReq
	(*HealthCheckResponse)(nil),           // 20: role.service.v1.HealthCheckResponse
	(*ListRoleResponse)(nil),              // 21: role.service.v1.ListRoleResponse
	(*ListAuthorityLevelResponse)(nil),    // 22: role.service.v1.ListAuthorityLevelResponse
	(*ListRoleAuthorityResponse)(nil),     // 23: role.service.v1.ListRoleAuthorityResponse
	(*ListUserTypeResponse)(nil),          // 24: role.service.v1.ListUserTypeResponse
	(*ListUserRoleResponse)(nil),          // 25: role.service.v1.ListUserRoleResponse
	(*ArrayString)(nil),                   // 26: role.service.v1.ArrayString
	(*CreateRoleResponse)(nil),            // 27: role.service.v1.CreateRoleResponse
	(*RoleTaskDetailResponse)(nil),        // 28: role.service.v1.RoleTaskDetailResponse
	(*CreateRoleTaskResponse)(nil),        // 29: role.service.v1.CreateRoleTaskResponse
	(*httpbody.HttpBody)(nil),             // 30: google.api.HttpBody
	(*ListRoleTaskResponse)(nil),          // 31: role.service.v1.ListRoleTaskResponse
	(*GetRoleUserByUserIDRes)(nil),        // 32: role.service.v1.GetRoleUserByUserIDRes
	(*ErrorBodyResponse)(nil),             // 33: role.service.v1.errorBodyResponse
	(*UserRoleCountRes)(nil),              // 34: role.service.v1.UserRoleCountRes
	(*RoleAuthorityLevelsRes)(nil),        // 35: role.service.v1.RoleAuthorityLevelsRes
	(*GetUsersIDyRoleResponse)(nil),       // 36: role.service.v1.GetUsersIDyRoleResponse
	(*CountUserRoleRes)(nil),              // 37: role.service.v1.CountUserRoleRes
}
var file_role_api_proto_depIdxs = []int32{
	2,  // 0: role.service.v1.ApiService.HealthCheck:input_type -> role.service.v1.Empty
	3,  // 1: role.service.v1.ApiService.ListRole:input_type -> role.service.v1.ListRoleRequest
	4,  // 2: role.service.v1.ApiService.ListAuthorityLevel:input_type -> role.service.v1.ListAuthorityLevelRequest
	5,  // 3: role.service.v1.ApiService.ListRoleAuthority:input_type -> role.service.v1.ListRoleAuthorityRequest
	6,  // 4: role.service.v1.ApiService.ListUserType:input_type -> role.service.v1.ListUserTypeRequest
	7,  // 5: role.service.v1.ApiService.ListUserRole:input_type -> role.service.v1.ListUserRoleRequest
	2,  // 6: role.service.v1.ApiService.GetMyTasksCreatedBy:input_type -> role.service.v1.Empty
	2,  // 7: role.service.v1.ApiService.GetMyTasksApprovedBy:input_type -> role.service.v1.Empty
	8,  // 8: role.service.v1.ApiService.DeleteRole:input_type -> role.service.v1.CreateRoleRequest
	8,  // 9: role.service.v1.ApiService.CreateRole:input_type -> role.service.v1.CreateRoleRequest
	9,  // 10: role.service.v1.ApiService.RequestDeleteRoleTask:input_type -> role.service.v1.RoleTaskDetailByTaskIDRequest
	10, // 11: role.service.v1.ApiService.CreateRoleTask:input_type -> role.service.v1.CreateRoleTaskRequest
	11, // 12: role.service.v1.ApiService.DownloadListRoleTasks:input_type -> role.service.v1.DownloadListRoleTaskRequest
	12, // 13: role.service.v1.ApiService.ListRoleTask:input_type -> role.service.v1.ListRoleTaskRequest
	13, // 14: role.service.v1.ApiService.GetRoleUserByUserID:input_type -> role.service.v1.GetRoleUserByUserIDReq
	14, // 15: role.service.v1.ApiService.AssignUserRoles:input_type -> role.service.v1.AssignUserRolesRequest
	9,  // 16: role.service.v1.ApiService.RoleTaskDetailByTaskID:input_type -> role.service.v1.RoleTaskDetailByTaskIDRequest
	15, // 17: role.service.v1.ApiService.RoleTaskDetailByRoleID:input_type -> role.service.v1.RoleTaskDetailByRoleIDRequest
	16, // 18: role.service.v1.ApiService.UserRoleCount:input_type -> role.service.v1.UserRoleCountReq
	17, // 19: role.service.v1.ApiService.RoleAuthorityLevels:input_type -> role.service.v1.RoleAuthorityLevelsReq
	12, // 20: role.service.v1.ApiService.GetMyTasks:input_type -> role.service.v1.ListRoleTaskRequest
	0,  // 21: role.service.v1.ApiService.CheckRoleAvaibility:input_type -> role.service.v1.CheckRoleAvaibilityRequest
	18, // 22: role.service.v1.ApiService.GetUsersIDyRole:input_type -> role.service.v1.GetUsersIDyRoleRequest
	19, // 23: role.service.v1.ApiService.GetCountUserRole:input_type -> role.service.v1.CountUserRoleReq
	20, // 24: role.service.v1.ApiService.HealthCheck:output_type -> role.service.v1.HealthCheckResponse
	21, // 25: role.service.v1.ApiService.ListRole:output_type -> role.service.v1.ListRoleResponse
	22, // 26: role.service.v1.ApiService.ListAuthorityLevel:output_type -> role.service.v1.ListAuthorityLevelResponse
	23, // 27: role.service.v1.ApiService.ListRoleAuthority:output_type -> role.service.v1.ListRoleAuthorityResponse
	24, // 28: role.service.v1.ApiService.ListUserType:output_type -> role.service.v1.ListUserTypeResponse
	25, // 29: role.service.v1.ApiService.ListUserRole:output_type -> role.service.v1.ListUserRoleResponse
	26, // 30: role.service.v1.ApiService.GetMyTasksCreatedBy:output_type -> role.service.v1.ArrayString
	26, // 31: role.service.v1.ApiService.GetMyTasksApprovedBy:output_type -> role.service.v1.ArrayString
	27, // 32: role.service.v1.ApiService.DeleteRole:output_type -> role.service.v1.CreateRoleResponse
	27, // 33: role.service.v1.ApiService.CreateRole:output_type -> role.service.v1.CreateRoleResponse
	28, // 34: role.service.v1.ApiService.RequestDeleteRoleTask:output_type -> role.service.v1.RoleTaskDetailResponse
	29, // 35: role.service.v1.ApiService.CreateRoleTask:output_type -> role.service.v1.CreateRoleTaskResponse
	30, // 36: role.service.v1.ApiService.DownloadListRoleTasks:output_type -> google.api.HttpBody
	31, // 37: role.service.v1.ApiService.ListRoleTask:output_type -> role.service.v1.ListRoleTaskResponse
	32, // 38: role.service.v1.ApiService.GetRoleUserByUserID:output_type -> role.service.v1.GetRoleUserByUserIDRes
	33, // 39: role.service.v1.ApiService.AssignUserRoles:output_type -> role.service.v1.errorBodyResponse
	28, // 40: role.service.v1.ApiService.RoleTaskDetailByTaskID:output_type -> role.service.v1.RoleTaskDetailResponse
	28, // 41: role.service.v1.ApiService.RoleTaskDetailByRoleID:output_type -> role.service.v1.RoleTaskDetailResponse
	34, // 42: role.service.v1.ApiService.UserRoleCount:output_type -> role.service.v1.UserRoleCountRes
	35, // 43: role.service.v1.ApiService.RoleAuthorityLevels:output_type -> role.service.v1.RoleAuthorityLevelsRes
	31, // 44: role.service.v1.ApiService.GetMyTasks:output_type -> role.service.v1.ListRoleTaskResponse
	1,  // 45: role.service.v1.ApiService.CheckRoleAvaibility:output_type -> role.service.v1.CheckRoleAvaibilityResponse
	36, // 46: role.service.v1.ApiService.GetUsersIDyRole:output_type -> role.service.v1.GetUsersIDyRoleResponse
	37, // 47: role.service.v1.ApiService.GetCountUserRole:output_type -> role.service.v1.CountUserRoleRes
	24, // [24:48] is the sub-list for method output_type
	0,  // [0:24] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_role_api_proto_init() }
func file_role_api_proto_init() {
	if File_role_api_proto != nil {
		return
	}
	file_role_payload_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_role_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckRoleAvaibilityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_role_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckRoleAvaibilityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_role_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_role_api_proto_goTypes,
		DependencyIndexes: file_role_api_proto_depIdxs,
		MessageInfos:      file_role_api_proto_msgTypes,
	}.Build()
	File_role_api_proto = out.File
	file_role_api_proto_rawDesc = nil
	file_role_api_proto_goTypes = nil
	file_role_api_proto_depIdxs = nil
}
