package pb

import (
	context "context"
	fmt "fmt"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	gorm "github.com/jinzhu/gorm"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	strings "strings"
	time "time"
)

type RoleORM struct {
	CompanyID       uint64     `gorm:"column:CompanyID"`
	CreatedAt       *time.Time `gorm:"not null"`
	CreatedByID     uint64     `gorm:"column:CreatedByID"`
	DeletedAt       *time.Time
	DeletedByID     uint64              `gorm:"column:DeletedByID"`
	Description     string              `gorm:"column:Description;type:text;not null"`
	Name            string              `gorm:"column:Name;type:varchar(255);not null"`
	RoleAuthorities []*RoleAuthorityORM `gorm:"foreignkey:RoleID;association_foreignkey:RoleID;preload:true"`
	RoleID          uint64              `gorm:"column:RoleID;primary_key;not null;auto_increment"`
	UpdatedAt       *time.Time          `gorm:"not null"`
	UpdatedByID     uint64              `gorm:"column:UpdatedByID"`
	UserType        *UserTypeORM        `gorm:"foreignkey:UserTypeID;association_foreignkey:UserTypeID;preload:true"`
	UserTypeID      uint64              `gorm:"column:UserTypeID;not null"`
}

// TableName overrides the default tablename generated by GORM
func (RoleORM) TableName() string {
	return "roles"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Role) ToORM(ctx context.Context) (RoleORM, error) {
	to := RoleORM{}
	var err error
	if prehook, ok := interface{}(m).(RoleWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.RoleID = m.RoleID
	to.UserTypeID = m.UserTypeID
	if m.UserType != nil {
		tempUserType, err := m.UserType.ToORM(ctx)
		if err != nil {
			return to, err
		}
		to.UserType = &tempUserType
	}
	to.Name = m.Name
	to.Description = m.Description
	to.CompanyID = m.CompanyID
	to.CreatedByID = m.CreatedByID
	to.UpdatedByID = m.UpdatedByID
	to.DeletedByID = m.DeletedByID
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	if m.DeletedAt != nil {
		t := m.DeletedAt.AsTime()
		to.DeletedAt = &t
	}
	// Repeated type AccountID is not an ORMable message type
	for _, v := range m.RoleAuthorities {
		if v != nil {
			if tempRoleAuthorities, cErr := v.ToORM(ctx); cErr == nil {
				to.RoleAuthorities = append(to.RoleAuthorities, &tempRoleAuthorities)
			} else {
				return to, cErr
			}
		} else {
			to.RoleAuthorities = append(to.RoleAuthorities, nil)
		}
	}
	if posthook, ok := interface{}(m).(RoleWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *RoleORM) ToPB(ctx context.Context) (Role, error) {
	to := Role{}
	var err error
	if prehook, ok := interface{}(m).(RoleWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.RoleID = m.RoleID
	to.UserTypeID = m.UserTypeID
	if m.UserType != nil {
		tempUserType, err := m.UserType.ToPB(ctx)
		if err != nil {
			return to, err
		}
		to.UserType = &tempUserType
	}
	to.Name = m.Name
	to.Description = m.Description
	to.CompanyID = m.CompanyID
	to.CreatedByID = m.CreatedByID
	to.UpdatedByID = m.UpdatedByID
	to.DeletedByID = m.DeletedByID
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	if m.DeletedAt != nil {
		to.DeletedAt = timestamppb.New(*m.DeletedAt)
	}
	// Repeated type AccountID is not an ORMable message type
	for _, v := range m.RoleAuthorities {
		if v != nil {
			if tempRoleAuthorities, cErr := v.ToPB(ctx); cErr == nil {
				to.RoleAuthorities = append(to.RoleAuthorities, &tempRoleAuthorities)
			} else {
				return to, cErr
			}
		} else {
			to.RoleAuthorities = append(to.RoleAuthorities, nil)
		}
	}
	if posthook, ok := interface{}(m).(RoleWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Role the arg will be the target, the caller the one being converted from

// RoleBeforeToORM called before default ToORM code
type RoleWithBeforeToORM interface {
	BeforeToORM(context.Context, *RoleORM) error
}

// RoleAfterToORM called after default ToORM code
type RoleWithAfterToORM interface {
	AfterToORM(context.Context, *RoleORM) error
}

// RoleBeforeToPB called before default ToPB code
type RoleWithBeforeToPB interface {
	BeforeToPB(context.Context, *Role) error
}

// RoleAfterToPB called after default ToPB code
type RoleWithAfterToPB interface {
	AfterToPB(context.Context, *Role) error
}

type UserRoleORM struct {
	CreatedAt   *time.Time
	CreatedByID uint64 `gorm:"column:CreatedByID"`
	RoleID      uint64 `gorm:"column:RoleID;primary_key;not null"`
	UpdatedAt   *time.Time
	UpdatedByID uint64 `gorm:"column:UpdatedByID"`
	UserID      uint64 `gorm:"column:UserID;primary_key;not null"`
}

// TableName overrides the default tablename generated by GORM
func (UserRoleORM) TableName() string {
	return "user_roles"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *UserRole) ToORM(ctx context.Context) (UserRoleORM, error) {
	to := UserRoleORM{}
	var err error
	if prehook, ok := interface{}(m).(UserRoleWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.UserID = m.UserID
	to.RoleID = m.RoleID
	to.CreatedByID = m.CreatedByID
	to.UpdatedByID = m.UpdatedByID
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	if posthook, ok := interface{}(m).(UserRoleWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *UserRoleORM) ToPB(ctx context.Context) (UserRole, error) {
	to := UserRole{}
	var err error
	if prehook, ok := interface{}(m).(UserRoleWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.UserID = m.UserID
	to.RoleID = m.RoleID
	to.CreatedByID = m.CreatedByID
	to.UpdatedByID = m.UpdatedByID
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	if posthook, ok := interface{}(m).(UserRoleWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type UserRole the arg will be the target, the caller the one being converted from

// UserRoleBeforeToORM called before default ToORM code
type UserRoleWithBeforeToORM interface {
	BeforeToORM(context.Context, *UserRoleORM) error
}

// UserRoleAfterToORM called after default ToORM code
type UserRoleWithAfterToORM interface {
	AfterToORM(context.Context, *UserRoleORM) error
}

// UserRoleBeforeToPB called before default ToPB code
type UserRoleWithBeforeToPB interface {
	BeforeToPB(context.Context, *UserRole) error
}

// UserRoleAfterToPB called after default ToPB code
type UserRoleWithAfterToPB interface {
	AfterToPB(context.Context, *UserRole) error
}

type UserTypeORM struct {
	CreatedAt  *time.Time `gorm:"not null"`
	DeletedAt  *time.Time
	Name       string     `gorm:"column:Name;type:varchar(255);unique;not null"`
	UpdatedAt  *time.Time `gorm:"not null"`
	UserTypeID uint64     `gorm:"column:UserTypeID;primary_key;not null"`
}

// TableName overrides the default tablename generated by GORM
func (UserTypeORM) TableName() string {
	return "user_types"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *UserType) ToORM(ctx context.Context) (UserTypeORM, error) {
	to := UserTypeORM{}
	var err error
	if prehook, ok := interface{}(m).(UserTypeWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.UserTypeID = m.UserTypeID
	to.Name = m.Name
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	if m.DeletedAt != nil {
		t := m.DeletedAt.AsTime()
		to.DeletedAt = &t
	}
	if posthook, ok := interface{}(m).(UserTypeWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *UserTypeORM) ToPB(ctx context.Context) (UserType, error) {
	to := UserType{}
	var err error
	if prehook, ok := interface{}(m).(UserTypeWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.UserTypeID = m.UserTypeID
	to.Name = m.Name
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	if m.DeletedAt != nil {
		to.DeletedAt = timestamppb.New(*m.DeletedAt)
	}
	if posthook, ok := interface{}(m).(UserTypeWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type UserType the arg will be the target, the caller the one being converted from

// UserTypeBeforeToORM called before default ToORM code
type UserTypeWithBeforeToORM interface {
	BeforeToORM(context.Context, *UserTypeORM) error
}

// UserTypeAfterToORM called after default ToORM code
type UserTypeWithAfterToORM interface {
	AfterToORM(context.Context, *UserTypeORM) error
}

// UserTypeBeforeToPB called before default ToPB code
type UserTypeWithBeforeToPB interface {
	BeforeToPB(context.Context, *UserType) error
}

// UserTypeAfterToPB called after default ToPB code
type UserTypeWithAfterToPB interface {
	AfterToPB(context.Context, *UserType) error
}

type RoleAuthorityORM struct {
	AuthorityLevel   *AuthorityLevelORM `gorm:"foreignkey:AuthorityLevelID;association_foreignkey:AuthorityLevelID;preload:true"`
	AuthorityLevelID uint64             `gorm:"column:AuthorityLevelID;not null"`
	CreatedAt        *time.Time         `gorm:"not null"`
	CreatedByID      uint64             `gorm:"column:CreatedByID"`
	ProductID        uint64             `gorm:"column:ProductID"`
	RoleAuthorityID  uint64             `gorm:"column:RoleAuthorityID;primary_key;not null"`
	RoleID           uint64             `gorm:"column:RoleID;not null"`
	UpdatedAt        *time.Time         `gorm:"not null"`
	UpdatedByID      uint64             `gorm:"column:UpdatedByID"`
}

// TableName overrides the default tablename generated by GORM
func (RoleAuthorityORM) TableName() string {
	return "role_authorities"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *RoleAuthority) ToORM(ctx context.Context) (RoleAuthorityORM, error) {
	to := RoleAuthorityORM{}
	var err error
	if prehook, ok := interface{}(m).(RoleAuthorityWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.RoleAuthorityID = m.RoleAuthorityID
	to.RoleID = m.RoleID
	to.ProductID = m.ProductID
	to.AuthorityLevelID = m.AuthorityLevelID
	if m.AuthorityLevel != nil {
		tempAuthorityLevel, err := m.AuthorityLevel.ToORM(ctx)
		if err != nil {
			return to, err
		}
		to.AuthorityLevel = &tempAuthorityLevel
	}
	to.CreatedByID = m.CreatedByID
	to.UpdatedByID = m.UpdatedByID
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	if posthook, ok := interface{}(m).(RoleAuthorityWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *RoleAuthorityORM) ToPB(ctx context.Context) (RoleAuthority, error) {
	to := RoleAuthority{}
	var err error
	if prehook, ok := interface{}(m).(RoleAuthorityWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.RoleAuthorityID = m.RoleAuthorityID
	to.RoleID = m.RoleID
	to.ProductID = m.ProductID
	to.AuthorityLevelID = m.AuthorityLevelID
	if m.AuthorityLevel != nil {
		tempAuthorityLevel, err := m.AuthorityLevel.ToPB(ctx)
		if err != nil {
			return to, err
		}
		to.AuthorityLevel = &tempAuthorityLevel
	}
	to.CreatedByID = m.CreatedByID
	to.UpdatedByID = m.UpdatedByID
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	if posthook, ok := interface{}(m).(RoleAuthorityWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type RoleAuthority the arg will be the target, the caller the one being converted from

// RoleAuthorityBeforeToORM called before default ToORM code
type RoleAuthorityWithBeforeToORM interface {
	BeforeToORM(context.Context, *RoleAuthorityORM) error
}

// RoleAuthorityAfterToORM called after default ToORM code
type RoleAuthorityWithAfterToORM interface {
	AfterToORM(context.Context, *RoleAuthorityORM) error
}

// RoleAuthorityBeforeToPB called before default ToPB code
type RoleAuthorityWithBeforeToPB interface {
	BeforeToPB(context.Context, *RoleAuthority) error
}

// RoleAuthorityAfterToPB called after default ToPB code
type RoleAuthorityWithAfterToPB interface {
	AfterToPB(context.Context, *RoleAuthority) error
}

type AuthorityLevelORM struct {
	AuthorityLevelID uint64     `gorm:"column:AuthorityLevelID;primary_key;not null"`
	CreatedAt        *time.Time `gorm:"not null"`
	DeletedAt        *time.Time
	Name             string     `gorm:"column:Name;type:varchar(255);unique;not null"`
	Step             string     `gorm:"column:Step;type:varchar(255)"`
	UpdatedAt        *time.Time `gorm:"not null"`
}

// TableName overrides the default tablename generated by GORM
func (AuthorityLevelORM) TableName() string {
	return "authority_levels"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *AuthorityLevel) ToORM(ctx context.Context) (AuthorityLevelORM, error) {
	to := AuthorityLevelORM{}
	var err error
	if prehook, ok := interface{}(m).(AuthorityLevelWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.AuthorityLevelID = m.AuthorityLevelID
	to.Name = m.Name
	to.Step = m.Step
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	if m.DeletedAt != nil {
		t := m.DeletedAt.AsTime()
		to.DeletedAt = &t
	}
	if posthook, ok := interface{}(m).(AuthorityLevelWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *AuthorityLevelORM) ToPB(ctx context.Context) (AuthorityLevel, error) {
	to := AuthorityLevel{}
	var err error
	if prehook, ok := interface{}(m).(AuthorityLevelWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.AuthorityLevelID = m.AuthorityLevelID
	to.Name = m.Name
	to.Step = m.Step
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	if m.DeletedAt != nil {
		to.DeletedAt = timestamppb.New(*m.DeletedAt)
	}
	if posthook, ok := interface{}(m).(AuthorityLevelWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type AuthorityLevel the arg will be the target, the caller the one being converted from

// AuthorityLevelBeforeToORM called before default ToORM code
type AuthorityLevelWithBeforeToORM interface {
	BeforeToORM(context.Context, *AuthorityLevelORM) error
}

// AuthorityLevelAfterToORM called after default ToORM code
type AuthorityLevelWithAfterToORM interface {
	AfterToORM(context.Context, *AuthorityLevelORM) error
}

// AuthorityLevelBeforeToPB called before default ToPB code
type AuthorityLevelWithBeforeToPB interface {
	BeforeToPB(context.Context, *AuthorityLevel) error
}

// AuthorityLevelAfterToPB called after default ToPB code
type AuthorityLevelWithAfterToPB interface {
	AfterToPB(context.Context, *AuthorityLevel) error
}

// DefaultCreateRole executes a basic gorm create call
func DefaultCreateRole(ctx context.Context, in *Role, db *gorm.DB) (*Role, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RoleORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RoleORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type RoleORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RoleORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadRole(ctx context.Context, in *Role, db *gorm.DB) (*Role, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.RoleID == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(RoleORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &RoleORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RoleORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := RoleORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(RoleORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type RoleORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RoleORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RoleORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteRole(ctx context.Context, in *Role, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.RoleID == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(RoleORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&RoleORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(RoleORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type RoleORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RoleORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteRoleSet(ctx context.Context, in []*Role, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []uint64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.RoleID == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.RoleID)
	}
	if hook, ok := (interface{}(&RoleORM{})).(RoleORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("role_id in (?)", keys).Delete(&RoleORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&RoleORM{})).(RoleORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type RoleORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Role, *gorm.DB) (*gorm.DB, error)
}
type RoleORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Role, *gorm.DB) error
}

// DefaultStrictUpdateRole clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateRole(ctx context.Context, in *Role, db *gorm.DB) (*Role, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateRole")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &RoleORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("RoleID=?", ormObj.RoleID).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(RoleORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	filterRoleAuthorities := RoleAuthorityORM{}
	if ormObj.RoleID == 0 {
		return nil, errors.EmptyIdError
	}
	filterRoleAuthorities.RoleID = ormObj.RoleID
	if err = db.Where(filterRoleAuthorities).Delete(RoleAuthorityORM{}).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RoleORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RoleORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type RoleORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RoleORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RoleORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchRole executes a basic gorm update call with patch behavior
func DefaultPatchRole(ctx context.Context, in *Role, updateMask *field_mask.FieldMask, db *gorm.DB) (*Role, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Role
	var err error
	if hook, ok := interface{}(&pbObj).(RoleWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&pbObj).(RoleWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskRole(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(RoleWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateRole(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(RoleWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type RoleWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Role, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type RoleWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Role, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type RoleWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Role, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type RoleWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Role, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetRole executes a bulk gorm update call with patch behavior
func DefaultPatchSetRole(ctx context.Context, objects []*Role, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Role, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Role, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchRole(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskRole patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskRole(ctx context.Context, patchee *Role, patcher *Role, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Role, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedUserType bool
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	var updatedDeletedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"RoleID" {
			patchee.RoleID = patcher.RoleID
			continue
		}
		if f == prefix+"UserTypeID" {
			patchee.UserTypeID = patcher.UserTypeID
			continue
		}
		if !updatedUserType && strings.HasPrefix(f, prefix+"UserType.") {
			updatedUserType = true
			if patcher.UserType == nil {
				patchee.UserType = nil
				continue
			}
			if patchee.UserType == nil {
				patchee.UserType = &UserType{}
			}
			if o, err := DefaultApplyFieldMaskUserType(ctx, patchee.UserType, patcher.UserType, &field_mask.FieldMask{Paths: updateMask.Paths[i:]}, prefix+"UserType.", db); err != nil {
				return nil, err
			} else {
				patchee.UserType = o
			}
			continue
		}
		if f == prefix+"UserType" {
			updatedUserType = true
			patchee.UserType = patcher.UserType
			continue
		}
		if f == prefix+"Name" {
			patchee.Name = patcher.Name
			continue
		}
		if f == prefix+"Description" {
			patchee.Description = patcher.Description
			continue
		}
		if f == prefix+"CompanyID" {
			patchee.CompanyID = patcher.CompanyID
			continue
		}
		if f == prefix+"CreatedByID" {
			patchee.CreatedByID = patcher.CreatedByID
			continue
		}
		if f == prefix+"UpdatedByID" {
			patchee.UpdatedByID = patcher.UpdatedByID
			continue
		}
		if f == prefix+"DeletedByID" {
			patchee.DeletedByID = patcher.DeletedByID
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
		if !updatedDeletedAt && strings.HasPrefix(f, prefix+"DeletedAt.") {
			if patcher.DeletedAt == nil {
				patchee.DeletedAt = nil
				continue
			}
			if patchee.DeletedAt == nil {
				patchee.DeletedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"DeletedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.DeletedAt, patchee.DeletedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"DeletedAt" {
			updatedDeletedAt = true
			patchee.DeletedAt = patcher.DeletedAt
			continue
		}
		if f == prefix+"AccountID" {
			patchee.AccountID = patcher.AccountID
			continue
		}
		if f == prefix+"RoleAuthorities" {
			patchee.RoleAuthorities = patcher.RoleAuthorities
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListRole executes a gorm list call
func DefaultListRole(ctx context.Context, db *gorm.DB) ([]*Role, error) {
	in := Role{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RoleORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &RoleORM{}, &Role{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RoleORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("RoleID")
	ormResponse := []RoleORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RoleORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Role{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type RoleORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RoleORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RoleORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]RoleORM) error
}

// DefaultCreateUserRole executes a basic gorm create call
func DefaultCreateUserRole(ctx context.Context, in *UserRole, db *gorm.DB) (*UserRole, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(UserRoleORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(UserRoleORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type UserRoleORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type UserRoleORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadUserRole(ctx context.Context, in *UserRole, db *gorm.DB) (*UserRole, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.UserID == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(UserRoleORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &UserRoleORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(UserRoleORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := UserRoleORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(UserRoleORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type UserRoleORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type UserRoleORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type UserRoleORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteUserRole(ctx context.Context, in *UserRole, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.UserID == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(UserRoleORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&UserRoleORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(UserRoleORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type UserRoleORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type UserRoleORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteUserRoleSet(ctx context.Context, in []*UserRole, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []uint64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.UserID == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.UserID)
	}
	if hook, ok := (interface{}(&UserRoleORM{})).(UserRoleORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("user_id in (?)", keys).Delete(&UserRoleORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&UserRoleORM{})).(UserRoleORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type UserRoleORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*UserRole, *gorm.DB) (*gorm.DB, error)
}
type UserRoleORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*UserRole, *gorm.DB) error
}

// DefaultStrictUpdateUserRole clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateUserRole(ctx context.Context, in *UserRole, db *gorm.DB) (*UserRole, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateUserRole")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &UserRoleORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("UserID=?", ormObj.UserID).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(UserRoleORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(UserRoleORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(UserRoleORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type UserRoleORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type UserRoleORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type UserRoleORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchUserRole executes a basic gorm update call with patch behavior
func DefaultPatchUserRole(ctx context.Context, in *UserRole, updateMask *field_mask.FieldMask, db *gorm.DB) (*UserRole, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj UserRole
	var err error
	if hook, ok := interface{}(&pbObj).(UserRoleWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&pbObj).(UserRoleWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskUserRole(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(UserRoleWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateUserRole(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(UserRoleWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type UserRoleWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *UserRole, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type UserRoleWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *UserRole, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type UserRoleWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *UserRole, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type UserRoleWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *UserRole, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetUserRole executes a bulk gorm update call with patch behavior
func DefaultPatchSetUserRole(ctx context.Context, objects []*UserRole, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*UserRole, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*UserRole, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchUserRole(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskUserRole patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskUserRole(ctx context.Context, patchee *UserRole, patcher *UserRole, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*UserRole, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"UserID" {
			patchee.UserID = patcher.UserID
			continue
		}
		if f == prefix+"RoleID" {
			patchee.RoleID = patcher.RoleID
			continue
		}
		if f == prefix+"CreatedByID" {
			patchee.CreatedByID = patcher.CreatedByID
			continue
		}
		if f == prefix+"UpdatedByID" {
			patchee.UpdatedByID = patcher.UpdatedByID
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListUserRole executes a gorm list call
func DefaultListUserRole(ctx context.Context, db *gorm.DB) ([]*UserRole, error) {
	in := UserRole{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(UserRoleORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &UserRoleORM{}, &UserRole{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(UserRoleORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("UserID")
	ormResponse := []UserRoleORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(UserRoleORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*UserRole{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type UserRoleORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type UserRoleORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type UserRoleORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]UserRoleORM) error
}

// DefaultCreateUserType executes a basic gorm create call
func DefaultCreateUserType(ctx context.Context, in *UserType, db *gorm.DB) (*UserType, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(UserTypeORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(UserTypeORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type UserTypeORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type UserTypeORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadUserType(ctx context.Context, in *UserType, db *gorm.DB) (*UserType, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.UserTypeID == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(UserTypeORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &UserTypeORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(UserTypeORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := UserTypeORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(UserTypeORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type UserTypeORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type UserTypeORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type UserTypeORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteUserType(ctx context.Context, in *UserType, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.UserTypeID == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(UserTypeORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&UserTypeORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(UserTypeORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type UserTypeORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type UserTypeORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteUserTypeSet(ctx context.Context, in []*UserType, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []uint64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.UserTypeID == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.UserTypeID)
	}
	if hook, ok := (interface{}(&UserTypeORM{})).(UserTypeORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("user_type_id in (?)", keys).Delete(&UserTypeORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&UserTypeORM{})).(UserTypeORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type UserTypeORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*UserType, *gorm.DB) (*gorm.DB, error)
}
type UserTypeORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*UserType, *gorm.DB) error
}

// DefaultStrictUpdateUserType clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateUserType(ctx context.Context, in *UserType, db *gorm.DB) (*UserType, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateUserType")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &UserTypeORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("UserTypeID=?", ormObj.UserTypeID).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(UserTypeORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(UserTypeORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(UserTypeORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type UserTypeORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type UserTypeORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type UserTypeORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchUserType executes a basic gorm update call with patch behavior
func DefaultPatchUserType(ctx context.Context, in *UserType, updateMask *field_mask.FieldMask, db *gorm.DB) (*UserType, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj UserType
	var err error
	if hook, ok := interface{}(&pbObj).(UserTypeWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&pbObj).(UserTypeWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskUserType(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(UserTypeWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateUserType(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(UserTypeWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type UserTypeWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *UserType, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type UserTypeWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *UserType, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type UserTypeWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *UserType, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type UserTypeWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *UserType, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetUserType executes a bulk gorm update call with patch behavior
func DefaultPatchSetUserType(ctx context.Context, objects []*UserType, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*UserType, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*UserType, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchUserType(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskUserType patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskUserType(ctx context.Context, patchee *UserType, patcher *UserType, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*UserType, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	var updatedDeletedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"UserTypeID" {
			patchee.UserTypeID = patcher.UserTypeID
			continue
		}
		if f == prefix+"Name" {
			patchee.Name = patcher.Name
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
		if !updatedDeletedAt && strings.HasPrefix(f, prefix+"DeletedAt.") {
			if patcher.DeletedAt == nil {
				patchee.DeletedAt = nil
				continue
			}
			if patchee.DeletedAt == nil {
				patchee.DeletedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"DeletedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.DeletedAt, patchee.DeletedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"DeletedAt" {
			updatedDeletedAt = true
			patchee.DeletedAt = patcher.DeletedAt
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListUserType executes a gorm list call
func DefaultListUserType(ctx context.Context, db *gorm.DB) ([]*UserType, error) {
	in := UserType{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(UserTypeORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &UserTypeORM{}, &UserType{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(UserTypeORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("UserTypeID")
	ormResponse := []UserTypeORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(UserTypeORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*UserType{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type UserTypeORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type UserTypeORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type UserTypeORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]UserTypeORM) error
}

// DefaultCreateRoleAuthority executes a basic gorm create call
func DefaultCreateRoleAuthority(ctx context.Context, in *RoleAuthority, db *gorm.DB) (*RoleAuthority, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RoleAuthorityORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RoleAuthorityORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type RoleAuthorityORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RoleAuthorityORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadRoleAuthority(ctx context.Context, in *RoleAuthority, db *gorm.DB) (*RoleAuthority, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.RoleAuthorityID == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(RoleAuthorityORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &RoleAuthorityORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RoleAuthorityORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := RoleAuthorityORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(RoleAuthorityORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type RoleAuthorityORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RoleAuthorityORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RoleAuthorityORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteRoleAuthority(ctx context.Context, in *RoleAuthority, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.RoleAuthorityID == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(RoleAuthorityORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&RoleAuthorityORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(RoleAuthorityORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type RoleAuthorityORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RoleAuthorityORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteRoleAuthoritySet(ctx context.Context, in []*RoleAuthority, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []uint64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.RoleAuthorityID == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.RoleAuthorityID)
	}
	if hook, ok := (interface{}(&RoleAuthorityORM{})).(RoleAuthorityORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("role_authority_id in (?)", keys).Delete(&RoleAuthorityORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&RoleAuthorityORM{})).(RoleAuthorityORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type RoleAuthorityORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*RoleAuthority, *gorm.DB) (*gorm.DB, error)
}
type RoleAuthorityORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*RoleAuthority, *gorm.DB) error
}

// DefaultStrictUpdateRoleAuthority clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateRoleAuthority(ctx context.Context, in *RoleAuthority, db *gorm.DB) (*RoleAuthority, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateRoleAuthority")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &RoleAuthorityORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("RoleAuthorityID=?", ormObj.RoleAuthorityID).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(RoleAuthorityORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(RoleAuthorityORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RoleAuthorityORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type RoleAuthorityORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RoleAuthorityORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RoleAuthorityORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchRoleAuthority executes a basic gorm update call with patch behavior
func DefaultPatchRoleAuthority(ctx context.Context, in *RoleAuthority, updateMask *field_mask.FieldMask, db *gorm.DB) (*RoleAuthority, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj RoleAuthority
	var err error
	if hook, ok := interface{}(&pbObj).(RoleAuthorityWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&pbObj).(RoleAuthorityWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskRoleAuthority(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(RoleAuthorityWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateRoleAuthority(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(RoleAuthorityWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type RoleAuthorityWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *RoleAuthority, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type RoleAuthorityWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *RoleAuthority, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type RoleAuthorityWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *RoleAuthority, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type RoleAuthorityWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *RoleAuthority, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetRoleAuthority executes a bulk gorm update call with patch behavior
func DefaultPatchSetRoleAuthority(ctx context.Context, objects []*RoleAuthority, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*RoleAuthority, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*RoleAuthority, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchRoleAuthority(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskRoleAuthority patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskRoleAuthority(ctx context.Context, patchee *RoleAuthority, patcher *RoleAuthority, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*RoleAuthority, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedAuthorityLevel bool
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"RoleAuthorityID" {
			patchee.RoleAuthorityID = patcher.RoleAuthorityID
			continue
		}
		if f == prefix+"RoleID" {
			patchee.RoleID = patcher.RoleID
			continue
		}
		if f == prefix+"ProductID" {
			patchee.ProductID = patcher.ProductID
			continue
		}
		if f == prefix+"AuthorityLevelID" {
			patchee.AuthorityLevelID = patcher.AuthorityLevelID
			continue
		}
		if !updatedAuthorityLevel && strings.HasPrefix(f, prefix+"AuthorityLevel.") {
			updatedAuthorityLevel = true
			if patcher.AuthorityLevel == nil {
				patchee.AuthorityLevel = nil
				continue
			}
			if patchee.AuthorityLevel == nil {
				patchee.AuthorityLevel = &AuthorityLevel{}
			}
			if o, err := DefaultApplyFieldMaskAuthorityLevel(ctx, patchee.AuthorityLevel, patcher.AuthorityLevel, &field_mask.FieldMask{Paths: updateMask.Paths[i:]}, prefix+"AuthorityLevel.", db); err != nil {
				return nil, err
			} else {
				patchee.AuthorityLevel = o
			}
			continue
		}
		if f == prefix+"AuthorityLevel" {
			updatedAuthorityLevel = true
			patchee.AuthorityLevel = patcher.AuthorityLevel
			continue
		}
		if f == prefix+"CreatedByID" {
			patchee.CreatedByID = patcher.CreatedByID
			continue
		}
		if f == prefix+"UpdatedByID" {
			patchee.UpdatedByID = patcher.UpdatedByID
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListRoleAuthority executes a gorm list call
func DefaultListRoleAuthority(ctx context.Context, db *gorm.DB) ([]*RoleAuthority, error) {
	in := RoleAuthority{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RoleAuthorityORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &RoleAuthorityORM{}, &RoleAuthority{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RoleAuthorityORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("RoleAuthorityID")
	ormResponse := []RoleAuthorityORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RoleAuthorityORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*RoleAuthority{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type RoleAuthorityORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RoleAuthorityORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RoleAuthorityORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]RoleAuthorityORM) error
}

// DefaultCreateAuthorityLevel executes a basic gorm create call
func DefaultCreateAuthorityLevel(ctx context.Context, in *AuthorityLevel, db *gorm.DB) (*AuthorityLevel, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(AuthorityLevelORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(AuthorityLevelORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type AuthorityLevelORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type AuthorityLevelORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadAuthorityLevel(ctx context.Context, in *AuthorityLevel, db *gorm.DB) (*AuthorityLevel, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.AuthorityLevelID == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(AuthorityLevelORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &AuthorityLevelORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(AuthorityLevelORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := AuthorityLevelORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(AuthorityLevelORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type AuthorityLevelORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type AuthorityLevelORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type AuthorityLevelORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteAuthorityLevel(ctx context.Context, in *AuthorityLevel, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.AuthorityLevelID == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(AuthorityLevelORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&AuthorityLevelORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(AuthorityLevelORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type AuthorityLevelORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type AuthorityLevelORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteAuthorityLevelSet(ctx context.Context, in []*AuthorityLevel, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []uint64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.AuthorityLevelID == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.AuthorityLevelID)
	}
	if hook, ok := (interface{}(&AuthorityLevelORM{})).(AuthorityLevelORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("authority_level_id in (?)", keys).Delete(&AuthorityLevelORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&AuthorityLevelORM{})).(AuthorityLevelORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type AuthorityLevelORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*AuthorityLevel, *gorm.DB) (*gorm.DB, error)
}
type AuthorityLevelORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*AuthorityLevel, *gorm.DB) error
}

// DefaultStrictUpdateAuthorityLevel clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateAuthorityLevel(ctx context.Context, in *AuthorityLevel, db *gorm.DB) (*AuthorityLevel, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateAuthorityLevel")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &AuthorityLevelORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("AuthorityLevelID=?", ormObj.AuthorityLevelID).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(AuthorityLevelORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(AuthorityLevelORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(AuthorityLevelORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type AuthorityLevelORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type AuthorityLevelORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type AuthorityLevelORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchAuthorityLevel executes a basic gorm update call with patch behavior
func DefaultPatchAuthorityLevel(ctx context.Context, in *AuthorityLevel, updateMask *field_mask.FieldMask, db *gorm.DB) (*AuthorityLevel, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj AuthorityLevel
	var err error
	if hook, ok := interface{}(&pbObj).(AuthorityLevelWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&pbObj).(AuthorityLevelWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskAuthorityLevel(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(AuthorityLevelWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateAuthorityLevel(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(AuthorityLevelWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type AuthorityLevelWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *AuthorityLevel, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type AuthorityLevelWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *AuthorityLevel, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type AuthorityLevelWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *AuthorityLevel, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type AuthorityLevelWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *AuthorityLevel, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetAuthorityLevel executes a bulk gorm update call with patch behavior
func DefaultPatchSetAuthorityLevel(ctx context.Context, objects []*AuthorityLevel, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*AuthorityLevel, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*AuthorityLevel, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchAuthorityLevel(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskAuthorityLevel patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskAuthorityLevel(ctx context.Context, patchee *AuthorityLevel, patcher *AuthorityLevel, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*AuthorityLevel, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	var updatedDeletedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"AuthorityLevelID" {
			patchee.AuthorityLevelID = patcher.AuthorityLevelID
			continue
		}
		if f == prefix+"Name" {
			patchee.Name = patcher.Name
			continue
		}
		if f == prefix+"Step" {
			patchee.Step = patcher.Step
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
		if !updatedDeletedAt && strings.HasPrefix(f, prefix+"DeletedAt.") {
			if patcher.DeletedAt == nil {
				patchee.DeletedAt = nil
				continue
			}
			if patchee.DeletedAt == nil {
				patchee.DeletedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"DeletedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.DeletedAt, patchee.DeletedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"DeletedAt" {
			updatedDeletedAt = true
			patchee.DeletedAt = patcher.DeletedAt
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListAuthorityLevel executes a gorm list call
func DefaultListAuthorityLevel(ctx context.Context, db *gorm.DB) ([]*AuthorityLevel, error) {
	in := AuthorityLevel{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(AuthorityLevelORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &AuthorityLevelORM{}, &AuthorityLevel{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(AuthorityLevelORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("AuthorityLevelID")
	ormResponse := []AuthorityLevelORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(AuthorityLevelORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*AuthorityLevel{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type AuthorityLevelORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type AuthorityLevelORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type AuthorityLevelORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]AuthorityLevelORM) error
}
