// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: workflow_api.proto

package pb

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiServiceClient is the client API for ApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiServiceClient interface {
	HealthCheck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	ListWorkflow(ctx context.Context, in *ListWorkflowRequest, opts ...grpc.CallOption) (*ListWorkflowResponse, error)
	CreateWorkflowTask(ctx context.Context, in *CreateWorkflowTaskRequest, opts ...grpc.CallOption) (*CreateWorkflowTaskResponse, error)
	ListWorkflowTask(ctx context.Context, in *ListWorkflowTaskRequest, opts ...grpc.CallOption) (*ListWorkflowTaskResponse, error)
	DownloadListWorkflowTask(ctx context.Context, in *DownloadListWorkflowTaskRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	ValidateWorkflow(ctx context.Context, in *ValidateWorkflowRequest, opts ...grpc.CallOption) (*ValidateWorkflowResponse, error)
	GenerateWorkflow(ctx context.Context, in *GenerateWorkflowRequest, opts ...grpc.CallOption) (*ValidateWorkflowResponse, error)
}

type apiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiServiceClient(cc grpc.ClientConnInterface) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) HealthCheck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/workflow.service.v1.ApiService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListWorkflow(ctx context.Context, in *ListWorkflowRequest, opts ...grpc.CallOption) (*ListWorkflowResponse, error) {
	out := new(ListWorkflowResponse)
	err := c.cc.Invoke(ctx, "/workflow.service.v1.ApiService/ListWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateWorkflowTask(ctx context.Context, in *CreateWorkflowTaskRequest, opts ...grpc.CallOption) (*CreateWorkflowTaskResponse, error) {
	out := new(CreateWorkflowTaskResponse)
	err := c.cc.Invoke(ctx, "/workflow.service.v1.ApiService/CreateWorkflowTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListWorkflowTask(ctx context.Context, in *ListWorkflowTaskRequest, opts ...grpc.CallOption) (*ListWorkflowTaskResponse, error) {
	out := new(ListWorkflowTaskResponse)
	err := c.cc.Invoke(ctx, "/workflow.service.v1.ApiService/ListWorkflowTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DownloadListWorkflowTask(ctx context.Context, in *DownloadListWorkflowTaskRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/workflow.service.v1.ApiService/DownloadListWorkflowTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ValidateWorkflow(ctx context.Context, in *ValidateWorkflowRequest, opts ...grpc.CallOption) (*ValidateWorkflowResponse, error) {
	out := new(ValidateWorkflowResponse)
	err := c.cc.Invoke(ctx, "/workflow.service.v1.ApiService/ValidateWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GenerateWorkflow(ctx context.Context, in *GenerateWorkflowRequest, opts ...grpc.CallOption) (*ValidateWorkflowResponse, error) {
	out := new(ValidateWorkflowResponse)
	err := c.cc.Invoke(ctx, "/workflow.service.v1.ApiService/GenerateWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServiceServer is the server API for ApiService service.
// All implementations must embed UnimplementedApiServiceServer
// for forward compatibility
type ApiServiceServer interface {
	HealthCheck(context.Context, *Empty) (*HealthCheckResponse, error)
	ListWorkflow(context.Context, *ListWorkflowRequest) (*ListWorkflowResponse, error)
	CreateWorkflowTask(context.Context, *CreateWorkflowTaskRequest) (*CreateWorkflowTaskResponse, error)
	ListWorkflowTask(context.Context, *ListWorkflowTaskRequest) (*ListWorkflowTaskResponse, error)
	DownloadListWorkflowTask(context.Context, *DownloadListWorkflowTaskRequest) (*httpbody.HttpBody, error)
	ValidateWorkflow(context.Context, *ValidateWorkflowRequest) (*ValidateWorkflowResponse, error)
	GenerateWorkflow(context.Context, *GenerateWorkflowRequest) (*ValidateWorkflowResponse, error)
	mustEmbedUnimplementedApiServiceServer()
}

// UnimplementedApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApiServiceServer struct {
}

func (UnimplementedApiServiceServer) HealthCheck(context.Context, *Empty) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedApiServiceServer) ListWorkflow(context.Context, *ListWorkflowRequest) (*ListWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkflow not implemented")
}
func (UnimplementedApiServiceServer) CreateWorkflowTask(context.Context, *CreateWorkflowTaskRequest) (*CreateWorkflowTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkflowTask not implemented")
}
func (UnimplementedApiServiceServer) ListWorkflowTask(context.Context, *ListWorkflowTaskRequest) (*ListWorkflowTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkflowTask not implemented")
}
func (UnimplementedApiServiceServer) DownloadListWorkflowTask(context.Context, *DownloadListWorkflowTaskRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadListWorkflowTask not implemented")
}
func (UnimplementedApiServiceServer) ValidateWorkflow(context.Context, *ValidateWorkflowRequest) (*ValidateWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateWorkflow not implemented")
}
func (UnimplementedApiServiceServer) GenerateWorkflow(context.Context, *GenerateWorkflowRequest) (*ValidateWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateWorkflow not implemented")
}
func (UnimplementedApiServiceServer) mustEmbedUnimplementedApiServiceServer() {}

// UnsafeApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServiceServer will
// result in compilation errors.
type UnsafeApiServiceServer interface {
	mustEmbedUnimplementedApiServiceServer()
}

func RegisterApiServiceServer(s grpc.ServiceRegistrar, srv ApiServiceServer) {
	s.RegisterService(&ApiService_ServiceDesc, srv)
}

func _ApiService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.service.v1.ApiService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).HealthCheck(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.service.v1.ApiService/ListWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListWorkflow(ctx, req.(*ListWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateWorkflowTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkflowTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateWorkflowTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.service.v1.ApiService/CreateWorkflowTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateWorkflowTask(ctx, req.(*CreateWorkflowTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListWorkflowTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkflowTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListWorkflowTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.service.v1.ApiService/ListWorkflowTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListWorkflowTask(ctx, req.(*ListWorkflowTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DownloadListWorkflowTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadListWorkflowTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DownloadListWorkflowTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.service.v1.ApiService/DownloadListWorkflowTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DownloadListWorkflowTask(ctx, req.(*DownloadListWorkflowTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ValidateWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ValidateWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.service.v1.ApiService/ValidateWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ValidateWorkflow(ctx, req.(*ValidateWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GenerateWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GenerateWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.service.v1.ApiService/GenerateWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GenerateWorkflow(ctx, req.(*GenerateWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiService_ServiceDesc is the grpc.ServiceDesc for ApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workflow.service.v1.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _ApiService_HealthCheck_Handler,
		},
		{
			MethodName: "ListWorkflow",
			Handler:    _ApiService_ListWorkflow_Handler,
		},
		{
			MethodName: "CreateWorkflowTask",
			Handler:    _ApiService_CreateWorkflowTask_Handler,
		},
		{
			MethodName: "ListWorkflowTask",
			Handler:    _ApiService_ListWorkflowTask_Handler,
		},
		{
			MethodName: "DownloadListWorkflowTask",
			Handler:    _ApiService_DownloadListWorkflowTask_Handler,
		},
		{
			MethodName: "ValidateWorkflow",
			Handler:    _ApiService_ValidateWorkflow_Handler,
		},
		{
			MethodName: "GenerateWorkflow",
			Handler:    _ApiService_GenerateWorkflow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workflow_api.proto",
}
