// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.5
// source: transfer_gorm_db.proto

package pb

import (
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CurrencyType int32

const (
	CurrencyType_Debit  CurrencyType = 0
	CurrencyType_Credit CurrencyType = 1
)

// Enum value maps for CurrencyType.
var (
	CurrencyType_name = map[int32]string{
		0: "Debit",
		1: "Credit",
	}
	CurrencyType_value = map[string]int32{
		"Debit":  0,
		"Credit": 1,
	}
)

func (x CurrencyType) Enum() *CurrencyType {
	p := new(CurrencyType)
	*p = x
	return p
}

func (x CurrencyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CurrencyType) Descriptor() protoreflect.EnumDescriptor {
	return file_transfer_gorm_db_proto_enumTypes[0].Descriptor()
}

func (CurrencyType) Type() protoreflect.EnumType {
	return &file_transfer_gorm_db_proto_enumTypes[0]
}

func (x CurrencyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CurrencyType.Descriptor instead.
func (CurrencyType) EnumDescriptor() ([]byte, []int) {
	return file_transfer_gorm_db_proto_rawDescGZIP(), []int{0}
}

type Fee int32

const (
	Fee_OUR Fee = 0
	Fee_BEN Fee = 1
)

// Enum value maps for Fee.
var (
	Fee_name = map[int32]string{
		0: "OUR",
		1: "BEN",
	}
	Fee_value = map[string]int32{
		"OUR": 0,
		"BEN": 1,
	}
)

func (x Fee) Enum() *Fee {
	p := new(Fee)
	*p = x
	return p
}

func (x Fee) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Fee) Descriptor() protoreflect.EnumDescriptor {
	return file_transfer_gorm_db_proto_enumTypes[1].Descriptor()
}

func (Fee) Type() protoreflect.EnumType {
	return &file_transfer_gorm_db_proto_enumTypes[1]
}

func (x Fee) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Fee.Descriptor instead.
func (Fee) EnumDescriptor() ([]byte, []int) {
	return file_transfer_gorm_db_proto_rawDescGZIP(), []int{1}
}

type TransactionSchedule int32

const (
	TransactionSchedule_Immediate TransactionSchedule = 0
	TransactionSchedule_Scheduled TransactionSchedule = 1
	TransactionSchedule_Recurring TransactionSchedule = 2
)

// Enum value maps for TransactionSchedule.
var (
	TransactionSchedule_name = map[int32]string{
		0: "Immediate",
		1: "Scheduled",
		2: "Recurring",
	}
	TransactionSchedule_value = map[string]int32{
		"Immediate": 0,
		"Scheduled": 1,
		"Recurring": 2,
	}
)

func (x TransactionSchedule) Enum() *TransactionSchedule {
	p := new(TransactionSchedule)
	*p = x
	return p
}

func (x TransactionSchedule) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionSchedule) Descriptor() protoreflect.EnumDescriptor {
	return file_transfer_gorm_db_proto_enumTypes[2].Descriptor()
}

func (TransactionSchedule) Type() protoreflect.EnumType {
	return &file_transfer_gorm_db_proto_enumTypes[2]
}

func (x TransactionSchedule) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionSchedule.Descriptor instead.
func (TransactionSchedule) EnumDescriptor() ([]byte, []int) {
	return file_transfer_gorm_db_proto_rawDescGZIP(), []int{2}
}

type RecurringFrequency int32

const (
	RecurringFrequency_Daily   RecurringFrequency = 0
	RecurringFrequency_Monthly RecurringFrequency = 1
	RecurringFrequency_Date    RecurringFrequency = 2
)

// Enum value maps for RecurringFrequency.
var (
	RecurringFrequency_name = map[int32]string{
		0: "Daily",
		1: "Monthly",
		2: "Date",
	}
	RecurringFrequency_value = map[string]int32{
		"Daily":   0,
		"Monthly": 1,
		"Date":    2,
	}
)

func (x RecurringFrequency) Enum() *RecurringFrequency {
	p := new(RecurringFrequency)
	*p = x
	return p
}

func (x RecurringFrequency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecurringFrequency) Descriptor() protoreflect.EnumDescriptor {
	return file_transfer_gorm_db_proto_enumTypes[3].Descriptor()
}

func (RecurringFrequency) Type() protoreflect.EnumType {
	return &file_transfer_gorm_db_proto_enumTypes[3]
}

func (x RecurringFrequency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecurringFrequency.Descriptor instead.
func (RecurringFrequency) EnumDescriptor() ([]byte, []int) {
	return file_transfer_gorm_db_proto_rawDescGZIP(), []int{3}
}

type Currency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,51,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,52,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *Currency) Reset() {
	*x = Currency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_gorm_db_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Currency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency) ProtoMessage() {}

func (x *Currency) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_gorm_db_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency.ProtoReflect.Descriptor instead.
func (*Currency) Descriptor() ([]byte, []int) {
	return file_transfer_gorm_db_proto_rawDescGZIP(), []int{0}
}

func (x *Currency) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Currency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Currency) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Currency) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type TransferJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserID    uint64                 `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`
	TaskID    uint64                 `protobuf:"varint,3,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Data      string                 `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	RunAt     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=runAt,proto3" json:"runAt,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,51,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,52,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *TransferJob) Reset() {
	*x = TransferJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_gorm_db_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferJob) ProtoMessage() {}

func (x *TransferJob) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_gorm_db_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferJob.ProtoReflect.Descriptor instead.
func (*TransferJob) Descriptor() ([]byte, []int) {
	return file_transfer_gorm_db_proto_rawDescGZIP(), []int{1}
}

func (x *TransferJob) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TransferJob) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *TransferJob) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *TransferJob) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *TransferJob) GetRunAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RunAt
	}
	return nil
}

func (x *TransferJob) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TransferJob) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type InternalSingleTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SenderAccountNumber     string                 `protobuf:"bytes,2,opt,name=senderAccountNumber,proto3" json:"senderAccountNumber,omitempty"`
	SenderAccountCurrency   string                 `protobuf:"bytes,3,opt,name=senderAccountCurrency,proto3" json:"senderAccountCurrency,omitempty"`
	SenderAccountName       string                 `protobuf:"bytes,4,opt,name=senderAccountName,proto3" json:"senderAccountName,omitempty"`
	SenderAccountAlias      string                 `protobuf:"bytes,5,opt,name=senderAccountAlias,proto3" json:"senderAccountAlias,omitempty"`
	SenderAccountBalance    string                 `protobuf:"bytes,6,opt,name=senderAccountBalance,proto3" json:"senderAccountBalance,omitempty"`
	ReceiverAccountNumber   string                 `protobuf:"bytes,7,opt,name=receiverAccountNumber,proto3" json:"receiverAccountNumber,omitempty"`
	ReceiverAccountCurrency string                 `protobuf:"bytes,8,opt,name=receiverAccountCurrency,proto3" json:"receiverAccountCurrency,omitempty"`
	ReceiverAccountName     string                 `protobuf:"bytes,9,opt,name=receiverAccountName,proto3" json:"receiverAccountName,omitempty"`
	ReceiverAccountAlias    string                 `protobuf:"bytes,10,opt,name=receiverAccountAlias,proto3" json:"receiverAccountAlias,omitempty"`
	ReceiverAccountBalance  string                 `protobuf:"bytes,11,opt,name=receiverAccountBalance,proto3" json:"receiverAccountBalance,omitempty"`
	DealCode                string                 `protobuf:"bytes,12,opt,name=dealCode,proto3" json:"dealCode,omitempty"`
	Currency                CurrencyType           `protobuf:"varint,13,opt,name=currency,proto3,enum=transfer.service.v1.CurrencyType" json:"currency,omitempty"`
	Fee                     Fee                    `protobuf:"varint,14,opt,name=fee,proto3,enum=transfer.service.v1.Fee" json:"fee,omitempty"`
	Amount                  float64                `protobuf:"fixed64,15,opt,name=amount,proto3" json:"amount,omitempty"`
	TransactionSchedule     TransactionSchedule    `protobuf:"varint,16,opt,name=transactionSchedule,proto3,enum=transfer.service.v1.TransactionSchedule" json:"transactionSchedule,omitempty"`
	ScheduledDate           string                 `protobuf:"bytes,17,opt,name=scheduledDate,proto3" json:"scheduledDate,omitempty"`
	ScheduledTime           string                 `protobuf:"bytes,18,opt,name=scheduledTime,proto3" json:"scheduledTime,omitempty"`
	ExchangeRate            float64                `protobuf:"fixed64,19,opt,name=exchangeRate,proto3" json:"exchangeRate,omitempty"`
	ReceivedAmount          float64                `protobuf:"fixed64,20,opt,name=receivedAmount,proto3" json:"receivedAmount,omitempty"`
	ExchangeRateCurrency    string                 `protobuf:"bytes,21,opt,name=exchangeRateCurrency,proto3" json:"exchangeRateCurrency,omitempty"`
	RecurringFrequency      RecurringFrequency     `protobuf:"varint,22,opt,name=recurringFrequency,proto3,enum=transfer.service.v1.RecurringFrequency" json:"recurringFrequency,omitempty"`
	RecurringPeriodStart    *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=recurringPeriodStart,proto3" json:"recurringPeriodStart,omitempty"`
	RecurringPeriodEnd      *timestamppb.Timestamp `protobuf:"bytes,24,opt,name=recurringPeriodEnd,proto3" json:"recurringPeriodEnd,omitempty"`
	RecurringDay            string                 `protobuf:"bytes,25,opt,name=recurringDay,proto3" json:"recurringDay,omitempty"`
	RecurringDate           string                 `protobuf:"bytes,26,opt,name=recurringDate,proto3" json:"recurringDate,omitempty"`
	RecurringTime           string                 `protobuf:"bytes,27,opt,name=recurringTime,proto3" json:"recurringTime,omitempty"`
	Remark                  string                 `protobuf:"bytes,28,opt,name=remark,proto3" json:"remark,omitempty"`
	JournalSquence          string                 `protobuf:"bytes,29,opt,name=journalSquence,proto3" json:"journalSquence,omitempty"`
	Status                  string                 `protobuf:"bytes,30,opt,name=status,proto3" json:"status,omitempty"`
	StatusMessage           string                 `protobuf:"bytes,31,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
	FeeAmount               float64                `protobuf:"fixed64,32,opt,name=feeAmount,proto3" json:"feeAmount,omitempty"`
	ScheduledAt             *timestamppb.Timestamp `protobuf:"bytes,33,opt,name=scheduledAt,proto3" json:"scheduledAt,omitempty"`
	TransactionID           string                 `protobuf:"bytes,101,opt,name=transactionID,proto3" json:"transactionID,omitempty"`
	CreatedAt               *timestamppb.Timestamp `protobuf:"bytes,51,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt               *timestamppb.Timestamp `protobuf:"bytes,52,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *InternalSingleTemplate) Reset() {
	*x = InternalSingleTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_gorm_db_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalSingleTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalSingleTemplate) ProtoMessage() {}

func (x *InternalSingleTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_gorm_db_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalSingleTemplate.ProtoReflect.Descriptor instead.
func (*InternalSingleTemplate) Descriptor() ([]byte, []int) {
	return file_transfer_gorm_db_proto_rawDescGZIP(), []int{2}
}

func (x *InternalSingleTemplate) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InternalSingleTemplate) GetSenderAccountNumber() string {
	if x != nil {
		return x.SenderAccountNumber
	}
	return ""
}

func (x *InternalSingleTemplate) GetSenderAccountCurrency() string {
	if x != nil {
		return x.SenderAccountCurrency
	}
	return ""
}

func (x *InternalSingleTemplate) GetSenderAccountName() string {
	if x != nil {
		return x.SenderAccountName
	}
	return ""
}

func (x *InternalSingleTemplate) GetSenderAccountAlias() string {
	if x != nil {
		return x.SenderAccountAlias
	}
	return ""
}

func (x *InternalSingleTemplate) GetSenderAccountBalance() string {
	if x != nil {
		return x.SenderAccountBalance
	}
	return ""
}

func (x *InternalSingleTemplate) GetReceiverAccountNumber() string {
	if x != nil {
		return x.ReceiverAccountNumber
	}
	return ""
}

func (x *InternalSingleTemplate) GetReceiverAccountCurrency() string {
	if x != nil {
		return x.ReceiverAccountCurrency
	}
	return ""
}

func (x *InternalSingleTemplate) GetReceiverAccountName() string {
	if x != nil {
		return x.ReceiverAccountName
	}
	return ""
}

func (x *InternalSingleTemplate) GetReceiverAccountAlias() string {
	if x != nil {
		return x.ReceiverAccountAlias
	}
	return ""
}

func (x *InternalSingleTemplate) GetReceiverAccountBalance() string {
	if x != nil {
		return x.ReceiverAccountBalance
	}
	return ""
}

func (x *InternalSingleTemplate) GetDealCode() string {
	if x != nil {
		return x.DealCode
	}
	return ""
}

func (x *InternalSingleTemplate) GetCurrency() CurrencyType {
	if x != nil {
		return x.Currency
	}
	return CurrencyType_Debit
}

func (x *InternalSingleTemplate) GetFee() Fee {
	if x != nil {
		return x.Fee
	}
	return Fee_OUR
}

func (x *InternalSingleTemplate) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *InternalSingleTemplate) GetTransactionSchedule() TransactionSchedule {
	if x != nil {
		return x.TransactionSchedule
	}
	return TransactionSchedule_Immediate
}

func (x *InternalSingleTemplate) GetScheduledDate() string {
	if x != nil {
		return x.ScheduledDate
	}
	return ""
}

func (x *InternalSingleTemplate) GetScheduledTime() string {
	if x != nil {
		return x.ScheduledTime
	}
	return ""
}

func (x *InternalSingleTemplate) GetExchangeRate() float64 {
	if x != nil {
		return x.ExchangeRate
	}
	return 0
}

func (x *InternalSingleTemplate) GetReceivedAmount() float64 {
	if x != nil {
		return x.ReceivedAmount
	}
	return 0
}

func (x *InternalSingleTemplate) GetExchangeRateCurrency() string {
	if x != nil {
		return x.ExchangeRateCurrency
	}
	return ""
}

func (x *InternalSingleTemplate) GetRecurringFrequency() RecurringFrequency {
	if x != nil {
		return x.RecurringFrequency
	}
	return RecurringFrequency_Daily
}

func (x *InternalSingleTemplate) GetRecurringPeriodStart() *timestamppb.Timestamp {
	if x != nil {
		return x.RecurringPeriodStart
	}
	return nil
}

func (x *InternalSingleTemplate) GetRecurringPeriodEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.RecurringPeriodEnd
	}
	return nil
}

func (x *InternalSingleTemplate) GetRecurringDay() string {
	if x != nil {
		return x.RecurringDay
	}
	return ""
}

func (x *InternalSingleTemplate) GetRecurringDate() string {
	if x != nil {
		return x.RecurringDate
	}
	return ""
}

func (x *InternalSingleTemplate) GetRecurringTime() string {
	if x != nil {
		return x.RecurringTime
	}
	return ""
}

func (x *InternalSingleTemplate) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *InternalSingleTemplate) GetJournalSquence() string {
	if x != nil {
		return x.JournalSquence
	}
	return ""
}

func (x *InternalSingleTemplate) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *InternalSingleTemplate) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

func (x *InternalSingleTemplate) GetFeeAmount() float64 {
	if x != nil {
		return x.FeeAmount
	}
	return 0
}

func (x *InternalSingleTemplate) GetScheduledAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledAt
	}
	return nil
}

func (x *InternalSingleTemplate) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

func (x *InternalSingleTemplate) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *InternalSingleTemplate) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

var File_transfer_gorm_db_proto protoreflect.FileDescriptor

var file_transfer_gorm_db_proto_rawDesc = []byte{
	0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x67, 0x6f, 0x72, 0x6d, 0x5f,
	0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x72, 0x6d,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xda, 0x01, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0xba, 0xb9, 0x19, 0x06, 0x0a,
	0x04, 0x28, 0x01, 0x40, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0xe0, 0x41,
	0x03, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x45, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x0b, 0xe0, 0x41, 0x03, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x10, 0xba, 0xb9, 0x19,
	0x0c, 0x08, 0x01, 0x1a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xd2, 0x02,
	0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4a, 0x6f, 0x62, 0x12, 0x1a, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0xba, 0xb9, 0x19, 0x06, 0x0a,
	0x04, 0x28, 0x01, 0x40, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xba, 0xb9, 0x19, 0x09, 0x0a, 0x07, 0x12,
	0x05, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x05,
	0x72, 0x75, 0x6e, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x41, 0x74, 0x12, 0x45,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0xe0,
	0x41, 0x03, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x45, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0xe0, 0x41, 0x03, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40,
	0x01, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x14, 0xba, 0xb9,
	0x19, 0x10, 0x08, 0x01, 0x1a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6a,
	0x6f, 0x62, 0x22, 0xda, 0x0e, 0x0a, 0x16, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0xba, 0xb9, 0x19, 0x06, 0x0a,
	0x04, 0x28, 0x01, 0x40, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x15, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12,
	0x32, 0x0a, 0x14, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x17, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2a, 0x0a, 0x03,
	0x66, 0x65, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x65, 0x65, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x49, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x5a, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0d, 0xe2,
	0xdf, 0x1f, 0x09, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x0c, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x0e, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x57, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e,
	0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x12, 0x72, 0x65, 0x63, 0x75,
	0x72, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x4e,
	0x0a, 0x14, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72,
	0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x4a,
	0x0a, 0x12, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x45, 0x6e, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e,
	0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65,
	0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x24,
	0x0a, 0x0d, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x63,
	0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x12, 0x2b, 0x0a, 0x0e, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x0e, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x0d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x66, 0x65, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x29, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x45,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0xe0,
	0x41, 0x03, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x45, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0xe0, 0x41, 0x03, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40,
	0x01, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x21, 0xba, 0xb9,
	0x19, 0x1d, 0x08, 0x01, 0x1a, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2a,
	0x25, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x09, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x69, 0x74, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x10, 0x01, 0x2a, 0x17, 0x0a, 0x03, 0x46, 0x65, 0x65, 0x12, 0x07, 0x0a,
	0x03, 0x4f, 0x55, 0x52, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x45, 0x4e, 0x10, 0x01, 0x2a,
	0x42, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e,
	0x67, 0x10, 0x02, 0x2a, 0x36, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x10, 0x02, 0x42, 0x06, 0x5a, 0x04, 0x2e,
	0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_transfer_gorm_db_proto_rawDescOnce sync.Once
	file_transfer_gorm_db_proto_rawDescData = file_transfer_gorm_db_proto_rawDesc
)

func file_transfer_gorm_db_proto_rawDescGZIP() []byte {
	file_transfer_gorm_db_proto_rawDescOnce.Do(func() {
		file_transfer_gorm_db_proto_rawDescData = protoimpl.X.CompressGZIP(file_transfer_gorm_db_proto_rawDescData)
	})
	return file_transfer_gorm_db_proto_rawDescData
}

var file_transfer_gorm_db_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_transfer_gorm_db_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_transfer_gorm_db_proto_goTypes = []interface{}{
	(CurrencyType)(0),              // 0: transfer.service.v1.CurrencyType
	(Fee)(0),                       // 1: transfer.service.v1.Fee
	(TransactionSchedule)(0),       // 2: transfer.service.v1.TransactionSchedule
	(RecurringFrequency)(0),        // 3: transfer.service.v1.RecurringFrequency
	(*Currency)(nil),               // 4: transfer.service.v1.Currency
	(*TransferJob)(nil),            // 5: transfer.service.v1.TransferJob
	(*InternalSingleTemplate)(nil), // 6: transfer.service.v1.InternalSingleTemplate
	(*timestamppb.Timestamp)(nil),  // 7: google.protobuf.Timestamp
}
var file_transfer_gorm_db_proto_depIdxs = []int32{
	7,  // 0: transfer.service.v1.Currency.createdAt:type_name -> google.protobuf.Timestamp
	7,  // 1: transfer.service.v1.Currency.updatedAt:type_name -> google.protobuf.Timestamp
	7,  // 2: transfer.service.v1.TransferJob.runAt:type_name -> google.protobuf.Timestamp
	7,  // 3: transfer.service.v1.TransferJob.createdAt:type_name -> google.protobuf.Timestamp
	7,  // 4: transfer.service.v1.TransferJob.updatedAt:type_name -> google.protobuf.Timestamp
	0,  // 5: transfer.service.v1.InternalSingleTemplate.currency:type_name -> transfer.service.v1.CurrencyType
	1,  // 6: transfer.service.v1.InternalSingleTemplate.fee:type_name -> transfer.service.v1.Fee
	2,  // 7: transfer.service.v1.InternalSingleTemplate.transactionSchedule:type_name -> transfer.service.v1.TransactionSchedule
	3,  // 8: transfer.service.v1.InternalSingleTemplate.recurringFrequency:type_name -> transfer.service.v1.RecurringFrequency
	7,  // 9: transfer.service.v1.InternalSingleTemplate.recurringPeriodStart:type_name -> google.protobuf.Timestamp
	7,  // 10: transfer.service.v1.InternalSingleTemplate.recurringPeriodEnd:type_name -> google.protobuf.Timestamp
	7,  // 11: transfer.service.v1.InternalSingleTemplate.scheduledAt:type_name -> google.protobuf.Timestamp
	7,  // 12: transfer.service.v1.InternalSingleTemplate.createdAt:type_name -> google.protobuf.Timestamp
	7,  // 13: transfer.service.v1.InternalSingleTemplate.updatedAt:type_name -> google.protobuf.Timestamp
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_transfer_gorm_db_proto_init() }
func file_transfer_gorm_db_proto_init() {
	if File_transfer_gorm_db_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_transfer_gorm_db_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Currency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_gorm_db_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_gorm_db_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalSingleTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_transfer_gorm_db_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_transfer_gorm_db_proto_goTypes,
		DependencyIndexes: file_transfer_gorm_db_proto_depIdxs,
		EnumInfos:         file_transfer_gorm_db_proto_enumTypes,
		MessageInfos:      file_transfer_gorm_db_proto_msgTypes,
	}.Build()
	File_transfer_gorm_db_proto = out.File
	file_transfer_gorm_db_proto_rawDesc = nil
	file_transfer_gorm_db_proto_goTypes = nil
	file_transfer_gorm_db_proto_depIdxs = nil
}
