package pb

import (
	context "context"
	fmt "fmt"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	gorm "github.com/jinzhu/gorm"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	strings "strings"
	time "time"
)

type CurrencyORM struct {
	CreatedAt *time.Time `gorm:"not null"`
	Id        uint64     `gorm:"primary_key;not null"`
	Name      string
	UpdatedAt *time.Time `gorm:"not null"`
}

// TableName overrides the default tablename generated by GORM
func (CurrencyORM) TableName() string {
	return "currency"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Currency) ToORM(ctx context.Context) (CurrencyORM, error) {
	to := CurrencyORM{}
	var err error
	if prehook, ok := interface{}(m).(CurrencyWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Name = m.Name
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	if posthook, ok := interface{}(m).(CurrencyWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *CurrencyORM) ToPB(ctx context.Context) (Currency, error) {
	to := Currency{}
	var err error
	if prehook, ok := interface{}(m).(CurrencyWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Name = m.Name
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	if posthook, ok := interface{}(m).(CurrencyWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Currency the arg will be the target, the caller the one being converted from

// CurrencyBeforeToORM called before default ToORM code
type CurrencyWithBeforeToORM interface {
	BeforeToORM(context.Context, *CurrencyORM) error
}

// CurrencyAfterToORM called after default ToORM code
type CurrencyWithAfterToORM interface {
	AfterToORM(context.Context, *CurrencyORM) error
}

// CurrencyBeforeToPB called before default ToPB code
type CurrencyWithBeforeToPB interface {
	BeforeToPB(context.Context, *Currency) error
}

// CurrencyAfterToPB called after default ToPB code
type CurrencyWithAfterToPB interface {
	AfterToPB(context.Context, *Currency) error
}

type InternalTransferTransactionORM struct {
	CreatedAt            *time.Time `gorm:"not null"`
	Data                 string     `gorm:"type:jsonb"`
	Id                   uint64     `gorm:"primary_key;not null"`
	TaskID               uint64
	TransactionID        string
	TransactionServiceID uint64
	UpdatedAt            *time.Time `gorm:"not null"`
}

// TableName overrides the default tablename generated by GORM
func (InternalTransferTransactionORM) TableName() string {
	return "internal_transfer_transaction"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *InternalTransferTransaction) ToORM(ctx context.Context) (InternalTransferTransactionORM, error) {
	to := InternalTransferTransactionORM{}
	var err error
	if prehook, ok := interface{}(m).(InternalTransferTransactionWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.TaskID = m.TaskID
	to.TransactionID = m.TransactionID
	to.TransactionServiceID = m.TransactionServiceID
	to.Data = m.Data
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	if posthook, ok := interface{}(m).(InternalTransferTransactionWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *InternalTransferTransactionORM) ToPB(ctx context.Context) (InternalTransferTransaction, error) {
	to := InternalTransferTransaction{}
	var err error
	if prehook, ok := interface{}(m).(InternalTransferTransactionWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.TaskID = m.TaskID
	to.TransactionID = m.TransactionID
	to.TransactionServiceID = m.TransactionServiceID
	to.Data = m.Data
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	if posthook, ok := interface{}(m).(InternalTransferTransactionWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type InternalTransferTransaction the arg will be the target, the caller the one being converted from

// InternalTransferTransactionBeforeToORM called before default ToORM code
type InternalTransferTransactionWithBeforeToORM interface {
	BeforeToORM(context.Context, *InternalTransferTransactionORM) error
}

// InternalTransferTransactionAfterToORM called after default ToORM code
type InternalTransferTransactionWithAfterToORM interface {
	AfterToORM(context.Context, *InternalTransferTransactionORM) error
}

// InternalTransferTransactionBeforeToPB called before default ToPB code
type InternalTransferTransactionWithBeforeToPB interface {
	BeforeToPB(context.Context, *InternalTransferTransaction) error
}

// InternalTransferTransactionAfterToPB called after default ToPB code
type InternalTransferTransactionWithAfterToPB interface {
	AfterToPB(context.Context, *InternalTransferTransaction) error
}

type MassInquiryJobORM struct {
	Comment   string
	CreatedAt *time.Time `gorm:"not null"`
	Data      string     `gorm:"type:jsonb"`
	Id        uint64     `gorm:"primary_key;not null"`
	Retry     uint64
	RunAt     *time.Time
	TaskID    uint64
	UpdatedAt *time.Time `gorm:"not null"`
	UserID    uint64
}

// TableName overrides the default tablename generated by GORM
func (MassInquiryJobORM) TableName() string {
	return "mass_inquiry_job"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *MassInquiryJob) ToORM(ctx context.Context) (MassInquiryJobORM, error) {
	to := MassInquiryJobORM{}
	var err error
	if prehook, ok := interface{}(m).(MassInquiryJobWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.UserID = m.UserID
	to.TaskID = m.TaskID
	to.Data = m.Data
	if m.RunAt != nil {
		t := m.RunAt.AsTime()
		to.RunAt = &t
	}
	to.Comment = m.Comment
	to.Retry = m.Retry
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	if posthook, ok := interface{}(m).(MassInquiryJobWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *MassInquiryJobORM) ToPB(ctx context.Context) (MassInquiryJob, error) {
	to := MassInquiryJob{}
	var err error
	if prehook, ok := interface{}(m).(MassInquiryJobWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.UserID = m.UserID
	to.TaskID = m.TaskID
	to.Data = m.Data
	if m.RunAt != nil {
		to.RunAt = timestamppb.New(*m.RunAt)
	}
	to.Comment = m.Comment
	to.Retry = m.Retry
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	if posthook, ok := interface{}(m).(MassInquiryJobWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type MassInquiryJob the arg will be the target, the caller the one being converted from

// MassInquiryJobBeforeToORM called before default ToORM code
type MassInquiryJobWithBeforeToORM interface {
	BeforeToORM(context.Context, *MassInquiryJobORM) error
}

// MassInquiryJobAfterToORM called after default ToORM code
type MassInquiryJobWithAfterToORM interface {
	AfterToORM(context.Context, *MassInquiryJobORM) error
}

// MassInquiryJobBeforeToPB called before default ToPB code
type MassInquiryJobWithBeforeToPB interface {
	BeforeToPB(context.Context, *MassInquiryJob) error
}

// MassInquiryJobAfterToPB called after default ToPB code
type MassInquiryJobWithAfterToPB interface {
	AfterToPB(context.Context, *MassInquiryJob) error
}

type MassTransferJobORM struct {
	Comment   string
	CreatedAt *time.Time `gorm:"not null"`
	Data      string     `gorm:"type:jsonb"`
	Id        uint64     `gorm:"primary_key;not null"`
	Retry     uint64
	RunAt     *time.Time
	TaskID    uint64
	UpdatedAt *time.Time `gorm:"not null"`
	UserID    uint64
}

// TableName overrides the default tablename generated by GORM
func (MassTransferJobORM) TableName() string {
	return "mass_transfer_job"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *MassTransferJob) ToORM(ctx context.Context) (MassTransferJobORM, error) {
	to := MassTransferJobORM{}
	var err error
	if prehook, ok := interface{}(m).(MassTransferJobWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.UserID = m.UserID
	to.TaskID = m.TaskID
	to.Data = m.Data
	if m.RunAt != nil {
		t := m.RunAt.AsTime()
		to.RunAt = &t
	}
	to.Comment = m.Comment
	to.Retry = m.Retry
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	if posthook, ok := interface{}(m).(MassTransferJobWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *MassTransferJobORM) ToPB(ctx context.Context) (MassTransferJob, error) {
	to := MassTransferJob{}
	var err error
	if prehook, ok := interface{}(m).(MassTransferJobWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.UserID = m.UserID
	to.TaskID = m.TaskID
	to.Data = m.Data
	if m.RunAt != nil {
		to.RunAt = timestamppb.New(*m.RunAt)
	}
	to.Comment = m.Comment
	to.Retry = m.Retry
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	if posthook, ok := interface{}(m).(MassTransferJobWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type MassTransferJob the arg will be the target, the caller the one being converted from

// MassTransferJobBeforeToORM called before default ToORM code
type MassTransferJobWithBeforeToORM interface {
	BeforeToORM(context.Context, *MassTransferJobORM) error
}

// MassTransferJobAfterToORM called after default ToORM code
type MassTransferJobWithAfterToORM interface {
	AfterToORM(context.Context, *MassTransferJobORM) error
}

// MassTransferJobBeforeToPB called before default ToPB code
type MassTransferJobWithBeforeToPB interface {
	BeforeToPB(context.Context, *MassTransferJob) error
}

// MassTransferJobAfterToPB called after default ToPB code
type MassTransferJobWithAfterToPB interface {
	AfterToPB(context.Context, *MassTransferJob) error
}

type InternalSingleTemplateORM struct {
	Amount                  float64
	CreatedAt               *time.Time `gorm:"not null"`
	Currency                int32
	DealCode                string
	ExchangeRate            float64
	ExchangeRateCurrency    string
	Fee                     int32
	FeeAmount               float64
	Id                      uint64 `gorm:"primary_key;not null"`
	JournalSquence          string
	ReceivedAmount          float64
	ReceiverAccountAlias    string
	ReceiverAccountBalance  string
	ReceiverAccountCurrency string
	ReceiverAccountName     string
	ReceiverAccountNumber   string
	RecurringDate           string
	RecurringDay            string
	RecurringFrequency      int32
	RecurringPeriodEnd      *time.Time
	RecurringPeriodStart    *time.Time
	RecurringTime           string
	Remark                  string
	ScheduledAt             *time.Time
	ScheduledDate           string
	ScheduledTime           string
	SenderAccountAlias      string
	SenderAccountBalance    string
	SenderAccountCurrency   string
	SenderAccountName       string
	SenderAccountNumber     string
	Status                  string
	StatusMessage           string
	TemplateName            string
	TransactionID           string
	TransactionSchedule     int32
	UpdatedAt               *time.Time `gorm:"not null"`
}

// TableName overrides the default tablename generated by GORM
func (InternalSingleTemplateORM) TableName() string {
	return "internal_single_templates"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *InternalSingleTemplate) ToORM(ctx context.Context) (InternalSingleTemplateORM, error) {
	to := InternalSingleTemplateORM{}
	var err error
	if prehook, ok := interface{}(m).(InternalSingleTemplateWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.SenderAccountNumber = m.SenderAccountNumber
	to.SenderAccountCurrency = m.SenderAccountCurrency
	to.SenderAccountName = m.SenderAccountName
	to.SenderAccountAlias = m.SenderAccountAlias
	to.SenderAccountBalance = m.SenderAccountBalance
	to.ReceiverAccountNumber = m.ReceiverAccountNumber
	to.ReceiverAccountCurrency = m.ReceiverAccountCurrency
	to.ReceiverAccountName = m.ReceiverAccountName
	to.ReceiverAccountAlias = m.ReceiverAccountAlias
	to.ReceiverAccountBalance = m.ReceiverAccountBalance
	to.DealCode = m.DealCode
	to.Currency = int32(m.Currency)
	to.Fee = int32(m.Fee)
	to.Amount = m.Amount
	to.TransactionSchedule = int32(m.TransactionSchedule)
	to.ScheduledDate = m.ScheduledDate
	to.ScheduledTime = m.ScheduledTime
	to.ExchangeRate = m.ExchangeRate
	to.ReceivedAmount = m.ReceivedAmount
	to.ExchangeRateCurrency = m.ExchangeRateCurrency
	to.RecurringFrequency = int32(m.RecurringFrequency)
	if m.RecurringPeriodStart != nil {
		t := m.RecurringPeriodStart.AsTime()
		to.RecurringPeriodStart = &t
	}
	if m.RecurringPeriodEnd != nil {
		t := m.RecurringPeriodEnd.AsTime()
		to.RecurringPeriodEnd = &t
	}
	to.RecurringDay = m.RecurringDay
	to.RecurringDate = m.RecurringDate
	to.RecurringTime = m.RecurringTime
	to.Remark = m.Remark
	to.JournalSquence = m.JournalSquence
	to.Status = m.Status
	to.StatusMessage = m.StatusMessage
	to.FeeAmount = m.FeeAmount
	if m.ScheduledAt != nil {
		t := m.ScheduledAt.AsTime()
		to.ScheduledAt = &t
	}
	to.TemplateName = m.TemplateName
	to.TransactionID = m.TransactionID
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	if posthook, ok := interface{}(m).(InternalSingleTemplateWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *InternalSingleTemplateORM) ToPB(ctx context.Context) (InternalSingleTemplate, error) {
	to := InternalSingleTemplate{}
	var err error
	if prehook, ok := interface{}(m).(InternalSingleTemplateWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.SenderAccountNumber = m.SenderAccountNumber
	to.SenderAccountCurrency = m.SenderAccountCurrency
	to.SenderAccountName = m.SenderAccountName
	to.SenderAccountAlias = m.SenderAccountAlias
	to.SenderAccountBalance = m.SenderAccountBalance
	to.ReceiverAccountNumber = m.ReceiverAccountNumber
	to.ReceiverAccountCurrency = m.ReceiverAccountCurrency
	to.ReceiverAccountName = m.ReceiverAccountName
	to.ReceiverAccountAlias = m.ReceiverAccountAlias
	to.ReceiverAccountBalance = m.ReceiverAccountBalance
	to.DealCode = m.DealCode
	to.Currency = CurrencyType(m.Currency)
	to.Fee = Fee(m.Fee)
	to.Amount = m.Amount
	to.TransactionSchedule = TransactionSchedule(m.TransactionSchedule)
	to.ScheduledDate = m.ScheduledDate
	to.ScheduledTime = m.ScheduledTime
	to.ExchangeRate = m.ExchangeRate
	to.ReceivedAmount = m.ReceivedAmount
	to.ExchangeRateCurrency = m.ExchangeRateCurrency
	to.RecurringFrequency = RecurringFrequency(m.RecurringFrequency)
	if m.RecurringPeriodStart != nil {
		to.RecurringPeriodStart = timestamppb.New(*m.RecurringPeriodStart)
	}
	if m.RecurringPeriodEnd != nil {
		to.RecurringPeriodEnd = timestamppb.New(*m.RecurringPeriodEnd)
	}
	to.RecurringDay = m.RecurringDay
	to.RecurringDate = m.RecurringDate
	to.RecurringTime = m.RecurringTime
	to.Remark = m.Remark
	to.JournalSquence = m.JournalSquence
	to.Status = m.Status
	to.StatusMessage = m.StatusMessage
	to.FeeAmount = m.FeeAmount
	if m.ScheduledAt != nil {
		to.ScheduledAt = timestamppb.New(*m.ScheduledAt)
	}
	to.TemplateName = m.TemplateName
	to.TransactionID = m.TransactionID
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	if posthook, ok := interface{}(m).(InternalSingleTemplateWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type InternalSingleTemplate the arg will be the target, the caller the one being converted from

// InternalSingleTemplateBeforeToORM called before default ToORM code
type InternalSingleTemplateWithBeforeToORM interface {
	BeforeToORM(context.Context, *InternalSingleTemplateORM) error
}

// InternalSingleTemplateAfterToORM called after default ToORM code
type InternalSingleTemplateWithAfterToORM interface {
	AfterToORM(context.Context, *InternalSingleTemplateORM) error
}

// InternalSingleTemplateBeforeToPB called before default ToPB code
type InternalSingleTemplateWithBeforeToPB interface {
	BeforeToPB(context.Context, *InternalSingleTemplate) error
}

// InternalSingleTemplateAfterToPB called after default ToPB code
type InternalSingleTemplateWithAfterToPB interface {
	AfterToPB(context.Context, *InternalSingleTemplate) error
}

type MassTransferListORM struct {
	CreatedAt       *time.Time `gorm:"not null"`
	Data            string     `gorm:"type:jsonb"`
	Id              uint64     `gorm:"primary_key;not null"`
	InquiryResult   string     `gorm:"type:jsonb"`
	InquiryValid    bool
	TaskID          uint64
	TransferResult  string `gorm:"type:jsonb"`
	TransferValid   bool
	Type            int32
	UpdatedAt       *time.Time `gorm:"not null"`
	UserID          uint64
	Validation      string `gorm:"type:jsonb"`
	ValidationValid bool
}

// TableName overrides the default tablename generated by GORM
func (MassTransferListORM) TableName() string {
	return "mass_transfer_lists"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *MassTransferList) ToORM(ctx context.Context) (MassTransferListORM, error) {
	to := MassTransferListORM{}
	var err error
	if prehook, ok := interface{}(m).(MassTransferListWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.UserID = m.UserID
	to.TaskID = m.TaskID
	to.Data = m.Data
	to.Validation = m.Validation
	to.InquiryResult = m.InquiryResult
	to.TransferResult = m.TransferResult
	to.Type = int32(m.Type)
	to.ValidationValid = m.ValidationValid
	to.InquiryValid = m.InquiryValid
	to.TransferValid = m.TransferValid
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	if posthook, ok := interface{}(m).(MassTransferListWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *MassTransferListORM) ToPB(ctx context.Context) (MassTransferList, error) {
	to := MassTransferList{}
	var err error
	if prehook, ok := interface{}(m).(MassTransferListWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.UserID = m.UserID
	to.TaskID = m.TaskID
	to.Data = m.Data
	to.Validation = m.Validation
	to.InquiryResult = m.InquiryResult
	to.TransferResult = m.TransferResult
	to.Type = MassTransactionType(m.Type)
	to.ValidationValid = m.ValidationValid
	to.InquiryValid = m.InquiryValid
	to.TransferValid = m.TransferValid
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	if posthook, ok := interface{}(m).(MassTransferListWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type MassTransferList the arg will be the target, the caller the one being converted from

// MassTransferListBeforeToORM called before default ToORM code
type MassTransferListWithBeforeToORM interface {
	BeforeToORM(context.Context, *MassTransferListORM) error
}

// MassTransferListAfterToORM called after default ToORM code
type MassTransferListWithAfterToORM interface {
	AfterToORM(context.Context, *MassTransferListORM) error
}

// MassTransferListBeforeToPB called before default ToPB code
type MassTransferListWithBeforeToPB interface {
	BeforeToPB(context.Context, *MassTransferList) error
}

// MassTransferListAfterToPB called after default ToPB code
type MassTransferListWithAfterToPB interface {
	AfterToPB(context.Context, *MassTransferList) error
}

type MassTransferScheduledJobORM struct {
	Comment   string
	CreatedAt *time.Time `gorm:"not null"`
	Id        uint64     `gorm:"primary_key;not null"`
	Retry     uint64
	RunAt     *time.Time
	Success   bool
	TaskID    uint64
	UpdatedAt *time.Time `gorm:"not null"`
}

// TableName overrides the default tablename generated by GORM
func (MassTransferScheduledJobORM) TableName() string {
	return "mass_transfer_scheduled_jobs"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *MassTransferScheduledJob) ToORM(ctx context.Context) (MassTransferScheduledJobORM, error) {
	to := MassTransferScheduledJobORM{}
	var err error
	if prehook, ok := interface{}(m).(MassTransferScheduledJobWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.TaskID = m.TaskID
	to.Success = m.Success
	if m.RunAt != nil {
		t := m.RunAt.AsTime()
		to.RunAt = &t
	}
	to.Comment = m.Comment
	to.Retry = m.Retry
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	if posthook, ok := interface{}(m).(MassTransferScheduledJobWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *MassTransferScheduledJobORM) ToPB(ctx context.Context) (MassTransferScheduledJob, error) {
	to := MassTransferScheduledJob{}
	var err error
	if prehook, ok := interface{}(m).(MassTransferScheduledJobWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.TaskID = m.TaskID
	to.Success = m.Success
	if m.RunAt != nil {
		to.RunAt = timestamppb.New(*m.RunAt)
	}
	to.Comment = m.Comment
	to.Retry = m.Retry
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	if posthook, ok := interface{}(m).(MassTransferScheduledJobWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type MassTransferScheduledJob the arg will be the target, the caller the one being converted from

// MassTransferScheduledJobBeforeToORM called before default ToORM code
type MassTransferScheduledJobWithBeforeToORM interface {
	BeforeToORM(context.Context, *MassTransferScheduledJobORM) error
}

// MassTransferScheduledJobAfterToORM called after default ToORM code
type MassTransferScheduledJobWithAfterToORM interface {
	AfterToORM(context.Context, *MassTransferScheduledJobORM) error
}

// MassTransferScheduledJobBeforeToPB called before default ToPB code
type MassTransferScheduledJobWithBeforeToPB interface {
	BeforeToPB(context.Context, *MassTransferScheduledJob) error
}

// MassTransferScheduledJobAfterToPB called after default ToPB code
type MassTransferScheduledJobWithAfterToPB interface {
	AfterToPB(context.Context, *MassTransferScheduledJob) error
}

// DefaultCreateCurrency executes a basic gorm create call
func DefaultCreateCurrency(ctx context.Context, in *Currency, db *gorm.DB) (*Currency, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CurrencyORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CurrencyORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type CurrencyORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CurrencyORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadCurrency(ctx context.Context, in *Currency, db *gorm.DB) (*Currency, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(CurrencyORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &CurrencyORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CurrencyORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := CurrencyORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(CurrencyORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type CurrencyORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CurrencyORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CurrencyORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteCurrency(ctx context.Context, in *Currency, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(CurrencyORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&CurrencyORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(CurrencyORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type CurrencyORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CurrencyORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteCurrencySet(ctx context.Context, in []*Currency, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []uint64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&CurrencyORM{})).(CurrencyORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&CurrencyORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&CurrencyORM{})).(CurrencyORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type CurrencyORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Currency, *gorm.DB) (*gorm.DB, error)
}
type CurrencyORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Currency, *gorm.DB) error
}

// DefaultStrictUpdateCurrency clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateCurrency(ctx context.Context, in *Currency, db *gorm.DB) (*Currency, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateCurrency")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &CurrencyORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(CurrencyORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(CurrencyORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CurrencyORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type CurrencyORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CurrencyORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CurrencyORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchCurrency executes a basic gorm update call with patch behavior
func DefaultPatchCurrency(ctx context.Context, in *Currency, updateMask *field_mask.FieldMask, db *gorm.DB) (*Currency, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Currency
	var err error
	if hook, ok := interface{}(&pbObj).(CurrencyWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadCurrency(ctx, &Currency{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(CurrencyWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskCurrency(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(CurrencyWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateCurrency(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(CurrencyWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type CurrencyWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Currency, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type CurrencyWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Currency, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type CurrencyWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Currency, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type CurrencyWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Currency, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetCurrency executes a bulk gorm update call with patch behavior
func DefaultPatchSetCurrency(ctx context.Context, objects []*Currency, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Currency, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Currency, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchCurrency(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskCurrency patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskCurrency(ctx context.Context, patchee *Currency, patcher *Currency, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Currency, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Name" {
			patchee.Name = patcher.Name
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListCurrency executes a gorm list call
func DefaultListCurrency(ctx context.Context, db *gorm.DB) ([]*Currency, error) {
	in := Currency{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CurrencyORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &CurrencyORM{}, &Currency{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CurrencyORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []CurrencyORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CurrencyORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Currency{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type CurrencyORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CurrencyORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CurrencyORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]CurrencyORM) error
}

// DefaultCreateInternalTransferTransaction executes a basic gorm create call
func DefaultCreateInternalTransferTransaction(ctx context.Context, in *InternalTransferTransaction, db *gorm.DB) (*InternalTransferTransaction, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(InternalTransferTransactionORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(InternalTransferTransactionORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type InternalTransferTransactionORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type InternalTransferTransactionORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadInternalTransferTransaction(ctx context.Context, in *InternalTransferTransaction, db *gorm.DB) (*InternalTransferTransaction, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(InternalTransferTransactionORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &InternalTransferTransactionORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(InternalTransferTransactionORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := InternalTransferTransactionORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(InternalTransferTransactionORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type InternalTransferTransactionORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type InternalTransferTransactionORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type InternalTransferTransactionORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteInternalTransferTransaction(ctx context.Context, in *InternalTransferTransaction, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(InternalTransferTransactionORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&InternalTransferTransactionORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(InternalTransferTransactionORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type InternalTransferTransactionORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type InternalTransferTransactionORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteInternalTransferTransactionSet(ctx context.Context, in []*InternalTransferTransaction, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []uint64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&InternalTransferTransactionORM{})).(InternalTransferTransactionORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&InternalTransferTransactionORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&InternalTransferTransactionORM{})).(InternalTransferTransactionORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type InternalTransferTransactionORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*InternalTransferTransaction, *gorm.DB) (*gorm.DB, error)
}
type InternalTransferTransactionORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*InternalTransferTransaction, *gorm.DB) error
}

// DefaultStrictUpdateInternalTransferTransaction clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateInternalTransferTransaction(ctx context.Context, in *InternalTransferTransaction, db *gorm.DB) (*InternalTransferTransaction, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateInternalTransferTransaction")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &InternalTransferTransactionORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(InternalTransferTransactionORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(InternalTransferTransactionORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(InternalTransferTransactionORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type InternalTransferTransactionORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type InternalTransferTransactionORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type InternalTransferTransactionORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchInternalTransferTransaction executes a basic gorm update call with patch behavior
func DefaultPatchInternalTransferTransaction(ctx context.Context, in *InternalTransferTransaction, updateMask *field_mask.FieldMask, db *gorm.DB) (*InternalTransferTransaction, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj InternalTransferTransaction
	var err error
	if hook, ok := interface{}(&pbObj).(InternalTransferTransactionWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadInternalTransferTransaction(ctx, &InternalTransferTransaction{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(InternalTransferTransactionWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskInternalTransferTransaction(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(InternalTransferTransactionWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateInternalTransferTransaction(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(InternalTransferTransactionWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type InternalTransferTransactionWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *InternalTransferTransaction, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type InternalTransferTransactionWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *InternalTransferTransaction, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type InternalTransferTransactionWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *InternalTransferTransaction, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type InternalTransferTransactionWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *InternalTransferTransaction, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetInternalTransferTransaction executes a bulk gorm update call with patch behavior
func DefaultPatchSetInternalTransferTransaction(ctx context.Context, objects []*InternalTransferTransaction, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*InternalTransferTransaction, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*InternalTransferTransaction, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchInternalTransferTransaction(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskInternalTransferTransaction patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskInternalTransferTransaction(ctx context.Context, patchee *InternalTransferTransaction, patcher *InternalTransferTransaction, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*InternalTransferTransaction, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"TaskID" {
			patchee.TaskID = patcher.TaskID
			continue
		}
		if f == prefix+"TransactionID" {
			patchee.TransactionID = patcher.TransactionID
			continue
		}
		if f == prefix+"TransactionServiceID" {
			patchee.TransactionServiceID = patcher.TransactionServiceID
			continue
		}
		if f == prefix+"Data" {
			patchee.Data = patcher.Data
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListInternalTransferTransaction executes a gorm list call
func DefaultListInternalTransferTransaction(ctx context.Context, db *gorm.DB) ([]*InternalTransferTransaction, error) {
	in := InternalTransferTransaction{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(InternalTransferTransactionORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &InternalTransferTransactionORM{}, &InternalTransferTransaction{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(InternalTransferTransactionORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []InternalTransferTransactionORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(InternalTransferTransactionORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*InternalTransferTransaction{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type InternalTransferTransactionORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type InternalTransferTransactionORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type InternalTransferTransactionORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]InternalTransferTransactionORM) error
}

// DefaultCreateMassInquiryJob executes a basic gorm create call
func DefaultCreateMassInquiryJob(ctx context.Context, in *MassInquiryJob, db *gorm.DB) (*MassInquiryJob, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MassInquiryJobORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MassInquiryJobORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type MassInquiryJobORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MassInquiryJobORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadMassInquiryJob(ctx context.Context, in *MassInquiryJob, db *gorm.DB) (*MassInquiryJob, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(MassInquiryJobORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &MassInquiryJobORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MassInquiryJobORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := MassInquiryJobORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(MassInquiryJobORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type MassInquiryJobORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MassInquiryJobORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MassInquiryJobORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteMassInquiryJob(ctx context.Context, in *MassInquiryJob, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(MassInquiryJobORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&MassInquiryJobORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(MassInquiryJobORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type MassInquiryJobORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MassInquiryJobORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteMassInquiryJobSet(ctx context.Context, in []*MassInquiryJob, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []uint64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&MassInquiryJobORM{})).(MassInquiryJobORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&MassInquiryJobORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&MassInquiryJobORM{})).(MassInquiryJobORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type MassInquiryJobORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*MassInquiryJob, *gorm.DB) (*gorm.DB, error)
}
type MassInquiryJobORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*MassInquiryJob, *gorm.DB) error
}

// DefaultStrictUpdateMassInquiryJob clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateMassInquiryJob(ctx context.Context, in *MassInquiryJob, db *gorm.DB) (*MassInquiryJob, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateMassInquiryJob")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &MassInquiryJobORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(MassInquiryJobORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(MassInquiryJobORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MassInquiryJobORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type MassInquiryJobORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MassInquiryJobORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MassInquiryJobORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchMassInquiryJob executes a basic gorm update call with patch behavior
func DefaultPatchMassInquiryJob(ctx context.Context, in *MassInquiryJob, updateMask *field_mask.FieldMask, db *gorm.DB) (*MassInquiryJob, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj MassInquiryJob
	var err error
	if hook, ok := interface{}(&pbObj).(MassInquiryJobWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadMassInquiryJob(ctx, &MassInquiryJob{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(MassInquiryJobWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskMassInquiryJob(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(MassInquiryJobWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateMassInquiryJob(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(MassInquiryJobWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type MassInquiryJobWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *MassInquiryJob, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type MassInquiryJobWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *MassInquiryJob, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type MassInquiryJobWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *MassInquiryJob, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type MassInquiryJobWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *MassInquiryJob, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetMassInquiryJob executes a bulk gorm update call with patch behavior
func DefaultPatchSetMassInquiryJob(ctx context.Context, objects []*MassInquiryJob, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*MassInquiryJob, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*MassInquiryJob, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchMassInquiryJob(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskMassInquiryJob patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskMassInquiryJob(ctx context.Context, patchee *MassInquiryJob, patcher *MassInquiryJob, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*MassInquiryJob, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedRunAt bool
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"UserID" {
			patchee.UserID = patcher.UserID
			continue
		}
		if f == prefix+"TaskID" {
			patchee.TaskID = patcher.TaskID
			continue
		}
		if f == prefix+"Data" {
			patchee.Data = patcher.Data
			continue
		}
		if !updatedRunAt && strings.HasPrefix(f, prefix+"RunAt.") {
			if patcher.RunAt == nil {
				patchee.RunAt = nil
				continue
			}
			if patchee.RunAt == nil {
				patchee.RunAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"RunAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.RunAt, patchee.RunAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"RunAt" {
			updatedRunAt = true
			patchee.RunAt = patcher.RunAt
			continue
		}
		if f == prefix+"Comment" {
			patchee.Comment = patcher.Comment
			continue
		}
		if f == prefix+"Retry" {
			patchee.Retry = patcher.Retry
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListMassInquiryJob executes a gorm list call
func DefaultListMassInquiryJob(ctx context.Context, db *gorm.DB) ([]*MassInquiryJob, error) {
	in := MassInquiryJob{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MassInquiryJobORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &MassInquiryJobORM{}, &MassInquiryJob{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MassInquiryJobORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []MassInquiryJobORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MassInquiryJobORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*MassInquiryJob{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type MassInquiryJobORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MassInquiryJobORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MassInquiryJobORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]MassInquiryJobORM) error
}

// DefaultCreateMassTransferJob executes a basic gorm create call
func DefaultCreateMassTransferJob(ctx context.Context, in *MassTransferJob, db *gorm.DB) (*MassTransferJob, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MassTransferJobORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MassTransferJobORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type MassTransferJobORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MassTransferJobORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadMassTransferJob(ctx context.Context, in *MassTransferJob, db *gorm.DB) (*MassTransferJob, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(MassTransferJobORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &MassTransferJobORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MassTransferJobORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := MassTransferJobORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(MassTransferJobORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type MassTransferJobORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MassTransferJobORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MassTransferJobORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteMassTransferJob(ctx context.Context, in *MassTransferJob, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(MassTransferJobORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&MassTransferJobORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(MassTransferJobORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type MassTransferJobORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MassTransferJobORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteMassTransferJobSet(ctx context.Context, in []*MassTransferJob, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []uint64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&MassTransferJobORM{})).(MassTransferJobORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&MassTransferJobORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&MassTransferJobORM{})).(MassTransferJobORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type MassTransferJobORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*MassTransferJob, *gorm.DB) (*gorm.DB, error)
}
type MassTransferJobORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*MassTransferJob, *gorm.DB) error
}

// DefaultStrictUpdateMassTransferJob clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateMassTransferJob(ctx context.Context, in *MassTransferJob, db *gorm.DB) (*MassTransferJob, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateMassTransferJob")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &MassTransferJobORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(MassTransferJobORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(MassTransferJobORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MassTransferJobORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type MassTransferJobORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MassTransferJobORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MassTransferJobORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchMassTransferJob executes a basic gorm update call with patch behavior
func DefaultPatchMassTransferJob(ctx context.Context, in *MassTransferJob, updateMask *field_mask.FieldMask, db *gorm.DB) (*MassTransferJob, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj MassTransferJob
	var err error
	if hook, ok := interface{}(&pbObj).(MassTransferJobWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadMassTransferJob(ctx, &MassTransferJob{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(MassTransferJobWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskMassTransferJob(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(MassTransferJobWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateMassTransferJob(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(MassTransferJobWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type MassTransferJobWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *MassTransferJob, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type MassTransferJobWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *MassTransferJob, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type MassTransferJobWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *MassTransferJob, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type MassTransferJobWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *MassTransferJob, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetMassTransferJob executes a bulk gorm update call with patch behavior
func DefaultPatchSetMassTransferJob(ctx context.Context, objects []*MassTransferJob, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*MassTransferJob, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*MassTransferJob, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchMassTransferJob(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskMassTransferJob patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskMassTransferJob(ctx context.Context, patchee *MassTransferJob, patcher *MassTransferJob, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*MassTransferJob, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedRunAt bool
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"UserID" {
			patchee.UserID = patcher.UserID
			continue
		}
		if f == prefix+"TaskID" {
			patchee.TaskID = patcher.TaskID
			continue
		}
		if f == prefix+"Data" {
			patchee.Data = patcher.Data
			continue
		}
		if !updatedRunAt && strings.HasPrefix(f, prefix+"RunAt.") {
			if patcher.RunAt == nil {
				patchee.RunAt = nil
				continue
			}
			if patchee.RunAt == nil {
				patchee.RunAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"RunAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.RunAt, patchee.RunAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"RunAt" {
			updatedRunAt = true
			patchee.RunAt = patcher.RunAt
			continue
		}
		if f == prefix+"Comment" {
			patchee.Comment = patcher.Comment
			continue
		}
		if f == prefix+"Retry" {
			patchee.Retry = patcher.Retry
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListMassTransferJob executes a gorm list call
func DefaultListMassTransferJob(ctx context.Context, db *gorm.DB) ([]*MassTransferJob, error) {
	in := MassTransferJob{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MassTransferJobORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &MassTransferJobORM{}, &MassTransferJob{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MassTransferJobORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []MassTransferJobORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MassTransferJobORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*MassTransferJob{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type MassTransferJobORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MassTransferJobORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MassTransferJobORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]MassTransferJobORM) error
}

// DefaultCreateInternalSingleTemplate executes a basic gorm create call
func DefaultCreateInternalSingleTemplate(ctx context.Context, in *InternalSingleTemplate, db *gorm.DB) (*InternalSingleTemplate, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(InternalSingleTemplateORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(InternalSingleTemplateORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type InternalSingleTemplateORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type InternalSingleTemplateORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadInternalSingleTemplate(ctx context.Context, in *InternalSingleTemplate, db *gorm.DB) (*InternalSingleTemplate, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(InternalSingleTemplateORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &InternalSingleTemplateORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(InternalSingleTemplateORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := InternalSingleTemplateORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(InternalSingleTemplateORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type InternalSingleTemplateORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type InternalSingleTemplateORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type InternalSingleTemplateORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteInternalSingleTemplate(ctx context.Context, in *InternalSingleTemplate, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(InternalSingleTemplateORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&InternalSingleTemplateORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(InternalSingleTemplateORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type InternalSingleTemplateORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type InternalSingleTemplateORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteInternalSingleTemplateSet(ctx context.Context, in []*InternalSingleTemplate, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []uint64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&InternalSingleTemplateORM{})).(InternalSingleTemplateORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&InternalSingleTemplateORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&InternalSingleTemplateORM{})).(InternalSingleTemplateORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type InternalSingleTemplateORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*InternalSingleTemplate, *gorm.DB) (*gorm.DB, error)
}
type InternalSingleTemplateORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*InternalSingleTemplate, *gorm.DB) error
}

// DefaultStrictUpdateInternalSingleTemplate clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateInternalSingleTemplate(ctx context.Context, in *InternalSingleTemplate, db *gorm.DB) (*InternalSingleTemplate, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateInternalSingleTemplate")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &InternalSingleTemplateORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(InternalSingleTemplateORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(InternalSingleTemplateORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(InternalSingleTemplateORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type InternalSingleTemplateORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type InternalSingleTemplateORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type InternalSingleTemplateORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchInternalSingleTemplate executes a basic gorm update call with patch behavior
func DefaultPatchInternalSingleTemplate(ctx context.Context, in *InternalSingleTemplate, updateMask *field_mask.FieldMask, db *gorm.DB) (*InternalSingleTemplate, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj InternalSingleTemplate
	var err error
	if hook, ok := interface{}(&pbObj).(InternalSingleTemplateWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadInternalSingleTemplate(ctx, &InternalSingleTemplate{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(InternalSingleTemplateWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskInternalSingleTemplate(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(InternalSingleTemplateWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateInternalSingleTemplate(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(InternalSingleTemplateWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type InternalSingleTemplateWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *InternalSingleTemplate, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type InternalSingleTemplateWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *InternalSingleTemplate, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type InternalSingleTemplateWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *InternalSingleTemplate, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type InternalSingleTemplateWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *InternalSingleTemplate, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetInternalSingleTemplate executes a bulk gorm update call with patch behavior
func DefaultPatchSetInternalSingleTemplate(ctx context.Context, objects []*InternalSingleTemplate, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*InternalSingleTemplate, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*InternalSingleTemplate, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchInternalSingleTemplate(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskInternalSingleTemplate patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskInternalSingleTemplate(ctx context.Context, patchee *InternalSingleTemplate, patcher *InternalSingleTemplate, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*InternalSingleTemplate, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedRecurringPeriodStart bool
	var updatedRecurringPeriodEnd bool
	var updatedScheduledAt bool
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"SenderAccountNumber" {
			patchee.SenderAccountNumber = patcher.SenderAccountNumber
			continue
		}
		if f == prefix+"SenderAccountCurrency" {
			patchee.SenderAccountCurrency = patcher.SenderAccountCurrency
			continue
		}
		if f == prefix+"SenderAccountName" {
			patchee.SenderAccountName = patcher.SenderAccountName
			continue
		}
		if f == prefix+"SenderAccountAlias" {
			patchee.SenderAccountAlias = patcher.SenderAccountAlias
			continue
		}
		if f == prefix+"SenderAccountBalance" {
			patchee.SenderAccountBalance = patcher.SenderAccountBalance
			continue
		}
		if f == prefix+"ReceiverAccountNumber" {
			patchee.ReceiverAccountNumber = patcher.ReceiverAccountNumber
			continue
		}
		if f == prefix+"ReceiverAccountCurrency" {
			patchee.ReceiverAccountCurrency = patcher.ReceiverAccountCurrency
			continue
		}
		if f == prefix+"ReceiverAccountName" {
			patchee.ReceiverAccountName = patcher.ReceiverAccountName
			continue
		}
		if f == prefix+"ReceiverAccountAlias" {
			patchee.ReceiverAccountAlias = patcher.ReceiverAccountAlias
			continue
		}
		if f == prefix+"ReceiverAccountBalance" {
			patchee.ReceiverAccountBalance = patcher.ReceiverAccountBalance
			continue
		}
		if f == prefix+"DealCode" {
			patchee.DealCode = patcher.DealCode
			continue
		}
		if f == prefix+"Currency" {
			patchee.Currency = patcher.Currency
			continue
		}
		if f == prefix+"Fee" {
			patchee.Fee = patcher.Fee
			continue
		}
		if f == prefix+"Amount" {
			patchee.Amount = patcher.Amount
			continue
		}
		if f == prefix+"TransactionSchedule" {
			patchee.TransactionSchedule = patcher.TransactionSchedule
			continue
		}
		if f == prefix+"ScheduledDate" {
			patchee.ScheduledDate = patcher.ScheduledDate
			continue
		}
		if f == prefix+"ScheduledTime" {
			patchee.ScheduledTime = patcher.ScheduledTime
			continue
		}
		if f == prefix+"ExchangeRate" {
			patchee.ExchangeRate = patcher.ExchangeRate
			continue
		}
		if f == prefix+"ReceivedAmount" {
			patchee.ReceivedAmount = patcher.ReceivedAmount
			continue
		}
		if f == prefix+"ExchangeRateCurrency" {
			patchee.ExchangeRateCurrency = patcher.ExchangeRateCurrency
			continue
		}
		if f == prefix+"RecurringFrequency" {
			patchee.RecurringFrequency = patcher.RecurringFrequency
			continue
		}
		if !updatedRecurringPeriodStart && strings.HasPrefix(f, prefix+"RecurringPeriodStart.") {
			if patcher.RecurringPeriodStart == nil {
				patchee.RecurringPeriodStart = nil
				continue
			}
			if patchee.RecurringPeriodStart == nil {
				patchee.RecurringPeriodStart = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"RecurringPeriodStart."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.RecurringPeriodStart, patchee.RecurringPeriodStart, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"RecurringPeriodStart" {
			updatedRecurringPeriodStart = true
			patchee.RecurringPeriodStart = patcher.RecurringPeriodStart
			continue
		}
		if !updatedRecurringPeriodEnd && strings.HasPrefix(f, prefix+"RecurringPeriodEnd.") {
			if patcher.RecurringPeriodEnd == nil {
				patchee.RecurringPeriodEnd = nil
				continue
			}
			if patchee.RecurringPeriodEnd == nil {
				patchee.RecurringPeriodEnd = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"RecurringPeriodEnd."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.RecurringPeriodEnd, patchee.RecurringPeriodEnd, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"RecurringPeriodEnd" {
			updatedRecurringPeriodEnd = true
			patchee.RecurringPeriodEnd = patcher.RecurringPeriodEnd
			continue
		}
		if f == prefix+"RecurringDay" {
			patchee.RecurringDay = patcher.RecurringDay
			continue
		}
		if f == prefix+"RecurringDate" {
			patchee.RecurringDate = patcher.RecurringDate
			continue
		}
		if f == prefix+"RecurringTime" {
			patchee.RecurringTime = patcher.RecurringTime
			continue
		}
		if f == prefix+"Remark" {
			patchee.Remark = patcher.Remark
			continue
		}
		if f == prefix+"JournalSquence" {
			patchee.JournalSquence = patcher.JournalSquence
			continue
		}
		if f == prefix+"Status" {
			patchee.Status = patcher.Status
			continue
		}
		if f == prefix+"StatusMessage" {
			patchee.StatusMessage = patcher.StatusMessage
			continue
		}
		if f == prefix+"FeeAmount" {
			patchee.FeeAmount = patcher.FeeAmount
			continue
		}
		if !updatedScheduledAt && strings.HasPrefix(f, prefix+"ScheduledAt.") {
			if patcher.ScheduledAt == nil {
				patchee.ScheduledAt = nil
				continue
			}
			if patchee.ScheduledAt == nil {
				patchee.ScheduledAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"ScheduledAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.ScheduledAt, patchee.ScheduledAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"ScheduledAt" {
			updatedScheduledAt = true
			patchee.ScheduledAt = patcher.ScheduledAt
			continue
		}
		if f == prefix+"TemplateName" {
			patchee.TemplateName = patcher.TemplateName
			continue
		}
		if f == prefix+"TransactionID" {
			patchee.TransactionID = patcher.TransactionID
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListInternalSingleTemplate executes a gorm list call
func DefaultListInternalSingleTemplate(ctx context.Context, db *gorm.DB) ([]*InternalSingleTemplate, error) {
	in := InternalSingleTemplate{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(InternalSingleTemplateORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &InternalSingleTemplateORM{}, &InternalSingleTemplate{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(InternalSingleTemplateORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []InternalSingleTemplateORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(InternalSingleTemplateORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*InternalSingleTemplate{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type InternalSingleTemplateORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type InternalSingleTemplateORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type InternalSingleTemplateORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]InternalSingleTemplateORM) error
}

// DefaultCreateMassTransferList executes a basic gorm create call
func DefaultCreateMassTransferList(ctx context.Context, in *MassTransferList, db *gorm.DB) (*MassTransferList, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MassTransferListORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MassTransferListORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type MassTransferListORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MassTransferListORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadMassTransferList(ctx context.Context, in *MassTransferList, db *gorm.DB) (*MassTransferList, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(MassTransferListORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &MassTransferListORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MassTransferListORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := MassTransferListORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(MassTransferListORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type MassTransferListORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MassTransferListORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MassTransferListORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteMassTransferList(ctx context.Context, in *MassTransferList, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(MassTransferListORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&MassTransferListORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(MassTransferListORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type MassTransferListORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MassTransferListORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteMassTransferListSet(ctx context.Context, in []*MassTransferList, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []uint64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&MassTransferListORM{})).(MassTransferListORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&MassTransferListORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&MassTransferListORM{})).(MassTransferListORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type MassTransferListORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*MassTransferList, *gorm.DB) (*gorm.DB, error)
}
type MassTransferListORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*MassTransferList, *gorm.DB) error
}

// DefaultStrictUpdateMassTransferList clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateMassTransferList(ctx context.Context, in *MassTransferList, db *gorm.DB) (*MassTransferList, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateMassTransferList")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &MassTransferListORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(MassTransferListORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(MassTransferListORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MassTransferListORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type MassTransferListORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MassTransferListORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MassTransferListORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchMassTransferList executes a basic gorm update call with patch behavior
func DefaultPatchMassTransferList(ctx context.Context, in *MassTransferList, updateMask *field_mask.FieldMask, db *gorm.DB) (*MassTransferList, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj MassTransferList
	var err error
	if hook, ok := interface{}(&pbObj).(MassTransferListWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadMassTransferList(ctx, &MassTransferList{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(MassTransferListWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskMassTransferList(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(MassTransferListWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateMassTransferList(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(MassTransferListWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type MassTransferListWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *MassTransferList, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type MassTransferListWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *MassTransferList, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type MassTransferListWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *MassTransferList, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type MassTransferListWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *MassTransferList, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetMassTransferList executes a bulk gorm update call with patch behavior
func DefaultPatchSetMassTransferList(ctx context.Context, objects []*MassTransferList, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*MassTransferList, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*MassTransferList, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchMassTransferList(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskMassTransferList patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskMassTransferList(ctx context.Context, patchee *MassTransferList, patcher *MassTransferList, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*MassTransferList, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"UserID" {
			patchee.UserID = patcher.UserID
			continue
		}
		if f == prefix+"TaskID" {
			patchee.TaskID = patcher.TaskID
			continue
		}
		if f == prefix+"Data" {
			patchee.Data = patcher.Data
			continue
		}
		if f == prefix+"Validation" {
			patchee.Validation = patcher.Validation
			continue
		}
		if f == prefix+"InquiryResult" {
			patchee.InquiryResult = patcher.InquiryResult
			continue
		}
		if f == prefix+"TransferResult" {
			patchee.TransferResult = patcher.TransferResult
			continue
		}
		if f == prefix+"Type" {
			patchee.Type = patcher.Type
			continue
		}
		if f == prefix+"ValidationValid" {
			patchee.ValidationValid = patcher.ValidationValid
			continue
		}
		if f == prefix+"InquiryValid" {
			patchee.InquiryValid = patcher.InquiryValid
			continue
		}
		if f == prefix+"TransferValid" {
			patchee.TransferValid = patcher.TransferValid
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListMassTransferList executes a gorm list call
func DefaultListMassTransferList(ctx context.Context, db *gorm.DB) ([]*MassTransferList, error) {
	in := MassTransferList{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MassTransferListORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &MassTransferListORM{}, &MassTransferList{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MassTransferListORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []MassTransferListORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MassTransferListORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*MassTransferList{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type MassTransferListORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MassTransferListORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MassTransferListORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]MassTransferListORM) error
}

// DefaultCreateMassTransferScheduledJob executes a basic gorm create call
func DefaultCreateMassTransferScheduledJob(ctx context.Context, in *MassTransferScheduledJob, db *gorm.DB) (*MassTransferScheduledJob, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MassTransferScheduledJobORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MassTransferScheduledJobORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type MassTransferScheduledJobORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MassTransferScheduledJobORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadMassTransferScheduledJob(ctx context.Context, in *MassTransferScheduledJob, db *gorm.DB) (*MassTransferScheduledJob, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(MassTransferScheduledJobORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &MassTransferScheduledJobORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MassTransferScheduledJobORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := MassTransferScheduledJobORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(MassTransferScheduledJobORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type MassTransferScheduledJobORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MassTransferScheduledJobORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MassTransferScheduledJobORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteMassTransferScheduledJob(ctx context.Context, in *MassTransferScheduledJob, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(MassTransferScheduledJobORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&MassTransferScheduledJobORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(MassTransferScheduledJobORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type MassTransferScheduledJobORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MassTransferScheduledJobORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteMassTransferScheduledJobSet(ctx context.Context, in []*MassTransferScheduledJob, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []uint64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&MassTransferScheduledJobORM{})).(MassTransferScheduledJobORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&MassTransferScheduledJobORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&MassTransferScheduledJobORM{})).(MassTransferScheduledJobORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type MassTransferScheduledJobORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*MassTransferScheduledJob, *gorm.DB) (*gorm.DB, error)
}
type MassTransferScheduledJobORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*MassTransferScheduledJob, *gorm.DB) error
}

// DefaultStrictUpdateMassTransferScheduledJob clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateMassTransferScheduledJob(ctx context.Context, in *MassTransferScheduledJob, db *gorm.DB) (*MassTransferScheduledJob, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateMassTransferScheduledJob")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &MassTransferScheduledJobORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(MassTransferScheduledJobORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(MassTransferScheduledJobORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MassTransferScheduledJobORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type MassTransferScheduledJobORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MassTransferScheduledJobORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MassTransferScheduledJobORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchMassTransferScheduledJob executes a basic gorm update call with patch behavior
func DefaultPatchMassTransferScheduledJob(ctx context.Context, in *MassTransferScheduledJob, updateMask *field_mask.FieldMask, db *gorm.DB) (*MassTransferScheduledJob, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj MassTransferScheduledJob
	var err error
	if hook, ok := interface{}(&pbObj).(MassTransferScheduledJobWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadMassTransferScheduledJob(ctx, &MassTransferScheduledJob{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(MassTransferScheduledJobWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskMassTransferScheduledJob(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(MassTransferScheduledJobWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateMassTransferScheduledJob(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(MassTransferScheduledJobWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type MassTransferScheduledJobWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *MassTransferScheduledJob, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type MassTransferScheduledJobWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *MassTransferScheduledJob, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type MassTransferScheduledJobWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *MassTransferScheduledJob, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type MassTransferScheduledJobWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *MassTransferScheduledJob, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetMassTransferScheduledJob executes a bulk gorm update call with patch behavior
func DefaultPatchSetMassTransferScheduledJob(ctx context.Context, objects []*MassTransferScheduledJob, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*MassTransferScheduledJob, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*MassTransferScheduledJob, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchMassTransferScheduledJob(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskMassTransferScheduledJob patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskMassTransferScheduledJob(ctx context.Context, patchee *MassTransferScheduledJob, patcher *MassTransferScheduledJob, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*MassTransferScheduledJob, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedRunAt bool
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"TaskID" {
			patchee.TaskID = patcher.TaskID
			continue
		}
		if f == prefix+"Success" {
			patchee.Success = patcher.Success
			continue
		}
		if !updatedRunAt && strings.HasPrefix(f, prefix+"RunAt.") {
			if patcher.RunAt == nil {
				patchee.RunAt = nil
				continue
			}
			if patchee.RunAt == nil {
				patchee.RunAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"RunAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.RunAt, patchee.RunAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"RunAt" {
			updatedRunAt = true
			patchee.RunAt = patcher.RunAt
			continue
		}
		if f == prefix+"Comment" {
			patchee.Comment = patcher.Comment
			continue
		}
		if f == prefix+"Retry" {
			patchee.Retry = patcher.Retry
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListMassTransferScheduledJob executes a gorm list call
func DefaultListMassTransferScheduledJob(ctx context.Context, db *gorm.DB) ([]*MassTransferScheduledJob, error) {
	in := MassTransferScheduledJob{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MassTransferScheduledJobORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &MassTransferScheduledJobORM{}, &MassTransferScheduledJob{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MassTransferScheduledJobORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []MassTransferScheduledJobORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MassTransferScheduledJobORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*MassTransferScheduledJob{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type MassTransferScheduledJobORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MassTransferScheduledJobORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MassTransferScheduledJobORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]MassTransferScheduledJobORM) error
}
