// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: transfer_api.proto

package pb

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiServiceClient is the client API for ApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiServiceClient interface {
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	GetTaskInternalTransferSingleTemplate(ctx context.Context, in *GetTaskInternalTransferSingleTemplateRequest, opts ...grpc.CallOption) (*GetTaskInternalTransferSingleTemplateResponse, error)
	GetTaskInternalTransferSingleTemplateDetail(ctx context.Context, in *GetTaskInternalTransferSingleTemplateDetailRequest, opts ...grpc.CallOption) (*GetTaskInternalTransferSingleTemplateDetailResponse, error)
	CreateTaskInternalTransferSingleTemplate(ctx context.Context, in *InternalTransferSingleTemplate, opts ...grpc.CallOption) (*CreateTaskInternalTransferSingleTemplateResponse, error)
	DeleteTaskInternalTransferSingleTemplate(ctx context.Context, in *DeleteTaskInternalTransferSingleTemplateRequest, opts ...grpc.CallOption) (*DeleteTaskInternalTransferSingleTemplateResponse, error)
	GetTaskInternalTransferFile(ctx context.Context, in *GetTaskInternalTransferFileRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	GetTaskInternalTransfer(ctx context.Context, in *GetTaskInternalTransferRequest, opts ...grpc.CallOption) (*GetTaskInternalTransferResponse, error)
	GetTaskInternalTransferDetail(ctx context.Context, in *GetTaskInternalTransferDetailRequest, opts ...grpc.CallOption) (*GetTaskInternalTransferDetailResponse, error)
	CreateInternalTransferTransaction(ctx context.Context, in *CreateInternalTransferTransactionRequest, opts ...grpc.CallOption) (*CreateInternalTransferTransactionResponse, error)
	CancelInternalTransferTransaction(ctx context.Context, in *CancelInternalTransferTransactionRequest, opts ...grpc.CallOption) (*CancelInternalTransferTransactionResponse, error)
	SetTaskInternalTransfer(ctx context.Context, in *SetTaskInternalTransferRequest, opts ...grpc.CallOption) (*SetTaskInternalTransferResponse, error)
	ExecInternalTransfer(ctx context.Context, in *ExecInternalTransferRequest, opts ...grpc.CallOption) (*ExecInternalTransferResponse, error)
	CreateTaskInternalTransferSingle(ctx context.Context, in *CreateTaskInternalTransferSingleRequest, opts ...grpc.CallOption) (*CreateTaskInternalTransferSingleResponse, error)
	CreateTaskInternalTransferMultiple(ctx context.Context, in *CreateTaskInternalTransferMultipleRequest, opts ...grpc.CallOption) (*CreateTaskInternalTransferMultipleResponse, error)
	GetTaskExternalTransfer(ctx context.Context, in *GetTaskExternalTransferRequest, opts ...grpc.CallOption) (*GetTaskExternalTransferResponse, error)
	GetTaskExternalTransferDetail(ctx context.Context, in *GetTaskExternalTransferDetailRequest, opts ...grpc.CallOption) (*GetTaskExternalTransferDetailResponse, error)
	CreateExternalTransferTransaction(ctx context.Context, in *CreateExternalTransferTransactionRequest, opts ...grpc.CallOption) (*CreateExternalTransferTransactionResponse, error)
	SetTaskExternalTransfer(ctx context.Context, in *SetTaskExternalTransferRequest, opts ...grpc.CallOption) (*SetTaskExternalTransferResponse, error)
	CreateTaskExternalTransferSingle(ctx context.Context, in *CreateTaskExternalTransferSingleRequest, opts ...grpc.CallOption) (*CreateTaskExternalTransferSingleResponse, error)
	CreateTaskExternalTransferMultiple(ctx context.Context, in *CreateTaskExternalTransferMultipleRequest, opts ...grpc.CallOption) (*CreateTaskExternalTransferMultipleResponse, error)
	GetTaskPayrollFile(ctx context.Context, in *GetTaskPayrollFileRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	GetTaskPayroll(ctx context.Context, in *GetTaskPayrollRequest, opts ...grpc.CallOption) (*GetTaskPayrollResponse, error)
	GetTaskPayrollDetail(ctx context.Context, in *GetTaskPayrollDetailRequest, opts ...grpc.CallOption) (*GetTaskPayrollDetailResponse, error)
	CreateTaskPayroll(ctx context.Context, in *CreateTaskPayrollRequest, opts ...grpc.CallOption) (*CreateTaskPayrollResponse, error)
	SetTaskPayroll(ctx context.Context, in *SetTaskPayrollRequest, opts ...grpc.CallOption) (*SetTaskPayrollResponse, error)
	CancelTransferPayroll(ctx context.Context, in *CancelTransferPayrollRequest, opts ...grpc.CallOption) (*CancelTransferPayrollResponse, error)
	RunFileCheckingPayrollJob(ctx context.Context, in *RunFileCheckingPayrollJobRequest, opts ...grpc.CallOption) (*RunFileCheckingPayrollJobResponse, error)
	RunMassInquiryJob(ctx context.Context, in *RunMassInquiryJobRequest, opts ...grpc.CallOption) (*RunMassInquiryJobResponse, error)
	CreateMassTransfer(ctx context.Context, in *CreateMassTransferRequest, opts ...grpc.CallOption) (*CreateMassTransferResponse, error)
	RunMassTransferJob(ctx context.Context, in *RunMassTransferJobRequest, opts ...grpc.CallOption) (*RunMassTransferJobResponse, error)
	RunMassTransferScheduledJob(ctx context.Context, in *RunMassTransferScheduledJobRequest, opts ...grpc.CallOption) (*RunMassTransferScheduledJobResponse, error)
}

type apiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiServiceClient(cc grpc.ClientConnInterface) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTaskInternalTransferSingleTemplate(ctx context.Context, in *GetTaskInternalTransferSingleTemplateRequest, opts ...grpc.CallOption) (*GetTaskInternalTransferSingleTemplateResponse, error) {
	out := new(GetTaskInternalTransferSingleTemplateResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/GetTaskInternalTransferSingleTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTaskInternalTransferSingleTemplateDetail(ctx context.Context, in *GetTaskInternalTransferSingleTemplateDetailRequest, opts ...grpc.CallOption) (*GetTaskInternalTransferSingleTemplateDetailResponse, error) {
	out := new(GetTaskInternalTransferSingleTemplateDetailResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/GetTaskInternalTransferSingleTemplateDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateTaskInternalTransferSingleTemplate(ctx context.Context, in *InternalTransferSingleTemplate, opts ...grpc.CallOption) (*CreateTaskInternalTransferSingleTemplateResponse, error) {
	out := new(CreateTaskInternalTransferSingleTemplateResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/CreateTaskInternalTransferSingleTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DeleteTaskInternalTransferSingleTemplate(ctx context.Context, in *DeleteTaskInternalTransferSingleTemplateRequest, opts ...grpc.CallOption) (*DeleteTaskInternalTransferSingleTemplateResponse, error) {
	out := new(DeleteTaskInternalTransferSingleTemplateResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/DeleteTaskInternalTransferSingleTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTaskInternalTransferFile(ctx context.Context, in *GetTaskInternalTransferFileRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/GetTaskInternalTransferFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTaskInternalTransfer(ctx context.Context, in *GetTaskInternalTransferRequest, opts ...grpc.CallOption) (*GetTaskInternalTransferResponse, error) {
	out := new(GetTaskInternalTransferResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/GetTaskInternalTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTaskInternalTransferDetail(ctx context.Context, in *GetTaskInternalTransferDetailRequest, opts ...grpc.CallOption) (*GetTaskInternalTransferDetailResponse, error) {
	out := new(GetTaskInternalTransferDetailResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/GetTaskInternalTransferDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateInternalTransferTransaction(ctx context.Context, in *CreateInternalTransferTransactionRequest, opts ...grpc.CallOption) (*CreateInternalTransferTransactionResponse, error) {
	out := new(CreateInternalTransferTransactionResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/CreateInternalTransferTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CancelInternalTransferTransaction(ctx context.Context, in *CancelInternalTransferTransactionRequest, opts ...grpc.CallOption) (*CancelInternalTransferTransactionResponse, error) {
	out := new(CancelInternalTransferTransactionResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/CancelInternalTransferTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SetTaskInternalTransfer(ctx context.Context, in *SetTaskInternalTransferRequest, opts ...grpc.CallOption) (*SetTaskInternalTransferResponse, error) {
	out := new(SetTaskInternalTransferResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/SetTaskInternalTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ExecInternalTransfer(ctx context.Context, in *ExecInternalTransferRequest, opts ...grpc.CallOption) (*ExecInternalTransferResponse, error) {
	out := new(ExecInternalTransferResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/ExecInternalTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateTaskInternalTransferSingle(ctx context.Context, in *CreateTaskInternalTransferSingleRequest, opts ...grpc.CallOption) (*CreateTaskInternalTransferSingleResponse, error) {
	out := new(CreateTaskInternalTransferSingleResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/CreateTaskInternalTransferSingle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateTaskInternalTransferMultiple(ctx context.Context, in *CreateTaskInternalTransferMultipleRequest, opts ...grpc.CallOption) (*CreateTaskInternalTransferMultipleResponse, error) {
	out := new(CreateTaskInternalTransferMultipleResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/CreateTaskInternalTransferMultiple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTaskExternalTransfer(ctx context.Context, in *GetTaskExternalTransferRequest, opts ...grpc.CallOption) (*GetTaskExternalTransferResponse, error) {
	out := new(GetTaskExternalTransferResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/GetTaskExternalTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTaskExternalTransferDetail(ctx context.Context, in *GetTaskExternalTransferDetailRequest, opts ...grpc.CallOption) (*GetTaskExternalTransferDetailResponse, error) {
	out := new(GetTaskExternalTransferDetailResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/GetTaskExternalTransferDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateExternalTransferTransaction(ctx context.Context, in *CreateExternalTransferTransactionRequest, opts ...grpc.CallOption) (*CreateExternalTransferTransactionResponse, error) {
	out := new(CreateExternalTransferTransactionResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/CreateExternalTransferTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SetTaskExternalTransfer(ctx context.Context, in *SetTaskExternalTransferRequest, opts ...grpc.CallOption) (*SetTaskExternalTransferResponse, error) {
	out := new(SetTaskExternalTransferResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/SetTaskExternalTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateTaskExternalTransferSingle(ctx context.Context, in *CreateTaskExternalTransferSingleRequest, opts ...grpc.CallOption) (*CreateTaskExternalTransferSingleResponse, error) {
	out := new(CreateTaskExternalTransferSingleResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/CreateTaskExternalTransferSingle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateTaskExternalTransferMultiple(ctx context.Context, in *CreateTaskExternalTransferMultipleRequest, opts ...grpc.CallOption) (*CreateTaskExternalTransferMultipleResponse, error) {
	out := new(CreateTaskExternalTransferMultipleResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/CreateTaskExternalTransferMultiple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTaskPayrollFile(ctx context.Context, in *GetTaskPayrollFileRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/GetTaskPayrollFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTaskPayroll(ctx context.Context, in *GetTaskPayrollRequest, opts ...grpc.CallOption) (*GetTaskPayrollResponse, error) {
	out := new(GetTaskPayrollResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/GetTaskPayroll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTaskPayrollDetail(ctx context.Context, in *GetTaskPayrollDetailRequest, opts ...grpc.CallOption) (*GetTaskPayrollDetailResponse, error) {
	out := new(GetTaskPayrollDetailResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/GetTaskPayrollDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateTaskPayroll(ctx context.Context, in *CreateTaskPayrollRequest, opts ...grpc.CallOption) (*CreateTaskPayrollResponse, error) {
	out := new(CreateTaskPayrollResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/CreateTaskPayroll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SetTaskPayroll(ctx context.Context, in *SetTaskPayrollRequest, opts ...grpc.CallOption) (*SetTaskPayrollResponse, error) {
	out := new(SetTaskPayrollResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/SetTaskPayroll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CancelTransferPayroll(ctx context.Context, in *CancelTransferPayrollRequest, opts ...grpc.CallOption) (*CancelTransferPayrollResponse, error) {
	out := new(CancelTransferPayrollResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/CancelTransferPayroll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) RunFileCheckingPayrollJob(ctx context.Context, in *RunFileCheckingPayrollJobRequest, opts ...grpc.CallOption) (*RunFileCheckingPayrollJobResponse, error) {
	out := new(RunFileCheckingPayrollJobResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/RunFileCheckingPayrollJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) RunMassInquiryJob(ctx context.Context, in *RunMassInquiryJobRequest, opts ...grpc.CallOption) (*RunMassInquiryJobResponse, error) {
	out := new(RunMassInquiryJobResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/RunMassInquiryJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateMassTransfer(ctx context.Context, in *CreateMassTransferRequest, opts ...grpc.CallOption) (*CreateMassTransferResponse, error) {
	out := new(CreateMassTransferResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/CreateMassTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) RunMassTransferJob(ctx context.Context, in *RunMassTransferJobRequest, opts ...grpc.CallOption) (*RunMassTransferJobResponse, error) {
	out := new(RunMassTransferJobResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/RunMassTransferJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) RunMassTransferScheduledJob(ctx context.Context, in *RunMassTransferScheduledJobRequest, opts ...grpc.CallOption) (*RunMassTransferScheduledJobResponse, error) {
	out := new(RunMassTransferScheduledJobResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/RunMassTransferScheduledJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServiceServer is the server API for ApiService service.
// All implementations must embed UnimplementedApiServiceServer
// for forward compatibility
type ApiServiceServer interface {
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	GetTaskInternalTransferSingleTemplate(context.Context, *GetTaskInternalTransferSingleTemplateRequest) (*GetTaskInternalTransferSingleTemplateResponse, error)
	GetTaskInternalTransferSingleTemplateDetail(context.Context, *GetTaskInternalTransferSingleTemplateDetailRequest) (*GetTaskInternalTransferSingleTemplateDetailResponse, error)
	CreateTaskInternalTransferSingleTemplate(context.Context, *InternalTransferSingleTemplate) (*CreateTaskInternalTransferSingleTemplateResponse, error)
	DeleteTaskInternalTransferSingleTemplate(context.Context, *DeleteTaskInternalTransferSingleTemplateRequest) (*DeleteTaskInternalTransferSingleTemplateResponse, error)
	GetTaskInternalTransferFile(context.Context, *GetTaskInternalTransferFileRequest) (*httpbody.HttpBody, error)
	GetTaskInternalTransfer(context.Context, *GetTaskInternalTransferRequest) (*GetTaskInternalTransferResponse, error)
	GetTaskInternalTransferDetail(context.Context, *GetTaskInternalTransferDetailRequest) (*GetTaskInternalTransferDetailResponse, error)
	CreateInternalTransferTransaction(context.Context, *CreateInternalTransferTransactionRequest) (*CreateInternalTransferTransactionResponse, error)
	CancelInternalTransferTransaction(context.Context, *CancelInternalTransferTransactionRequest) (*CancelInternalTransferTransactionResponse, error)
	SetTaskInternalTransfer(context.Context, *SetTaskInternalTransferRequest) (*SetTaskInternalTransferResponse, error)
	ExecInternalTransfer(context.Context, *ExecInternalTransferRequest) (*ExecInternalTransferResponse, error)
	CreateTaskInternalTransferSingle(context.Context, *CreateTaskInternalTransferSingleRequest) (*CreateTaskInternalTransferSingleResponse, error)
	CreateTaskInternalTransferMultiple(context.Context, *CreateTaskInternalTransferMultipleRequest) (*CreateTaskInternalTransferMultipleResponse, error)
	GetTaskExternalTransfer(context.Context, *GetTaskExternalTransferRequest) (*GetTaskExternalTransferResponse, error)
	GetTaskExternalTransferDetail(context.Context, *GetTaskExternalTransferDetailRequest) (*GetTaskExternalTransferDetailResponse, error)
	CreateExternalTransferTransaction(context.Context, *CreateExternalTransferTransactionRequest) (*CreateExternalTransferTransactionResponse, error)
	SetTaskExternalTransfer(context.Context, *SetTaskExternalTransferRequest) (*SetTaskExternalTransferResponse, error)
	CreateTaskExternalTransferSingle(context.Context, *CreateTaskExternalTransferSingleRequest) (*CreateTaskExternalTransferSingleResponse, error)
	CreateTaskExternalTransferMultiple(context.Context, *CreateTaskExternalTransferMultipleRequest) (*CreateTaskExternalTransferMultipleResponse, error)
	GetTaskPayrollFile(context.Context, *GetTaskPayrollFileRequest) (*httpbody.HttpBody, error)
	GetTaskPayroll(context.Context, *GetTaskPayrollRequest) (*GetTaskPayrollResponse, error)
	GetTaskPayrollDetail(context.Context, *GetTaskPayrollDetailRequest) (*GetTaskPayrollDetailResponse, error)
	CreateTaskPayroll(context.Context, *CreateTaskPayrollRequest) (*CreateTaskPayrollResponse, error)
	SetTaskPayroll(context.Context, *SetTaskPayrollRequest) (*SetTaskPayrollResponse, error)
	CancelTransferPayroll(context.Context, *CancelTransferPayrollRequest) (*CancelTransferPayrollResponse, error)
	RunFileCheckingPayrollJob(context.Context, *RunFileCheckingPayrollJobRequest) (*RunFileCheckingPayrollJobResponse, error)
	RunMassInquiryJob(context.Context, *RunMassInquiryJobRequest) (*RunMassInquiryJobResponse, error)
	CreateMassTransfer(context.Context, *CreateMassTransferRequest) (*CreateMassTransferResponse, error)
	RunMassTransferJob(context.Context, *RunMassTransferJobRequest) (*RunMassTransferJobResponse, error)
	RunMassTransferScheduledJob(context.Context, *RunMassTransferScheduledJobRequest) (*RunMassTransferScheduledJobResponse, error)
	mustEmbedUnimplementedApiServiceServer()
}

// UnimplementedApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApiServiceServer struct {
}

func (UnimplementedApiServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedApiServiceServer) GetTaskInternalTransferSingleTemplate(context.Context, *GetTaskInternalTransferSingleTemplateRequest) (*GetTaskInternalTransferSingleTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskInternalTransferSingleTemplate not implemented")
}
func (UnimplementedApiServiceServer) GetTaskInternalTransferSingleTemplateDetail(context.Context, *GetTaskInternalTransferSingleTemplateDetailRequest) (*GetTaskInternalTransferSingleTemplateDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskInternalTransferSingleTemplateDetail not implemented")
}
func (UnimplementedApiServiceServer) CreateTaskInternalTransferSingleTemplate(context.Context, *InternalTransferSingleTemplate) (*CreateTaskInternalTransferSingleTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskInternalTransferSingleTemplate not implemented")
}
func (UnimplementedApiServiceServer) DeleteTaskInternalTransferSingleTemplate(context.Context, *DeleteTaskInternalTransferSingleTemplateRequest) (*DeleteTaskInternalTransferSingleTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTaskInternalTransferSingleTemplate not implemented")
}
func (UnimplementedApiServiceServer) GetTaskInternalTransferFile(context.Context, *GetTaskInternalTransferFileRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskInternalTransferFile not implemented")
}
func (UnimplementedApiServiceServer) GetTaskInternalTransfer(context.Context, *GetTaskInternalTransferRequest) (*GetTaskInternalTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskInternalTransfer not implemented")
}
func (UnimplementedApiServiceServer) GetTaskInternalTransferDetail(context.Context, *GetTaskInternalTransferDetailRequest) (*GetTaskInternalTransferDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskInternalTransferDetail not implemented")
}
func (UnimplementedApiServiceServer) CreateInternalTransferTransaction(context.Context, *CreateInternalTransferTransactionRequest) (*CreateInternalTransferTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInternalTransferTransaction not implemented")
}
func (UnimplementedApiServiceServer) CancelInternalTransferTransaction(context.Context, *CancelInternalTransferTransactionRequest) (*CancelInternalTransferTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelInternalTransferTransaction not implemented")
}
func (UnimplementedApiServiceServer) SetTaskInternalTransfer(context.Context, *SetTaskInternalTransferRequest) (*SetTaskInternalTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTaskInternalTransfer not implemented")
}
func (UnimplementedApiServiceServer) ExecInternalTransfer(context.Context, *ExecInternalTransferRequest) (*ExecInternalTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecInternalTransfer not implemented")
}
func (UnimplementedApiServiceServer) CreateTaskInternalTransferSingle(context.Context, *CreateTaskInternalTransferSingleRequest) (*CreateTaskInternalTransferSingleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskInternalTransferSingle not implemented")
}
func (UnimplementedApiServiceServer) CreateTaskInternalTransferMultiple(context.Context, *CreateTaskInternalTransferMultipleRequest) (*CreateTaskInternalTransferMultipleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskInternalTransferMultiple not implemented")
}
func (UnimplementedApiServiceServer) GetTaskExternalTransfer(context.Context, *GetTaskExternalTransferRequest) (*GetTaskExternalTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskExternalTransfer not implemented")
}
func (UnimplementedApiServiceServer) GetTaskExternalTransferDetail(context.Context, *GetTaskExternalTransferDetailRequest) (*GetTaskExternalTransferDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskExternalTransferDetail not implemented")
}
func (UnimplementedApiServiceServer) CreateExternalTransferTransaction(context.Context, *CreateExternalTransferTransactionRequest) (*CreateExternalTransferTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExternalTransferTransaction not implemented")
}
func (UnimplementedApiServiceServer) SetTaskExternalTransfer(context.Context, *SetTaskExternalTransferRequest) (*SetTaskExternalTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTaskExternalTransfer not implemented")
}
func (UnimplementedApiServiceServer) CreateTaskExternalTransferSingle(context.Context, *CreateTaskExternalTransferSingleRequest) (*CreateTaskExternalTransferSingleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskExternalTransferSingle not implemented")
}
func (UnimplementedApiServiceServer) CreateTaskExternalTransferMultiple(context.Context, *CreateTaskExternalTransferMultipleRequest) (*CreateTaskExternalTransferMultipleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskExternalTransferMultiple not implemented")
}
func (UnimplementedApiServiceServer) GetTaskPayrollFile(context.Context, *GetTaskPayrollFileRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskPayrollFile not implemented")
}
func (UnimplementedApiServiceServer) GetTaskPayroll(context.Context, *GetTaskPayrollRequest) (*GetTaskPayrollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskPayroll not implemented")
}
func (UnimplementedApiServiceServer) GetTaskPayrollDetail(context.Context, *GetTaskPayrollDetailRequest) (*GetTaskPayrollDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskPayrollDetail not implemented")
}
func (UnimplementedApiServiceServer) CreateTaskPayroll(context.Context, *CreateTaskPayrollRequest) (*CreateTaskPayrollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskPayroll not implemented")
}
func (UnimplementedApiServiceServer) SetTaskPayroll(context.Context, *SetTaskPayrollRequest) (*SetTaskPayrollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTaskPayroll not implemented")
}
func (UnimplementedApiServiceServer) CancelTransferPayroll(context.Context, *CancelTransferPayrollRequest) (*CancelTransferPayrollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTransferPayroll not implemented")
}
func (UnimplementedApiServiceServer) RunFileCheckingPayrollJob(context.Context, *RunFileCheckingPayrollJobRequest) (*RunFileCheckingPayrollJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunFileCheckingPayrollJob not implemented")
}
func (UnimplementedApiServiceServer) RunMassInquiryJob(context.Context, *RunMassInquiryJobRequest) (*RunMassInquiryJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunMassInquiryJob not implemented")
}
func (UnimplementedApiServiceServer) CreateMassTransfer(context.Context, *CreateMassTransferRequest) (*CreateMassTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMassTransfer not implemented")
}
func (UnimplementedApiServiceServer) RunMassTransferJob(context.Context, *RunMassTransferJobRequest) (*RunMassTransferJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunMassTransferJob not implemented")
}
func (UnimplementedApiServiceServer) RunMassTransferScheduledJob(context.Context, *RunMassTransferScheduledJobRequest) (*RunMassTransferScheduledJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunMassTransferScheduledJob not implemented")
}
func (UnimplementedApiServiceServer) mustEmbedUnimplementedApiServiceServer() {}

// UnsafeApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServiceServer will
// result in compilation errors.
type UnsafeApiServiceServer interface {
	mustEmbedUnimplementedApiServiceServer()
}

func RegisterApiServiceServer(s grpc.ServiceRegistrar, srv ApiServiceServer) {
	s.RegisterService(&ApiService_ServiceDesc, srv)
}

func _ApiService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTaskInternalTransferSingleTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskInternalTransferSingleTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTaskInternalTransferSingleTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/GetTaskInternalTransferSingleTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTaskInternalTransferSingleTemplate(ctx, req.(*GetTaskInternalTransferSingleTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTaskInternalTransferSingleTemplateDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskInternalTransferSingleTemplateDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTaskInternalTransferSingleTemplateDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/GetTaskInternalTransferSingleTemplateDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTaskInternalTransferSingleTemplateDetail(ctx, req.(*GetTaskInternalTransferSingleTemplateDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateTaskInternalTransferSingleTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalTransferSingleTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateTaskInternalTransferSingleTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/CreateTaskInternalTransferSingleTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateTaskInternalTransferSingleTemplate(ctx, req.(*InternalTransferSingleTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DeleteTaskInternalTransferSingleTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskInternalTransferSingleTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DeleteTaskInternalTransferSingleTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/DeleteTaskInternalTransferSingleTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DeleteTaskInternalTransferSingleTemplate(ctx, req.(*DeleteTaskInternalTransferSingleTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTaskInternalTransferFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskInternalTransferFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTaskInternalTransferFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/GetTaskInternalTransferFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTaskInternalTransferFile(ctx, req.(*GetTaskInternalTransferFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTaskInternalTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskInternalTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTaskInternalTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/GetTaskInternalTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTaskInternalTransfer(ctx, req.(*GetTaskInternalTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTaskInternalTransferDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskInternalTransferDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTaskInternalTransferDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/GetTaskInternalTransferDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTaskInternalTransferDetail(ctx, req.(*GetTaskInternalTransferDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateInternalTransferTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInternalTransferTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateInternalTransferTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/CreateInternalTransferTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateInternalTransferTransaction(ctx, req.(*CreateInternalTransferTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CancelInternalTransferTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelInternalTransferTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CancelInternalTransferTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/CancelInternalTransferTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CancelInternalTransferTransaction(ctx, req.(*CancelInternalTransferTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SetTaskInternalTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTaskInternalTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SetTaskInternalTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/SetTaskInternalTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SetTaskInternalTransfer(ctx, req.(*SetTaskInternalTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ExecInternalTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecInternalTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ExecInternalTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/ExecInternalTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ExecInternalTransfer(ctx, req.(*ExecInternalTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateTaskInternalTransferSingle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskInternalTransferSingleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateTaskInternalTransferSingle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/CreateTaskInternalTransferSingle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateTaskInternalTransferSingle(ctx, req.(*CreateTaskInternalTransferSingleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateTaskInternalTransferMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskInternalTransferMultipleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateTaskInternalTransferMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/CreateTaskInternalTransferMultiple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateTaskInternalTransferMultiple(ctx, req.(*CreateTaskInternalTransferMultipleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTaskExternalTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskExternalTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTaskExternalTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/GetTaskExternalTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTaskExternalTransfer(ctx, req.(*GetTaskExternalTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTaskExternalTransferDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskExternalTransferDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTaskExternalTransferDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/GetTaskExternalTransferDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTaskExternalTransferDetail(ctx, req.(*GetTaskExternalTransferDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateExternalTransferTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExternalTransferTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateExternalTransferTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/CreateExternalTransferTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateExternalTransferTransaction(ctx, req.(*CreateExternalTransferTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SetTaskExternalTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTaskExternalTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SetTaskExternalTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/SetTaskExternalTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SetTaskExternalTransfer(ctx, req.(*SetTaskExternalTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateTaskExternalTransferSingle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskExternalTransferSingleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateTaskExternalTransferSingle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/CreateTaskExternalTransferSingle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateTaskExternalTransferSingle(ctx, req.(*CreateTaskExternalTransferSingleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateTaskExternalTransferMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskExternalTransferMultipleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateTaskExternalTransferMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/CreateTaskExternalTransferMultiple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateTaskExternalTransferMultiple(ctx, req.(*CreateTaskExternalTransferMultipleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTaskPayrollFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskPayrollFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTaskPayrollFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/GetTaskPayrollFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTaskPayrollFile(ctx, req.(*GetTaskPayrollFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTaskPayroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskPayrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTaskPayroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/GetTaskPayroll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTaskPayroll(ctx, req.(*GetTaskPayrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTaskPayrollDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskPayrollDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTaskPayrollDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/GetTaskPayrollDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTaskPayrollDetail(ctx, req.(*GetTaskPayrollDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateTaskPayroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskPayrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateTaskPayroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/CreateTaskPayroll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateTaskPayroll(ctx, req.(*CreateTaskPayrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SetTaskPayroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTaskPayrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SetTaskPayroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/SetTaskPayroll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SetTaskPayroll(ctx, req.(*SetTaskPayrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CancelTransferPayroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTransferPayrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CancelTransferPayroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/CancelTransferPayroll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CancelTransferPayroll(ctx, req.(*CancelTransferPayrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_RunFileCheckingPayrollJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunFileCheckingPayrollJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).RunFileCheckingPayrollJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/RunFileCheckingPayrollJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).RunFileCheckingPayrollJob(ctx, req.(*RunFileCheckingPayrollJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_RunMassInquiryJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunMassInquiryJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).RunMassInquiryJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/RunMassInquiryJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).RunMassInquiryJob(ctx, req.(*RunMassInquiryJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateMassTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMassTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateMassTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/CreateMassTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateMassTransfer(ctx, req.(*CreateMassTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_RunMassTransferJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunMassTransferJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).RunMassTransferJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/RunMassTransferJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).RunMassTransferJob(ctx, req.(*RunMassTransferJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_RunMassTransferScheduledJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunMassTransferScheduledJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).RunMassTransferScheduledJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/RunMassTransferScheduledJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).RunMassTransferScheduledJob(ctx, req.(*RunMassTransferScheduledJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiService_ServiceDesc is the grpc.ServiceDesc for ApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transfer.service.v1.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _ApiService_HealthCheck_Handler,
		},
		{
			MethodName: "GetTaskInternalTransferSingleTemplate",
			Handler:    _ApiService_GetTaskInternalTransferSingleTemplate_Handler,
		},
		{
			MethodName: "GetTaskInternalTransferSingleTemplateDetail",
			Handler:    _ApiService_GetTaskInternalTransferSingleTemplateDetail_Handler,
		},
		{
			MethodName: "CreateTaskInternalTransferSingleTemplate",
			Handler:    _ApiService_CreateTaskInternalTransferSingleTemplate_Handler,
		},
		{
			MethodName: "DeleteTaskInternalTransferSingleTemplate",
			Handler:    _ApiService_DeleteTaskInternalTransferSingleTemplate_Handler,
		},
		{
			MethodName: "GetTaskInternalTransferFile",
			Handler:    _ApiService_GetTaskInternalTransferFile_Handler,
		},
		{
			MethodName: "GetTaskInternalTransfer",
			Handler:    _ApiService_GetTaskInternalTransfer_Handler,
		},
		{
			MethodName: "GetTaskInternalTransferDetail",
			Handler:    _ApiService_GetTaskInternalTransferDetail_Handler,
		},
		{
			MethodName: "CreateInternalTransferTransaction",
			Handler:    _ApiService_CreateInternalTransferTransaction_Handler,
		},
		{
			MethodName: "CancelInternalTransferTransaction",
			Handler:    _ApiService_CancelInternalTransferTransaction_Handler,
		},
		{
			MethodName: "SetTaskInternalTransfer",
			Handler:    _ApiService_SetTaskInternalTransfer_Handler,
		},
		{
			MethodName: "ExecInternalTransfer",
			Handler:    _ApiService_ExecInternalTransfer_Handler,
		},
		{
			MethodName: "CreateTaskInternalTransferSingle",
			Handler:    _ApiService_CreateTaskInternalTransferSingle_Handler,
		},
		{
			MethodName: "CreateTaskInternalTransferMultiple",
			Handler:    _ApiService_CreateTaskInternalTransferMultiple_Handler,
		},
		{
			MethodName: "GetTaskExternalTransfer",
			Handler:    _ApiService_GetTaskExternalTransfer_Handler,
		},
		{
			MethodName: "GetTaskExternalTransferDetail",
			Handler:    _ApiService_GetTaskExternalTransferDetail_Handler,
		},
		{
			MethodName: "CreateExternalTransferTransaction",
			Handler:    _ApiService_CreateExternalTransferTransaction_Handler,
		},
		{
			MethodName: "SetTaskExternalTransfer",
			Handler:    _ApiService_SetTaskExternalTransfer_Handler,
		},
		{
			MethodName: "CreateTaskExternalTransferSingle",
			Handler:    _ApiService_CreateTaskExternalTransferSingle_Handler,
		},
		{
			MethodName: "CreateTaskExternalTransferMultiple",
			Handler:    _ApiService_CreateTaskExternalTransferMultiple_Handler,
		},
		{
			MethodName: "GetTaskPayrollFile",
			Handler:    _ApiService_GetTaskPayrollFile_Handler,
		},
		{
			MethodName: "GetTaskPayroll",
			Handler:    _ApiService_GetTaskPayroll_Handler,
		},
		{
			MethodName: "GetTaskPayrollDetail",
			Handler:    _ApiService_GetTaskPayrollDetail_Handler,
		},
		{
			MethodName: "CreateTaskPayroll",
			Handler:    _ApiService_CreateTaskPayroll_Handler,
		},
		{
			MethodName: "SetTaskPayroll",
			Handler:    _ApiService_SetTaskPayroll_Handler,
		},
		{
			MethodName: "CancelTransferPayroll",
			Handler:    _ApiService_CancelTransferPayroll_Handler,
		},
		{
			MethodName: "RunFileCheckingPayrollJob",
			Handler:    _ApiService_RunFileCheckingPayrollJob_Handler,
		},
		{
			MethodName: "RunMassInquiryJob",
			Handler:    _ApiService_RunMassInquiryJob_Handler,
		},
		{
			MethodName: "CreateMassTransfer",
			Handler:    _ApiService_CreateMassTransfer_Handler,
		},
		{
			MethodName: "RunMassTransferJob",
			Handler:    _ApiService_RunMassTransferJob_Handler,
		},
		{
			MethodName: "RunMassTransferScheduledJob",
			Handler:    _ApiService_RunMassTransferScheduledJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transfer_api.proto",
}
