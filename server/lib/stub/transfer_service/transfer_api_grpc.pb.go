// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: transfer_api.proto

package pb

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiServiceClient is the client API for ApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiServiceClient interface {
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	GetPairRate(ctx context.Context, in *GetPairRateRequest, opts ...grpc.CallOption) (*GetPairRateResponse, error)
	ExecInternalTransfer(ctx context.Context, in *ExecInternalTransferRequest, opts ...grpc.CallOption) (*ExecInternalTransferResponse, error)
	CreateInternalTransferTransaction(ctx context.Context, in *CreateInternalTransferTransactionRequest, opts ...grpc.CallOption) (*CreateInternalTransferTransactionResponse, error)
	CancelInternalTransferTransaction(ctx context.Context, in *CancelInternalTransferTransactionRequest, opts ...grpc.CallOption) (*CancelInternalTransferTransactionResponse, error)
	CreateMassInquiry(ctx context.Context, in *CreateMassInquiryRequest, opts ...grpc.CallOption) (*CreateMassInquiryResponse, error)
	CreateMassTransfer(ctx context.Context, in *CreateMassTransferRequest, opts ...grpc.CallOption) (*CreateMassTransferResponse, error)
	RunTransferJob(ctx context.Context, in *RunTransferJobRequest, opts ...grpc.CallOption) (*RunTransferJobResponse, error)
	GetTaskExternalTransfer(ctx context.Context, in *GetTaskExternalTransferRequest, opts ...grpc.CallOption) (*GetTaskExternalTransferResponse, error)
	GetTaskExternalTransferDetail(ctx context.Context, in *GetTaskExternalTransferDetailRequest, opts ...grpc.CallOption) (*GetTaskExternalTransferDetailResponse, error)
	CreateTaskExternalTransferSingle(ctx context.Context, in *CreateTaskExternalTransferSingleRequest, opts ...grpc.CallOption) (*CreateTaskExternalTransferSingleResponse, error)
	GetTaskInternalFile(ctx context.Context, in *GetTaskInternalFileRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	GetTaskInternalSingleTemplate(ctx context.Context, in *GetTaskInternalSingleTemplateRequest, opts ...grpc.CallOption) (*GetTaskInternalSingleTemplateResponse, error)
	GetTaskInternalSingleTemplateDetail(ctx context.Context, in *GetTaskInternalSingleTemplateDetailRequest, opts ...grpc.CallOption) (*GetTaskInternalSingleTemplateDetailResponse, error)
	CreateTaskInternalSingleTemplate(ctx context.Context, in *InternalSingleTemplate, opts ...grpc.CallOption) (*CreateTaskInternalSingleTemplateResponse, error)
	DeleteTaskInternalSingleTemplate(ctx context.Context, in *DeleteTaskInternalSingleTemplateRequest, opts ...grpc.CallOption) (*DeleteTaskInternalSingleTemplateResponse, error)
	GetTaskInternal(ctx context.Context, in *GetTaskInternalRequest, opts ...grpc.CallOption) (*GetTaskInternalResponse, error)
	GetTaskInternalDetail(ctx context.Context, in *GetTaskInternalDetailRequest, opts ...grpc.CallOption) (*GetTaskInternalDetailResponse, error)
	CreateTaskInternalSingle(ctx context.Context, in *CreateTaskInternalSingleRequest, opts ...grpc.CallOption) (*CreateTaskInternalSingleResponse, error)
	CreateTaskInternalMultiple(ctx context.Context, in *CreateTaskInternalMultipleRequest, opts ...grpc.CallOption) (*CreateTaskInternalMultipleResponse, error)
	SetTaskInternal(ctx context.Context, in *SetTaskInternalRequest, opts ...grpc.CallOption) (*SetTaskInternalResponse, error)
	DecodeBulkFile(ctx context.Context, in *DecodeBulkFileRequest, opts ...grpc.CallOption) (*DecodeBulkFileResponse, error)
	GetTaskInternalBulk(ctx context.Context, in *GetTaskInternalBulkRequest, opts ...grpc.CallOption) (*GetTaskInternalBulkResponse, error)
	GetTaskInternalBulkDetail(ctx context.Context, in *GetTaskInternalBulkDetailRequest, opts ...grpc.CallOption) (*GetTaskInternalBulkDetailResponse, error)
	CreateTaskInternalBulk(ctx context.Context, in *CreateTaskInternalBulkRequest, opts ...grpc.CallOption) (*CreateTaskInternalBulkResponse, error)
	DecodePayrollFile(ctx context.Context, in *DecodePayrollFileRequest, opts ...grpc.CallOption) (*DecodePayrollFileResponse, error)
	GetTaskPayrollFile(ctx context.Context, in *GetTaskPayrollFileRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	GetTaskPayroll(ctx context.Context, in *GetTaskPayrollRequest, opts ...grpc.CallOption) (*GetTaskPayrollResponse, error)
	GetTaskPayrollDetail(ctx context.Context, in *GetTaskPayrollDetailRequest, opts ...grpc.CallOption) (*GetTaskPayrollDetailResponse, error)
	CreateTaskPayroll(ctx context.Context, in *CreateTaskPayrollRequest, opts ...grpc.CallOption) (*CreateTaskPayrollResponse, error)
	RunMassInquiryJob(ctx context.Context, in *RunMassInquiryJobRequest, opts ...grpc.CallOption) (*RunMassInquiryJobResponse, error)
	RunMassTransferJob(ctx context.Context, in *RunMassTransferJobRequest, opts ...grpc.CallOption) (*RunMassTransferJobResponse, error)
	RunMassTransferScheduledJob(ctx context.Context, in *RunMassTransferScheduledJobRequest, opts ...grpc.CallOption) (*RunMassTransferScheduledJobResponse, error)
	SetTaskPayroll(ctx context.Context, in *SetTaskPayrollRequest, opts ...grpc.CallOption) (*SetTaskPayrollResponse, error)
	CancelTransferPayroll(ctx context.Context, in *CancelTransferPayrollRequest, opts ...grpc.CallOption) (*CancelTransferPayrollResponse, error)
}

type apiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiServiceClient(cc grpc.ClientConnInterface) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetPairRate(ctx context.Context, in *GetPairRateRequest, opts ...grpc.CallOption) (*GetPairRateResponse, error) {
	out := new(GetPairRateResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/GetPairRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ExecInternalTransfer(ctx context.Context, in *ExecInternalTransferRequest, opts ...grpc.CallOption) (*ExecInternalTransferResponse, error) {
	out := new(ExecInternalTransferResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/ExecInternalTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateInternalTransferTransaction(ctx context.Context, in *CreateInternalTransferTransactionRequest, opts ...grpc.CallOption) (*CreateInternalTransferTransactionResponse, error) {
	out := new(CreateInternalTransferTransactionResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/CreateInternalTransferTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CancelInternalTransferTransaction(ctx context.Context, in *CancelInternalTransferTransactionRequest, opts ...grpc.CallOption) (*CancelInternalTransferTransactionResponse, error) {
	out := new(CancelInternalTransferTransactionResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/CancelInternalTransferTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateMassInquiry(ctx context.Context, in *CreateMassInquiryRequest, opts ...grpc.CallOption) (*CreateMassInquiryResponse, error) {
	out := new(CreateMassInquiryResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/CreateMassInquiry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateMassTransfer(ctx context.Context, in *CreateMassTransferRequest, opts ...grpc.CallOption) (*CreateMassTransferResponse, error) {
	out := new(CreateMassTransferResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/CreateMassTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) RunTransferJob(ctx context.Context, in *RunTransferJobRequest, opts ...grpc.CallOption) (*RunTransferJobResponse, error) {
	out := new(RunTransferJobResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/RunTransferJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTaskExternalTransfer(ctx context.Context, in *GetTaskExternalTransferRequest, opts ...grpc.CallOption) (*GetTaskExternalTransferResponse, error) {
	out := new(GetTaskExternalTransferResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/GetTaskExternalTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTaskExternalTransferDetail(ctx context.Context, in *GetTaskExternalTransferDetailRequest, opts ...grpc.CallOption) (*GetTaskExternalTransferDetailResponse, error) {
	out := new(GetTaskExternalTransferDetailResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/GetTaskExternalTransferDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateTaskExternalTransferSingle(ctx context.Context, in *CreateTaskExternalTransferSingleRequest, opts ...grpc.CallOption) (*CreateTaskExternalTransferSingleResponse, error) {
	out := new(CreateTaskExternalTransferSingleResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/CreateTaskExternalTransferSingle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTaskInternalFile(ctx context.Context, in *GetTaskInternalFileRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/GetTaskInternalFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTaskInternalSingleTemplate(ctx context.Context, in *GetTaskInternalSingleTemplateRequest, opts ...grpc.CallOption) (*GetTaskInternalSingleTemplateResponse, error) {
	out := new(GetTaskInternalSingleTemplateResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/GetTaskInternalSingleTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTaskInternalSingleTemplateDetail(ctx context.Context, in *GetTaskInternalSingleTemplateDetailRequest, opts ...grpc.CallOption) (*GetTaskInternalSingleTemplateDetailResponse, error) {
	out := new(GetTaskInternalSingleTemplateDetailResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/GetTaskInternalSingleTemplateDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateTaskInternalSingleTemplate(ctx context.Context, in *InternalSingleTemplate, opts ...grpc.CallOption) (*CreateTaskInternalSingleTemplateResponse, error) {
	out := new(CreateTaskInternalSingleTemplateResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/CreateTaskInternalSingleTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DeleteTaskInternalSingleTemplate(ctx context.Context, in *DeleteTaskInternalSingleTemplateRequest, opts ...grpc.CallOption) (*DeleteTaskInternalSingleTemplateResponse, error) {
	out := new(DeleteTaskInternalSingleTemplateResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/DeleteTaskInternalSingleTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTaskInternal(ctx context.Context, in *GetTaskInternalRequest, opts ...grpc.CallOption) (*GetTaskInternalResponse, error) {
	out := new(GetTaskInternalResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/GetTaskInternal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTaskInternalDetail(ctx context.Context, in *GetTaskInternalDetailRequest, opts ...grpc.CallOption) (*GetTaskInternalDetailResponse, error) {
	out := new(GetTaskInternalDetailResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/GetTaskInternalDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateTaskInternalSingle(ctx context.Context, in *CreateTaskInternalSingleRequest, opts ...grpc.CallOption) (*CreateTaskInternalSingleResponse, error) {
	out := new(CreateTaskInternalSingleResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/CreateTaskInternalSingle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateTaskInternalMultiple(ctx context.Context, in *CreateTaskInternalMultipleRequest, opts ...grpc.CallOption) (*CreateTaskInternalMultipleResponse, error) {
	out := new(CreateTaskInternalMultipleResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/CreateTaskInternalMultiple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SetTaskInternal(ctx context.Context, in *SetTaskInternalRequest, opts ...grpc.CallOption) (*SetTaskInternalResponse, error) {
	out := new(SetTaskInternalResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/SetTaskInternal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DecodeBulkFile(ctx context.Context, in *DecodeBulkFileRequest, opts ...grpc.CallOption) (*DecodeBulkFileResponse, error) {
	out := new(DecodeBulkFileResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/DecodeBulkFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTaskInternalBulk(ctx context.Context, in *GetTaskInternalBulkRequest, opts ...grpc.CallOption) (*GetTaskInternalBulkResponse, error) {
	out := new(GetTaskInternalBulkResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/GetTaskInternalBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTaskInternalBulkDetail(ctx context.Context, in *GetTaskInternalBulkDetailRequest, opts ...grpc.CallOption) (*GetTaskInternalBulkDetailResponse, error) {
	out := new(GetTaskInternalBulkDetailResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/GetTaskInternalBulkDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateTaskInternalBulk(ctx context.Context, in *CreateTaskInternalBulkRequest, opts ...grpc.CallOption) (*CreateTaskInternalBulkResponse, error) {
	out := new(CreateTaskInternalBulkResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/CreateTaskInternalBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DecodePayrollFile(ctx context.Context, in *DecodePayrollFileRequest, opts ...grpc.CallOption) (*DecodePayrollFileResponse, error) {
	out := new(DecodePayrollFileResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/DecodePayrollFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTaskPayrollFile(ctx context.Context, in *GetTaskPayrollFileRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/GetTaskPayrollFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTaskPayroll(ctx context.Context, in *GetTaskPayrollRequest, opts ...grpc.CallOption) (*GetTaskPayrollResponse, error) {
	out := new(GetTaskPayrollResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/GetTaskPayroll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTaskPayrollDetail(ctx context.Context, in *GetTaskPayrollDetailRequest, opts ...grpc.CallOption) (*GetTaskPayrollDetailResponse, error) {
	out := new(GetTaskPayrollDetailResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/GetTaskPayrollDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateTaskPayroll(ctx context.Context, in *CreateTaskPayrollRequest, opts ...grpc.CallOption) (*CreateTaskPayrollResponse, error) {
	out := new(CreateTaskPayrollResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/CreateTaskPayroll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) RunMassInquiryJob(ctx context.Context, in *RunMassInquiryJobRequest, opts ...grpc.CallOption) (*RunMassInquiryJobResponse, error) {
	out := new(RunMassInquiryJobResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/RunMassInquiryJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) RunMassTransferJob(ctx context.Context, in *RunMassTransferJobRequest, opts ...grpc.CallOption) (*RunMassTransferJobResponse, error) {
	out := new(RunMassTransferJobResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/RunMassTransferJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) RunMassTransferScheduledJob(ctx context.Context, in *RunMassTransferScheduledJobRequest, opts ...grpc.CallOption) (*RunMassTransferScheduledJobResponse, error) {
	out := new(RunMassTransferScheduledJobResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/RunMassTransferScheduledJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SetTaskPayroll(ctx context.Context, in *SetTaskPayrollRequest, opts ...grpc.CallOption) (*SetTaskPayrollResponse, error) {
	out := new(SetTaskPayrollResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/SetTaskPayroll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CancelTransferPayroll(ctx context.Context, in *CancelTransferPayrollRequest, opts ...grpc.CallOption) (*CancelTransferPayrollResponse, error) {
	out := new(CancelTransferPayrollResponse)
	err := c.cc.Invoke(ctx, "/transfer.service.v1.ApiService/CancelTransferPayroll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServiceServer is the server API for ApiService service.
// All implementations must embed UnimplementedApiServiceServer
// for forward compatibility
type ApiServiceServer interface {
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	GetPairRate(context.Context, *GetPairRateRequest) (*GetPairRateResponse, error)
	ExecInternalTransfer(context.Context, *ExecInternalTransferRequest) (*ExecInternalTransferResponse, error)
	CreateInternalTransferTransaction(context.Context, *CreateInternalTransferTransactionRequest) (*CreateInternalTransferTransactionResponse, error)
	CancelInternalTransferTransaction(context.Context, *CancelInternalTransferTransactionRequest) (*CancelInternalTransferTransactionResponse, error)
	CreateMassInquiry(context.Context, *CreateMassInquiryRequest) (*CreateMassInquiryResponse, error)
	CreateMassTransfer(context.Context, *CreateMassTransferRequest) (*CreateMassTransferResponse, error)
	RunTransferJob(context.Context, *RunTransferJobRequest) (*RunTransferJobResponse, error)
	GetTaskExternalTransfer(context.Context, *GetTaskExternalTransferRequest) (*GetTaskExternalTransferResponse, error)
	GetTaskExternalTransferDetail(context.Context, *GetTaskExternalTransferDetailRequest) (*GetTaskExternalTransferDetailResponse, error)
	CreateTaskExternalTransferSingle(context.Context, *CreateTaskExternalTransferSingleRequest) (*CreateTaskExternalTransferSingleResponse, error)
	GetTaskInternalFile(context.Context, *GetTaskInternalFileRequest) (*httpbody.HttpBody, error)
	GetTaskInternalSingleTemplate(context.Context, *GetTaskInternalSingleTemplateRequest) (*GetTaskInternalSingleTemplateResponse, error)
	GetTaskInternalSingleTemplateDetail(context.Context, *GetTaskInternalSingleTemplateDetailRequest) (*GetTaskInternalSingleTemplateDetailResponse, error)
	CreateTaskInternalSingleTemplate(context.Context, *InternalSingleTemplate) (*CreateTaskInternalSingleTemplateResponse, error)
	DeleteTaskInternalSingleTemplate(context.Context, *DeleteTaskInternalSingleTemplateRequest) (*DeleteTaskInternalSingleTemplateResponse, error)
	GetTaskInternal(context.Context, *GetTaskInternalRequest) (*GetTaskInternalResponse, error)
	GetTaskInternalDetail(context.Context, *GetTaskInternalDetailRequest) (*GetTaskInternalDetailResponse, error)
	CreateTaskInternalSingle(context.Context, *CreateTaskInternalSingleRequest) (*CreateTaskInternalSingleResponse, error)
	CreateTaskInternalMultiple(context.Context, *CreateTaskInternalMultipleRequest) (*CreateTaskInternalMultipleResponse, error)
	SetTaskInternal(context.Context, *SetTaskInternalRequest) (*SetTaskInternalResponse, error)
	DecodeBulkFile(context.Context, *DecodeBulkFileRequest) (*DecodeBulkFileResponse, error)
	GetTaskInternalBulk(context.Context, *GetTaskInternalBulkRequest) (*GetTaskInternalBulkResponse, error)
	GetTaskInternalBulkDetail(context.Context, *GetTaskInternalBulkDetailRequest) (*GetTaskInternalBulkDetailResponse, error)
	CreateTaskInternalBulk(context.Context, *CreateTaskInternalBulkRequest) (*CreateTaskInternalBulkResponse, error)
	DecodePayrollFile(context.Context, *DecodePayrollFileRequest) (*DecodePayrollFileResponse, error)
	GetTaskPayrollFile(context.Context, *GetTaskPayrollFileRequest) (*httpbody.HttpBody, error)
	GetTaskPayroll(context.Context, *GetTaskPayrollRequest) (*GetTaskPayrollResponse, error)
	GetTaskPayrollDetail(context.Context, *GetTaskPayrollDetailRequest) (*GetTaskPayrollDetailResponse, error)
	CreateTaskPayroll(context.Context, *CreateTaskPayrollRequest) (*CreateTaskPayrollResponse, error)
	RunMassInquiryJob(context.Context, *RunMassInquiryJobRequest) (*RunMassInquiryJobResponse, error)
	RunMassTransferJob(context.Context, *RunMassTransferJobRequest) (*RunMassTransferJobResponse, error)
	RunMassTransferScheduledJob(context.Context, *RunMassTransferScheduledJobRequest) (*RunMassTransferScheduledJobResponse, error)
	SetTaskPayroll(context.Context, *SetTaskPayrollRequest) (*SetTaskPayrollResponse, error)
	CancelTransferPayroll(context.Context, *CancelTransferPayrollRequest) (*CancelTransferPayrollResponse, error)
	mustEmbedUnimplementedApiServiceServer()
}

// UnimplementedApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApiServiceServer struct {
}

func (UnimplementedApiServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedApiServiceServer) GetPairRate(context.Context, *GetPairRateRequest) (*GetPairRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPairRate not implemented")
}
func (UnimplementedApiServiceServer) ExecInternalTransfer(context.Context, *ExecInternalTransferRequest) (*ExecInternalTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecInternalTransfer not implemented")
}
func (UnimplementedApiServiceServer) CreateInternalTransferTransaction(context.Context, *CreateInternalTransferTransactionRequest) (*CreateInternalTransferTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInternalTransferTransaction not implemented")
}
func (UnimplementedApiServiceServer) CancelInternalTransferTransaction(context.Context, *CancelInternalTransferTransactionRequest) (*CancelInternalTransferTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelInternalTransferTransaction not implemented")
}
func (UnimplementedApiServiceServer) CreateMassInquiry(context.Context, *CreateMassInquiryRequest) (*CreateMassInquiryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMassInquiry not implemented")
}
func (UnimplementedApiServiceServer) CreateMassTransfer(context.Context, *CreateMassTransferRequest) (*CreateMassTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMassTransfer not implemented")
}
func (UnimplementedApiServiceServer) RunTransferJob(context.Context, *RunTransferJobRequest) (*RunTransferJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunTransferJob not implemented")
}
func (UnimplementedApiServiceServer) GetTaskExternalTransfer(context.Context, *GetTaskExternalTransferRequest) (*GetTaskExternalTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskExternalTransfer not implemented")
}
func (UnimplementedApiServiceServer) GetTaskExternalTransferDetail(context.Context, *GetTaskExternalTransferDetailRequest) (*GetTaskExternalTransferDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskExternalTransferDetail not implemented")
}
func (UnimplementedApiServiceServer) CreateTaskExternalTransferSingle(context.Context, *CreateTaskExternalTransferSingleRequest) (*CreateTaskExternalTransferSingleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskExternalTransferSingle not implemented")
}
func (UnimplementedApiServiceServer) GetTaskInternalFile(context.Context, *GetTaskInternalFileRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskInternalFile not implemented")
}
func (UnimplementedApiServiceServer) GetTaskInternalSingleTemplate(context.Context, *GetTaskInternalSingleTemplateRequest) (*GetTaskInternalSingleTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskInternalSingleTemplate not implemented")
}
func (UnimplementedApiServiceServer) GetTaskInternalSingleTemplateDetail(context.Context, *GetTaskInternalSingleTemplateDetailRequest) (*GetTaskInternalSingleTemplateDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskInternalSingleTemplateDetail not implemented")
}
func (UnimplementedApiServiceServer) CreateTaskInternalSingleTemplate(context.Context, *InternalSingleTemplate) (*CreateTaskInternalSingleTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskInternalSingleTemplate not implemented")
}
func (UnimplementedApiServiceServer) DeleteTaskInternalSingleTemplate(context.Context, *DeleteTaskInternalSingleTemplateRequest) (*DeleteTaskInternalSingleTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTaskInternalSingleTemplate not implemented")
}
func (UnimplementedApiServiceServer) GetTaskInternal(context.Context, *GetTaskInternalRequest) (*GetTaskInternalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskInternal not implemented")
}
func (UnimplementedApiServiceServer) GetTaskInternalDetail(context.Context, *GetTaskInternalDetailRequest) (*GetTaskInternalDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskInternalDetail not implemented")
}
func (UnimplementedApiServiceServer) CreateTaskInternalSingle(context.Context, *CreateTaskInternalSingleRequest) (*CreateTaskInternalSingleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskInternalSingle not implemented")
}
func (UnimplementedApiServiceServer) CreateTaskInternalMultiple(context.Context, *CreateTaskInternalMultipleRequest) (*CreateTaskInternalMultipleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskInternalMultiple not implemented")
}
func (UnimplementedApiServiceServer) SetTaskInternal(context.Context, *SetTaskInternalRequest) (*SetTaskInternalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTaskInternal not implemented")
}
func (UnimplementedApiServiceServer) DecodeBulkFile(context.Context, *DecodeBulkFileRequest) (*DecodeBulkFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecodeBulkFile not implemented")
}
func (UnimplementedApiServiceServer) GetTaskInternalBulk(context.Context, *GetTaskInternalBulkRequest) (*GetTaskInternalBulkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskInternalBulk not implemented")
}
func (UnimplementedApiServiceServer) GetTaskInternalBulkDetail(context.Context, *GetTaskInternalBulkDetailRequest) (*GetTaskInternalBulkDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskInternalBulkDetail not implemented")
}
func (UnimplementedApiServiceServer) CreateTaskInternalBulk(context.Context, *CreateTaskInternalBulkRequest) (*CreateTaskInternalBulkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskInternalBulk not implemented")
}
func (UnimplementedApiServiceServer) DecodePayrollFile(context.Context, *DecodePayrollFileRequest) (*DecodePayrollFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecodePayrollFile not implemented")
}
func (UnimplementedApiServiceServer) GetTaskPayrollFile(context.Context, *GetTaskPayrollFileRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskPayrollFile not implemented")
}
func (UnimplementedApiServiceServer) GetTaskPayroll(context.Context, *GetTaskPayrollRequest) (*GetTaskPayrollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskPayroll not implemented")
}
func (UnimplementedApiServiceServer) GetTaskPayrollDetail(context.Context, *GetTaskPayrollDetailRequest) (*GetTaskPayrollDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskPayrollDetail not implemented")
}
func (UnimplementedApiServiceServer) CreateTaskPayroll(context.Context, *CreateTaskPayrollRequest) (*CreateTaskPayrollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskPayroll not implemented")
}
func (UnimplementedApiServiceServer) RunMassInquiryJob(context.Context, *RunMassInquiryJobRequest) (*RunMassInquiryJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunMassInquiryJob not implemented")
}
func (UnimplementedApiServiceServer) RunMassTransferJob(context.Context, *RunMassTransferJobRequest) (*RunMassTransferJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunMassTransferJob not implemented")
}
func (UnimplementedApiServiceServer) RunMassTransferScheduledJob(context.Context, *RunMassTransferScheduledJobRequest) (*RunMassTransferScheduledJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunMassTransferScheduledJob not implemented")
}
func (UnimplementedApiServiceServer) SetTaskPayroll(context.Context, *SetTaskPayrollRequest) (*SetTaskPayrollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTaskPayroll not implemented")
}
func (UnimplementedApiServiceServer) CancelTransferPayroll(context.Context, *CancelTransferPayrollRequest) (*CancelTransferPayrollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTransferPayroll not implemented")
}
func (UnimplementedApiServiceServer) mustEmbedUnimplementedApiServiceServer() {}

// UnsafeApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServiceServer will
// result in compilation errors.
type UnsafeApiServiceServer interface {
	mustEmbedUnimplementedApiServiceServer()
}

func RegisterApiServiceServer(s grpc.ServiceRegistrar, srv ApiServiceServer) {
	s.RegisterService(&ApiService_ServiceDesc, srv)
}

func _ApiService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetPairRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPairRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetPairRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/GetPairRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetPairRate(ctx, req.(*GetPairRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ExecInternalTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecInternalTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ExecInternalTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/ExecInternalTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ExecInternalTransfer(ctx, req.(*ExecInternalTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateInternalTransferTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInternalTransferTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateInternalTransferTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/CreateInternalTransferTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateInternalTransferTransaction(ctx, req.(*CreateInternalTransferTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CancelInternalTransferTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelInternalTransferTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CancelInternalTransferTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/CancelInternalTransferTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CancelInternalTransferTransaction(ctx, req.(*CancelInternalTransferTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateMassInquiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMassInquiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateMassInquiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/CreateMassInquiry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateMassInquiry(ctx, req.(*CreateMassInquiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateMassTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMassTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateMassTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/CreateMassTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateMassTransfer(ctx, req.(*CreateMassTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_RunTransferJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunTransferJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).RunTransferJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/RunTransferJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).RunTransferJob(ctx, req.(*RunTransferJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTaskExternalTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskExternalTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTaskExternalTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/GetTaskExternalTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTaskExternalTransfer(ctx, req.(*GetTaskExternalTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTaskExternalTransferDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskExternalTransferDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTaskExternalTransferDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/GetTaskExternalTransferDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTaskExternalTransferDetail(ctx, req.(*GetTaskExternalTransferDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateTaskExternalTransferSingle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskExternalTransferSingleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateTaskExternalTransferSingle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/CreateTaskExternalTransferSingle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateTaskExternalTransferSingle(ctx, req.(*CreateTaskExternalTransferSingleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTaskInternalFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskInternalFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTaskInternalFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/GetTaskInternalFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTaskInternalFile(ctx, req.(*GetTaskInternalFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTaskInternalSingleTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskInternalSingleTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTaskInternalSingleTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/GetTaskInternalSingleTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTaskInternalSingleTemplate(ctx, req.(*GetTaskInternalSingleTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTaskInternalSingleTemplateDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskInternalSingleTemplateDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTaskInternalSingleTemplateDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/GetTaskInternalSingleTemplateDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTaskInternalSingleTemplateDetail(ctx, req.(*GetTaskInternalSingleTemplateDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateTaskInternalSingleTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalSingleTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateTaskInternalSingleTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/CreateTaskInternalSingleTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateTaskInternalSingleTemplate(ctx, req.(*InternalSingleTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DeleteTaskInternalSingleTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskInternalSingleTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DeleteTaskInternalSingleTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/DeleteTaskInternalSingleTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DeleteTaskInternalSingleTemplate(ctx, req.(*DeleteTaskInternalSingleTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTaskInternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskInternalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTaskInternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/GetTaskInternal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTaskInternal(ctx, req.(*GetTaskInternalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTaskInternalDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskInternalDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTaskInternalDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/GetTaskInternalDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTaskInternalDetail(ctx, req.(*GetTaskInternalDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateTaskInternalSingle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskInternalSingleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateTaskInternalSingle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/CreateTaskInternalSingle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateTaskInternalSingle(ctx, req.(*CreateTaskInternalSingleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateTaskInternalMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskInternalMultipleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateTaskInternalMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/CreateTaskInternalMultiple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateTaskInternalMultiple(ctx, req.(*CreateTaskInternalMultipleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SetTaskInternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTaskInternalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SetTaskInternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/SetTaskInternal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SetTaskInternal(ctx, req.(*SetTaskInternalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DecodeBulkFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecodeBulkFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DecodeBulkFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/DecodeBulkFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DecodeBulkFile(ctx, req.(*DecodeBulkFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTaskInternalBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskInternalBulkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTaskInternalBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/GetTaskInternalBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTaskInternalBulk(ctx, req.(*GetTaskInternalBulkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTaskInternalBulkDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskInternalBulkDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTaskInternalBulkDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/GetTaskInternalBulkDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTaskInternalBulkDetail(ctx, req.(*GetTaskInternalBulkDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateTaskInternalBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskInternalBulkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateTaskInternalBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/CreateTaskInternalBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateTaskInternalBulk(ctx, req.(*CreateTaskInternalBulkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DecodePayrollFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecodePayrollFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DecodePayrollFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/DecodePayrollFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DecodePayrollFile(ctx, req.(*DecodePayrollFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTaskPayrollFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskPayrollFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTaskPayrollFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/GetTaskPayrollFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTaskPayrollFile(ctx, req.(*GetTaskPayrollFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTaskPayroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskPayrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTaskPayroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/GetTaskPayroll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTaskPayroll(ctx, req.(*GetTaskPayrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTaskPayrollDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskPayrollDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTaskPayrollDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/GetTaskPayrollDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTaskPayrollDetail(ctx, req.(*GetTaskPayrollDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateTaskPayroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskPayrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateTaskPayroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/CreateTaskPayroll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateTaskPayroll(ctx, req.(*CreateTaskPayrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_RunMassInquiryJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunMassInquiryJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).RunMassInquiryJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/RunMassInquiryJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).RunMassInquiryJob(ctx, req.(*RunMassInquiryJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_RunMassTransferJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunMassTransferJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).RunMassTransferJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/RunMassTransferJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).RunMassTransferJob(ctx, req.(*RunMassTransferJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_RunMassTransferScheduledJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunMassTransferScheduledJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).RunMassTransferScheduledJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/RunMassTransferScheduledJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).RunMassTransferScheduledJob(ctx, req.(*RunMassTransferScheduledJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SetTaskPayroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTaskPayrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SetTaskPayroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/SetTaskPayroll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SetTaskPayroll(ctx, req.(*SetTaskPayrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CancelTransferPayroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTransferPayrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CancelTransferPayroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.service.v1.ApiService/CancelTransferPayroll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CancelTransferPayroll(ctx, req.(*CancelTransferPayrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiService_ServiceDesc is the grpc.ServiceDesc for ApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transfer.service.v1.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _ApiService_HealthCheck_Handler,
		},
		{
			MethodName: "GetPairRate",
			Handler:    _ApiService_GetPairRate_Handler,
		},
		{
			MethodName: "ExecInternalTransfer",
			Handler:    _ApiService_ExecInternalTransfer_Handler,
		},
		{
			MethodName: "CreateInternalTransferTransaction",
			Handler:    _ApiService_CreateInternalTransferTransaction_Handler,
		},
		{
			MethodName: "CancelInternalTransferTransaction",
			Handler:    _ApiService_CancelInternalTransferTransaction_Handler,
		},
		{
			MethodName: "CreateMassInquiry",
			Handler:    _ApiService_CreateMassInquiry_Handler,
		},
		{
			MethodName: "CreateMassTransfer",
			Handler:    _ApiService_CreateMassTransfer_Handler,
		},
		{
			MethodName: "RunTransferJob",
			Handler:    _ApiService_RunTransferJob_Handler,
		},
		{
			MethodName: "GetTaskExternalTransfer",
			Handler:    _ApiService_GetTaskExternalTransfer_Handler,
		},
		{
			MethodName: "GetTaskExternalTransferDetail",
			Handler:    _ApiService_GetTaskExternalTransferDetail_Handler,
		},
		{
			MethodName: "CreateTaskExternalTransferSingle",
			Handler:    _ApiService_CreateTaskExternalTransferSingle_Handler,
		},
		{
			MethodName: "GetTaskInternalFile",
			Handler:    _ApiService_GetTaskInternalFile_Handler,
		},
		{
			MethodName: "GetTaskInternalSingleTemplate",
			Handler:    _ApiService_GetTaskInternalSingleTemplate_Handler,
		},
		{
			MethodName: "GetTaskInternalSingleTemplateDetail",
			Handler:    _ApiService_GetTaskInternalSingleTemplateDetail_Handler,
		},
		{
			MethodName: "CreateTaskInternalSingleTemplate",
			Handler:    _ApiService_CreateTaskInternalSingleTemplate_Handler,
		},
		{
			MethodName: "DeleteTaskInternalSingleTemplate",
			Handler:    _ApiService_DeleteTaskInternalSingleTemplate_Handler,
		},
		{
			MethodName: "GetTaskInternal",
			Handler:    _ApiService_GetTaskInternal_Handler,
		},
		{
			MethodName: "GetTaskInternalDetail",
			Handler:    _ApiService_GetTaskInternalDetail_Handler,
		},
		{
			MethodName: "CreateTaskInternalSingle",
			Handler:    _ApiService_CreateTaskInternalSingle_Handler,
		},
		{
			MethodName: "CreateTaskInternalMultiple",
			Handler:    _ApiService_CreateTaskInternalMultiple_Handler,
		},
		{
			MethodName: "SetTaskInternal",
			Handler:    _ApiService_SetTaskInternal_Handler,
		},
		{
			MethodName: "DecodeBulkFile",
			Handler:    _ApiService_DecodeBulkFile_Handler,
		},
		{
			MethodName: "GetTaskInternalBulk",
			Handler:    _ApiService_GetTaskInternalBulk_Handler,
		},
		{
			MethodName: "GetTaskInternalBulkDetail",
			Handler:    _ApiService_GetTaskInternalBulkDetail_Handler,
		},
		{
			MethodName: "CreateTaskInternalBulk",
			Handler:    _ApiService_CreateTaskInternalBulk_Handler,
		},
		{
			MethodName: "DecodePayrollFile",
			Handler:    _ApiService_DecodePayrollFile_Handler,
		},
		{
			MethodName: "GetTaskPayrollFile",
			Handler:    _ApiService_GetTaskPayrollFile_Handler,
		},
		{
			MethodName: "GetTaskPayroll",
			Handler:    _ApiService_GetTaskPayroll_Handler,
		},
		{
			MethodName: "GetTaskPayrollDetail",
			Handler:    _ApiService_GetTaskPayrollDetail_Handler,
		},
		{
			MethodName: "CreateTaskPayroll",
			Handler:    _ApiService_CreateTaskPayroll_Handler,
		},
		{
			MethodName: "RunMassInquiryJob",
			Handler:    _ApiService_RunMassInquiryJob_Handler,
		},
		{
			MethodName: "RunMassTransferJob",
			Handler:    _ApiService_RunMassTransferJob_Handler,
		},
		{
			MethodName: "RunMassTransferScheduledJob",
			Handler:    _ApiService_RunMassTransferScheduledJob_Handler,
		},
		{
			MethodName: "SetTaskPayroll",
			Handler:    _ApiService_SetTaskPayroll_Handler,
		},
		{
			MethodName: "CancelTransferPayroll",
			Handler:    _ApiService_CancelTransferPayroll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transfer_api.proto",
}
