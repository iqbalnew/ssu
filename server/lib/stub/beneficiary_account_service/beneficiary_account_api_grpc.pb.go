// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: beneficiary_account_api.proto

package pb

import (
	context "context"

	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiServiceClient is the client API for ApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiServiceClient interface {
	HealthCheck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	ListBeneficiaryAccount(ctx context.Context, in *ListBeneficiaryAccountRequest, opts ...grpc.CallOption) (*ListBeneficiaryAccountResponse, error)
	CreateBeneficiaryAccount(ctx context.Context, in *CreateBeneficiaryAccountRequest, opts ...grpc.CallOption) (*CreateBeneficiaryAccountResponse, error)
	CreateBeneficiaryAccountTask(ctx context.Context, in *CreateBeneficiaryAccountTaskRequest, opts ...grpc.CallOption) (*CreateBeneficiaryAccountTaskResponse, error)
	CreateBeneficiaryAccountTaskMultiple(ctx context.Context, in *CreateBeneficiaryAccountTaskBulkRequest, opts ...grpc.CallOption) (*CreateBeneficiaryAccountTaskResponse, error)
	CreateBeneficiaryAccountTaskMultipleNoParrent(ctx context.Context, in *CreateBeneficiaryAccountTaskBulkRequest, opts ...grpc.CallOption) (*CreateBeneficiaryAccountTaskMultipleResponse, error)
	ListBeneficiaryAccountTask(ctx context.Context, in *ListBeneficiaryAccountTaskRequest, opts ...grpc.CallOption) (*ListBeneficiaryAccountTaskResponse, error)
	GetBeneficiaryAccountTaskByID(ctx context.Context, in *GetBeneficiaryAccountTaskByIDRequest, opts ...grpc.CallOption) (*ListBeneficiaryAccountTaskResponse, error)
	RequestDeleteBeneficiaryAccountTask(ctx context.Context, in *GetBeneficiaryAccountTaskByIDRequest, opts ...grpc.CallOption) (*ListBeneficiaryAccountTaskResponse, error)
	ValidateBeneficiaryAccount(ctx context.Context, in *ValidateBeneficiaryAccountRequest, opts ...grpc.CallOption) (*ValidateBeneficiaryAccountResponse, error)
	BeneficiaryAccountDetail(ctx context.Context, in *BeneficiaryAccountDetailRequest, opts ...grpc.CallOption) (*BeneficiaryAccountDetailResponse, error)
	UpdateBeneficiaryAccountRole(ctx context.Context, in *UpdateBeneficiaryAccountRoleRequest, opts ...grpc.CallOption) (*UpdateBeneficiaryAccountRoleResponse, error)
	DownloadListBeneficiaryAccountTasks(ctx context.Context, in *FileListBeneficiaryAccountTaskRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	DownloadTemplate(ctx context.Context, in *FileListTemplateRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	CekBeneficiaryAccountAvaibility(ctx context.Context, in *CekBeneficiaryAccountAvaibilityReq, opts ...grpc.CallOption) (*CekBeneficiaryAccountAvaibilityRes, error)
	ListBank(ctx context.Context, in *ListBankReq, opts ...grpc.CallOption) (*ListBankRes, error)
	BankDetail(ctx context.Context, in *BankDetailRequest, opts ...grpc.CallOption) (*BankDetailResponse, error)
}

type apiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiServiceClient(cc grpc.ClientConnInterface) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) HealthCheck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/beneficiary.account.service.v1.ApiService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListBeneficiaryAccount(ctx context.Context, in *ListBeneficiaryAccountRequest, opts ...grpc.CallOption) (*ListBeneficiaryAccountResponse, error) {
	out := new(ListBeneficiaryAccountResponse)
	err := c.cc.Invoke(ctx, "/beneficiary.account.service.v1.ApiService/ListBeneficiaryAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateBeneficiaryAccount(ctx context.Context, in *CreateBeneficiaryAccountRequest, opts ...grpc.CallOption) (*CreateBeneficiaryAccountResponse, error) {
	out := new(CreateBeneficiaryAccountResponse)
	err := c.cc.Invoke(ctx, "/beneficiary.account.service.v1.ApiService/CreateBeneficiaryAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateBeneficiaryAccountTask(ctx context.Context, in *CreateBeneficiaryAccountTaskRequest, opts ...grpc.CallOption) (*CreateBeneficiaryAccountTaskResponse, error) {
	out := new(CreateBeneficiaryAccountTaskResponse)
	err := c.cc.Invoke(ctx, "/beneficiary.account.service.v1.ApiService/CreateBeneficiaryAccountTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateBeneficiaryAccountTaskMultiple(ctx context.Context, in *CreateBeneficiaryAccountTaskBulkRequest, opts ...grpc.CallOption) (*CreateBeneficiaryAccountTaskResponse, error) {
	out := new(CreateBeneficiaryAccountTaskResponse)
	err := c.cc.Invoke(ctx, "/beneficiary.account.service.v1.ApiService/CreateBeneficiaryAccountTaskMultiple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateBeneficiaryAccountTaskMultipleNoParrent(ctx context.Context, in *CreateBeneficiaryAccountTaskBulkRequest, opts ...grpc.CallOption) (*CreateBeneficiaryAccountTaskMultipleResponse, error) {
	out := new(CreateBeneficiaryAccountTaskMultipleResponse)
	err := c.cc.Invoke(ctx, "/beneficiary.account.service.v1.ApiService/CreateBeneficiaryAccountTaskMultipleNoParrent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListBeneficiaryAccountTask(ctx context.Context, in *ListBeneficiaryAccountTaskRequest, opts ...grpc.CallOption) (*ListBeneficiaryAccountTaskResponse, error) {
	out := new(ListBeneficiaryAccountTaskResponse)
	err := c.cc.Invoke(ctx, "/beneficiary.account.service.v1.ApiService/ListBeneficiaryAccountTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetBeneficiaryAccountTaskByID(ctx context.Context, in *GetBeneficiaryAccountTaskByIDRequest, opts ...grpc.CallOption) (*ListBeneficiaryAccountTaskResponse, error) {
	out := new(ListBeneficiaryAccountTaskResponse)
	err := c.cc.Invoke(ctx, "/beneficiary.account.service.v1.ApiService/GetBeneficiaryAccountTaskByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) RequestDeleteBeneficiaryAccountTask(ctx context.Context, in *GetBeneficiaryAccountTaskByIDRequest, opts ...grpc.CallOption) (*ListBeneficiaryAccountTaskResponse, error) {
	out := new(ListBeneficiaryAccountTaskResponse)
	err := c.cc.Invoke(ctx, "/beneficiary.account.service.v1.ApiService/RequestDeleteBeneficiaryAccountTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ValidateBeneficiaryAccount(ctx context.Context, in *ValidateBeneficiaryAccountRequest, opts ...grpc.CallOption) (*ValidateBeneficiaryAccountResponse, error) {
	out := new(ValidateBeneficiaryAccountResponse)
	err := c.cc.Invoke(ctx, "/beneficiary.account.service.v1.ApiService/ValidateBeneficiaryAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BeneficiaryAccountDetail(ctx context.Context, in *BeneficiaryAccountDetailRequest, opts ...grpc.CallOption) (*BeneficiaryAccountDetailResponse, error) {
	out := new(BeneficiaryAccountDetailResponse)
	err := c.cc.Invoke(ctx, "/beneficiary.account.service.v1.ApiService/BeneficiaryAccountDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateBeneficiaryAccountRole(ctx context.Context, in *UpdateBeneficiaryAccountRoleRequest, opts ...grpc.CallOption) (*UpdateBeneficiaryAccountRoleResponse, error) {
	out := new(UpdateBeneficiaryAccountRoleResponse)
	err := c.cc.Invoke(ctx, "/beneficiary.account.service.v1.ApiService/UpdateBeneficiaryAccountRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DownloadListBeneficiaryAccountTasks(ctx context.Context, in *FileListBeneficiaryAccountTaskRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/beneficiary.account.service.v1.ApiService/DownloadListBeneficiaryAccountTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DownloadTemplate(ctx context.Context, in *FileListTemplateRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/beneficiary.account.service.v1.ApiService/DownloadTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CekBeneficiaryAccountAvaibility(ctx context.Context, in *CekBeneficiaryAccountAvaibilityReq, opts ...grpc.CallOption) (*CekBeneficiaryAccountAvaibilityRes, error) {
	out := new(CekBeneficiaryAccountAvaibilityRes)
	err := c.cc.Invoke(ctx, "/beneficiary.account.service.v1.ApiService/CekBeneficiaryAccountAvaibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListBank(ctx context.Context, in *ListBankReq, opts ...grpc.CallOption) (*ListBankRes, error) {
	out := new(ListBankRes)
	err := c.cc.Invoke(ctx, "/beneficiary.account.service.v1.ApiService/ListBank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BankDetail(ctx context.Context, in *BankDetailRequest, opts ...grpc.CallOption) (*BankDetailResponse, error) {
	out := new(BankDetailResponse)
	err := c.cc.Invoke(ctx, "/beneficiary.account.service.v1.ApiService/BankDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServiceServer is the server API for ApiService service.
// All implementations must embed UnimplementedApiServiceServer
// for forward compatibility
type ApiServiceServer interface {
	HealthCheck(context.Context, *Empty) (*HealthCheckResponse, error)
	ListBeneficiaryAccount(context.Context, *ListBeneficiaryAccountRequest) (*ListBeneficiaryAccountResponse, error)
	CreateBeneficiaryAccount(context.Context, *CreateBeneficiaryAccountRequest) (*CreateBeneficiaryAccountResponse, error)
	CreateBeneficiaryAccountTask(context.Context, *CreateBeneficiaryAccountTaskRequest) (*CreateBeneficiaryAccountTaskResponse, error)
	CreateBeneficiaryAccountTaskMultiple(context.Context, *CreateBeneficiaryAccountTaskBulkRequest) (*CreateBeneficiaryAccountTaskResponse, error)
	CreateBeneficiaryAccountTaskMultipleNoParrent(context.Context, *CreateBeneficiaryAccountTaskBulkRequest) (*CreateBeneficiaryAccountTaskMultipleResponse, error)
	ListBeneficiaryAccountTask(context.Context, *ListBeneficiaryAccountTaskRequest) (*ListBeneficiaryAccountTaskResponse, error)
	GetBeneficiaryAccountTaskByID(context.Context, *GetBeneficiaryAccountTaskByIDRequest) (*ListBeneficiaryAccountTaskResponse, error)
	RequestDeleteBeneficiaryAccountTask(context.Context, *GetBeneficiaryAccountTaskByIDRequest) (*ListBeneficiaryAccountTaskResponse, error)
	ValidateBeneficiaryAccount(context.Context, *ValidateBeneficiaryAccountRequest) (*ValidateBeneficiaryAccountResponse, error)
	BeneficiaryAccountDetail(context.Context, *BeneficiaryAccountDetailRequest) (*BeneficiaryAccountDetailResponse, error)
	UpdateBeneficiaryAccountRole(context.Context, *UpdateBeneficiaryAccountRoleRequest) (*UpdateBeneficiaryAccountRoleResponse, error)
	DownloadListBeneficiaryAccountTasks(context.Context, *FileListBeneficiaryAccountTaskRequest) (*httpbody.HttpBody, error)
	DownloadTemplate(context.Context, *FileListTemplateRequest) (*httpbody.HttpBody, error)
	CekBeneficiaryAccountAvaibility(context.Context, *CekBeneficiaryAccountAvaibilityReq) (*CekBeneficiaryAccountAvaibilityRes, error)
	ListBank(context.Context, *ListBankReq) (*ListBankRes, error)
	BankDetail(context.Context, *BankDetailRequest) (*BankDetailResponse, error)
	mustEmbedUnimplementedApiServiceServer()
}

// UnimplementedApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApiServiceServer struct {
}

func (UnimplementedApiServiceServer) HealthCheck(context.Context, *Empty) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedApiServiceServer) ListBeneficiaryAccount(context.Context, *ListBeneficiaryAccountRequest) (*ListBeneficiaryAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBeneficiaryAccount not implemented")
}
func (UnimplementedApiServiceServer) CreateBeneficiaryAccount(context.Context, *CreateBeneficiaryAccountRequest) (*CreateBeneficiaryAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBeneficiaryAccount not implemented")
}
func (UnimplementedApiServiceServer) CreateBeneficiaryAccountTask(context.Context, *CreateBeneficiaryAccountTaskRequest) (*CreateBeneficiaryAccountTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBeneficiaryAccountTask not implemented")
}
func (UnimplementedApiServiceServer) CreateBeneficiaryAccountTaskMultiple(context.Context, *CreateBeneficiaryAccountTaskBulkRequest) (*CreateBeneficiaryAccountTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBeneficiaryAccountTaskMultiple not implemented")
}
func (UnimplementedApiServiceServer) CreateBeneficiaryAccountTaskMultipleNoParrent(context.Context, *CreateBeneficiaryAccountTaskBulkRequest) (*CreateBeneficiaryAccountTaskMultipleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBeneficiaryAccountTaskMultipleNoParrent not implemented")
}
func (UnimplementedApiServiceServer) ListBeneficiaryAccountTask(context.Context, *ListBeneficiaryAccountTaskRequest) (*ListBeneficiaryAccountTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBeneficiaryAccountTask not implemented")
}
func (UnimplementedApiServiceServer) GetBeneficiaryAccountTaskByID(context.Context, *GetBeneficiaryAccountTaskByIDRequest) (*ListBeneficiaryAccountTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeneficiaryAccountTaskByID not implemented")
}
func (UnimplementedApiServiceServer) RequestDeleteBeneficiaryAccountTask(context.Context, *GetBeneficiaryAccountTaskByIDRequest) (*ListBeneficiaryAccountTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestDeleteBeneficiaryAccountTask not implemented")
}
func (UnimplementedApiServiceServer) ValidateBeneficiaryAccount(context.Context, *ValidateBeneficiaryAccountRequest) (*ValidateBeneficiaryAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateBeneficiaryAccount not implemented")
}
func (UnimplementedApiServiceServer) BeneficiaryAccountDetail(context.Context, *BeneficiaryAccountDetailRequest) (*BeneficiaryAccountDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeneficiaryAccountDetail not implemented")
}
func (UnimplementedApiServiceServer) UpdateBeneficiaryAccountRole(context.Context, *UpdateBeneficiaryAccountRoleRequest) (*UpdateBeneficiaryAccountRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBeneficiaryAccountRole not implemented")
}
func (UnimplementedApiServiceServer) DownloadListBeneficiaryAccountTasks(context.Context, *FileListBeneficiaryAccountTaskRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadListBeneficiaryAccountTasks not implemented")
}
func (UnimplementedApiServiceServer) DownloadTemplate(context.Context, *FileListTemplateRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadTemplate not implemented")
}
func (UnimplementedApiServiceServer) CekBeneficiaryAccountAvaibility(context.Context, *CekBeneficiaryAccountAvaibilityReq) (*CekBeneficiaryAccountAvaibilityRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CekBeneficiaryAccountAvaibility not implemented")
}
func (UnimplementedApiServiceServer) ListBank(context.Context, *ListBankReq) (*ListBankRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBank not implemented")
}
func (UnimplementedApiServiceServer) BankDetail(context.Context, *BankDetailRequest) (*BankDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BankDetail not implemented")
}
func (UnimplementedApiServiceServer) mustEmbedUnimplementedApiServiceServer() {}

// UnsafeApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServiceServer will
// result in compilation errors.
type UnsafeApiServiceServer interface {
	mustEmbedUnimplementedApiServiceServer()
}

func RegisterApiServiceServer(s grpc.ServiceRegistrar, srv ApiServiceServer) {
	s.RegisterService(&ApiService_ServiceDesc, srv)
}

func _ApiService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beneficiary.account.service.v1.ApiService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).HealthCheck(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListBeneficiaryAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBeneficiaryAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListBeneficiaryAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beneficiary.account.service.v1.ApiService/ListBeneficiaryAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListBeneficiaryAccount(ctx, req.(*ListBeneficiaryAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateBeneficiaryAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBeneficiaryAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateBeneficiaryAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beneficiary.account.service.v1.ApiService/CreateBeneficiaryAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateBeneficiaryAccount(ctx, req.(*CreateBeneficiaryAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateBeneficiaryAccountTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBeneficiaryAccountTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateBeneficiaryAccountTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beneficiary.account.service.v1.ApiService/CreateBeneficiaryAccountTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateBeneficiaryAccountTask(ctx, req.(*CreateBeneficiaryAccountTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateBeneficiaryAccountTaskMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBeneficiaryAccountTaskBulkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateBeneficiaryAccountTaskMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beneficiary.account.service.v1.ApiService/CreateBeneficiaryAccountTaskMultiple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateBeneficiaryAccountTaskMultiple(ctx, req.(*CreateBeneficiaryAccountTaskBulkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateBeneficiaryAccountTaskMultipleNoParrent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBeneficiaryAccountTaskBulkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateBeneficiaryAccountTaskMultipleNoParrent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beneficiary.account.service.v1.ApiService/CreateBeneficiaryAccountTaskMultipleNoParrent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateBeneficiaryAccountTaskMultipleNoParrent(ctx, req.(*CreateBeneficiaryAccountTaskBulkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListBeneficiaryAccountTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBeneficiaryAccountTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListBeneficiaryAccountTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beneficiary.account.service.v1.ApiService/ListBeneficiaryAccountTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListBeneficiaryAccountTask(ctx, req.(*ListBeneficiaryAccountTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetBeneficiaryAccountTaskByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBeneficiaryAccountTaskByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetBeneficiaryAccountTaskByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beneficiary.account.service.v1.ApiService/GetBeneficiaryAccountTaskByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetBeneficiaryAccountTaskByID(ctx, req.(*GetBeneficiaryAccountTaskByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_RequestDeleteBeneficiaryAccountTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBeneficiaryAccountTaskByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).RequestDeleteBeneficiaryAccountTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beneficiary.account.service.v1.ApiService/RequestDeleteBeneficiaryAccountTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).RequestDeleteBeneficiaryAccountTask(ctx, req.(*GetBeneficiaryAccountTaskByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ValidateBeneficiaryAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateBeneficiaryAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ValidateBeneficiaryAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beneficiary.account.service.v1.ApiService/ValidateBeneficiaryAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ValidateBeneficiaryAccount(ctx, req.(*ValidateBeneficiaryAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BeneficiaryAccountDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeneficiaryAccountDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BeneficiaryAccountDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beneficiary.account.service.v1.ApiService/BeneficiaryAccountDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BeneficiaryAccountDetail(ctx, req.(*BeneficiaryAccountDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UpdateBeneficiaryAccountRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBeneficiaryAccountRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UpdateBeneficiaryAccountRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beneficiary.account.service.v1.ApiService/UpdateBeneficiaryAccountRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UpdateBeneficiaryAccountRole(ctx, req.(*UpdateBeneficiaryAccountRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DownloadListBeneficiaryAccountTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileListBeneficiaryAccountTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DownloadListBeneficiaryAccountTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beneficiary.account.service.v1.ApiService/DownloadListBeneficiaryAccountTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DownloadListBeneficiaryAccountTasks(ctx, req.(*FileListBeneficiaryAccountTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DownloadTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileListTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DownloadTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beneficiary.account.service.v1.ApiService/DownloadTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DownloadTemplate(ctx, req.(*FileListTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CekBeneficiaryAccountAvaibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CekBeneficiaryAccountAvaibilityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CekBeneficiaryAccountAvaibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beneficiary.account.service.v1.ApiService/CekBeneficiaryAccountAvaibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CekBeneficiaryAccountAvaibility(ctx, req.(*CekBeneficiaryAccountAvaibilityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListBank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBankReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListBank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beneficiary.account.service.v1.ApiService/ListBank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListBank(ctx, req.(*ListBankReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BankDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BankDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beneficiary.account.service.v1.ApiService/BankDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BankDetail(ctx, req.(*BankDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiService_ServiceDesc is the grpc.ServiceDesc for ApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "beneficiary.account.service.v1.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _ApiService_HealthCheck_Handler,
		},
		{
			MethodName: "ListBeneficiaryAccount",
			Handler:    _ApiService_ListBeneficiaryAccount_Handler,
		},
		{
			MethodName: "CreateBeneficiaryAccount",
			Handler:    _ApiService_CreateBeneficiaryAccount_Handler,
		},
		{
			MethodName: "CreateBeneficiaryAccountTask",
			Handler:    _ApiService_CreateBeneficiaryAccountTask_Handler,
		},
		{
			MethodName: "CreateBeneficiaryAccountTaskMultiple",
			Handler:    _ApiService_CreateBeneficiaryAccountTaskMultiple_Handler,
		},
		{
			MethodName: "CreateBeneficiaryAccountTaskMultipleNoParrent",
			Handler:    _ApiService_CreateBeneficiaryAccountTaskMultipleNoParrent_Handler,
		},
		{
			MethodName: "ListBeneficiaryAccountTask",
			Handler:    _ApiService_ListBeneficiaryAccountTask_Handler,
		},
		{
			MethodName: "GetBeneficiaryAccountTaskByID",
			Handler:    _ApiService_GetBeneficiaryAccountTaskByID_Handler,
		},
		{
			MethodName: "RequestDeleteBeneficiaryAccountTask",
			Handler:    _ApiService_RequestDeleteBeneficiaryAccountTask_Handler,
		},
		{
			MethodName: "ValidateBeneficiaryAccount",
			Handler:    _ApiService_ValidateBeneficiaryAccount_Handler,
		},
		{
			MethodName: "BeneficiaryAccountDetail",
			Handler:    _ApiService_BeneficiaryAccountDetail_Handler,
		},
		{
			MethodName: "UpdateBeneficiaryAccountRole",
			Handler:    _ApiService_UpdateBeneficiaryAccountRole_Handler,
		},
		{
			MethodName: "DownloadListBeneficiaryAccountTasks",
			Handler:    _ApiService_DownloadListBeneficiaryAccountTasks_Handler,
		},
		{
			MethodName: "DownloadTemplate",
			Handler:    _ApiService_DownloadTemplate_Handler,
		},
		{
			MethodName: "CekBeneficiaryAccountAvaibility",
			Handler:    _ApiService_CekBeneficiaryAccountAvaibility_Handler,
		},
		{
			MethodName: "ListBank",
			Handler:    _ApiService_ListBank_Handler,
		},
		{
			MethodName: "BankDetail",
			Handler:    _ApiService_BankDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "beneficiary_account_api.proto",
}
