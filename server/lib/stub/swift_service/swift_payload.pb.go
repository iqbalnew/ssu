// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: swift_payload.proto

package pb

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TaskStatus int32

const (
	TaskStatus_AllStatus        TaskStatus = 0
	TaskStatus_Pending          TaskStatus = 1
	TaskStatus_Draft            TaskStatus = 2
	TaskStatus_Returned         TaskStatus = 3
	TaskStatus_Approved         TaskStatus = 4
	TaskStatus_Rejected         TaskStatus = 5
	TaskStatus_RequestForDelete TaskStatus = 6
	TaskStatus_Deleted          TaskStatus = 7
)

// Enum value maps for TaskStatus.
var (
	TaskStatus_name = map[int32]string{
		0: "AllStatus",
		1: "Pending",
		2: "Draft",
		3: "Returned",
		4: "Approved",
		5: "Rejected",
		6: "RequestForDelete",
		7: "Deleted",
	}
	TaskStatus_value = map[string]int32{
		"AllStatus":        0,
		"Pending":          1,
		"Draft":            2,
		"Returned":         3,
		"Approved":         4,
		"Rejected":         5,
		"RequestForDelete": 6,
		"Deleted":          7,
	}
)

func (x TaskStatus) Enum() *TaskStatus {
	p := new(TaskStatus)
	*p = x
	return p
}

func (x TaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_swift_payload_proto_enumTypes[0].Descriptor()
}

func (TaskStatus) Type() protoreflect.EnumType {
	return &file_swift_payload_proto_enumTypes[0]
}

func (x TaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStatus.Descriptor instead.
func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{0}
}

type TaskStep int32

const (
	TaskStep_AllStep  TaskStep = 0
	TaskStep_Maker    TaskStep = 1
	TaskStep_Checker  TaskStep = 2
	TaskStep_Signer   TaskStep = 3
	TaskStep_Releaser TaskStep = 4
)

// Enum value maps for TaskStep.
var (
	TaskStep_name = map[int32]string{
		0: "AllStep",
		1: "Maker",
		2: "Checker",
		3: "Signer",
		4: "Releaser",
	}
	TaskStep_value = map[string]int32{
		"AllStep":  0,
		"Maker":    1,
		"Checker":  2,
		"Signer":   3,
		"Releaser": 4,
	}
)

func (x TaskStep) Enum() *TaskStep {
	p := new(TaskStep)
	*p = x
	return p
}

func (x TaskStep) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStep) Descriptor() protoreflect.EnumDescriptor {
	return file_swift_payload_proto_enumTypes[1].Descriptor()
}

func (TaskStep) Type() protoreflect.EnumType {
	return &file_swift_payload_proto_enumTypes[1]
}

func (x TaskStep) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStep.Descriptor instead.
func (TaskStep) EnumDescriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{1}
}

type SortDirection int32

const (
	SortDirection_DESC SortDirection = 0
	SortDirection_ASC  SortDirection = 1
)

// Enum value maps for SortDirection.
var (
	SortDirection_name = map[int32]string{
		0: "DESC",
		1: "ASC",
	}
	SortDirection_value = map[string]int32{
		"DESC": 0,
		"ASC":  1,
	}
)

func (x SortDirection) Enum() *SortDirection {
	p := new(SortDirection)
	*p = x
	return p
}

func (x SortDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_swift_payload_proto_enumTypes[2].Descriptor()
}

func (SortDirection) Type() protoreflect.EnumType {
	return &file_swift_payload_proto_enumTypes[2]
}

func (x SortDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortDirection.Descriptor instead.
func (SortDirection) EnumDescriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{2}
}

type FileTaskListRequest_Formats int32

const (
	FileTaskListRequest_null FileTaskListRequest_Formats = 0
	FileTaskListRequest_pdf  FileTaskListRequest_Formats = 1
	FileTaskListRequest_xls  FileTaskListRequest_Formats = 2
	FileTaskListRequest_csv  FileTaskListRequest_Formats = 3
)

// Enum value maps for FileTaskListRequest_Formats.
var (
	FileTaskListRequest_Formats_name = map[int32]string{
		0: "null",
		1: "pdf",
		2: "xls",
		3: "csv",
	}
	FileTaskListRequest_Formats_value = map[string]int32{
		"null": 0,
		"pdf":  1,
		"xls":  2,
		"csv":  3,
	}
)

func (x FileTaskListRequest_Formats) Enum() *FileTaskListRequest_Formats {
	p := new(FileTaskListRequest_Formats)
	*p = x
	return p
}

func (x FileTaskListRequest_Formats) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileTaskListRequest_Formats) Descriptor() protoreflect.EnumDescriptor {
	return file_swift_payload_proto_enumTypes[3].Descriptor()
}

func (FileTaskListRequest_Formats) Type() protoreflect.EnumType {
	return &file_swift_payload_proto_enumTypes[3]
}

func (x FileTaskListRequest_Formats) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileTaskListRequest_Formats.Descriptor instead.
func (FileTaskListRequest_Formats) EnumDescriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{32, 0}
}

type PaginationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Page       int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	TotalRows  int64 `protobuf:"varint,3,opt,name=totalRows,proto3" json:"totalRows,omitempty"`
	TotalPages int32 `protobuf:"varint,4,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
}

func (x *PaginationResponse) Reset() {
	*x = PaginationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationResponse) ProtoMessage() {}

func (x *PaginationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationResponse.ProtoReflect.Descriptor instead.
func (*PaginationResponse) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{0}
}

func (x *PaginationResponse) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PaginationResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PaginationResponse) GetTotalRows() int64 {
	if x != nil {
		return x.TotalRows
	}
	return 0
}

func (x *PaginationResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID             uint64                 `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Type               string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Status             string                 `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Step               string                 `protobuf:"bytes,4,opt,name=step,proto3" json:"step,omitempty"`
	FeatureID          uint64                 `protobuf:"varint,5,opt,name=featureID,proto3" json:"featureID,omitempty"`
	LastApprovedByID   uint64                 `protobuf:"varint,6,opt,name=lastApprovedByID,proto3" json:"lastApprovedByID,omitempty"`
	LastRejectedByID   uint64                 `protobuf:"varint,7,opt,name=lastRejectedByID,proto3" json:"lastRejectedByID,omitempty"`
	LastApprovedByName string                 `protobuf:"bytes,8,opt,name=lastApprovedByName,proto3" json:"lastApprovedByName,omitempty"`
	LastRejectedByName string                 `protobuf:"bytes,9,opt,name=lastRejectedByName,proto3" json:"lastRejectedByName,omitempty"`
	CreatedByName      string                 `protobuf:"bytes,10,opt,name=createdByName,proto3" json:"createdByName,omitempty"`
	UpdatedByName      string                 `protobuf:"bytes,11,opt,name=updatedByName,proto3" json:"updatedByName,omitempty"`
	Reasons            string                 `protobuf:"bytes,12,opt,name=reasons,proto3" json:"reasons,omitempty"`
	Comment            string                 `protobuf:"bytes,13,opt,name=comment,proto3" json:"comment,omitempty"`
	Workflow           string                 `protobuf:"bytes,14,opt,name=workflow,proto3" json:"workflow,omitempty"`
	CompanyID          uint64                 `protobuf:"varint,15,opt,name=companyID,proto3" json:"companyID,omitempty"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,101,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt          *timestamppb.Timestamp `protobuf:"bytes,102,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{1}
}

func (x *Task) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *Task) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Task) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Task) GetStep() string {
	if x != nil {
		return x.Step
	}
	return ""
}

func (x *Task) GetFeatureID() uint64 {
	if x != nil {
		return x.FeatureID
	}
	return 0
}

func (x *Task) GetLastApprovedByID() uint64 {
	if x != nil {
		return x.LastApprovedByID
	}
	return 0
}

func (x *Task) GetLastRejectedByID() uint64 {
	if x != nil {
		return x.LastRejectedByID
	}
	return 0
}

func (x *Task) GetLastApprovedByName() string {
	if x != nil {
		return x.LastApprovedByName
	}
	return ""
}

func (x *Task) GetLastRejectedByName() string {
	if x != nil {
		return x.LastRejectedByName
	}
	return ""
}

func (x *Task) GetCreatedByName() string {
	if x != nil {
		return x.CreatedByName
	}
	return ""
}

func (x *Task) GetUpdatedByName() string {
	if x != nil {
		return x.UpdatedByName
	}
	return ""
}

func (x *Task) GetReasons() string {
	if x != nil {
		return x.Reasons
	}
	return ""
}

func (x *Task) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Task) GetWorkflow() string {
	if x != nil {
		return x.Workflow
	}
	return ""
}

func (x *Task) GetCompanyID() uint64 {
	if x != nil {
		return x.CompanyID
	}
	return 0
}

func (x *Task) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Task) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type SwiftRemittanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DEBIT_ACCOUNT_MAIN      string `protobuf:"bytes,1,opt,name=DEBIT_ACCOUNT_MAIN,proto3" json:"DEBIT_ACCOUNT_MAIN,omitempty"`            // "DEBIT_ACCOUNT_MAIN" : "020618000018501",
	DEBIT_AMOUNT_MAIN       string `protobuf:"bytes,2,opt,name=DEBIT_AMOUNT_MAIN,proto3" json:"DEBIT_AMOUNT_MAIN,omitempty"`              // "DEBIT_AMOUNT_MAIN" : "9961480.71",
	DEBIT_AMOUNT_FEE_MAIN   string `protobuf:"bytes,3,opt,name=DEBIT_AMOUNT_FEE_MAIN,proto3" json:"DEBIT_AMOUNT_FEE_MAIN,omitempty"`      // "DEBIT_AMOUNT_FEE_MAIN" : "31.45",
	IA_FEE_OUR_ACCOUNT_MAIN string `protobuf:"bytes,4,opt,name=IA_FEE_OUR_ACCOUNT_MAIN,proto3" json:"IA_FEE_OUR_ACCOUNT_MAIN,omitempty"`  // "IA_FEE_OUR_ACCOUNT_MAIN" : "030104000034996",
	IA_FEE_OUR_AMOUNT_MAIN  string `protobuf:"bytes,5,opt,name=IA_FEE_OUR_AMOUNT_MAIN,proto3" json:"IA_FEE_OUR_AMOUNT_MAIN,omitempty"`    // "IA_FEE_OUR_AMOUNT_MAIN" : "30.00",
	GL_ACCOUNT              string `protobuf:"bytes,6,opt,name=GL_ACCOUNT,proto3" json:"GL_ACCOUNT,omitempty"`                            // "GL_ACCOUNT" : "1039407420",
	GL_AMOUNT_MAIN          string `protobuf:"bytes,7,opt,name=GL_AMOUNT_MAIN,proto3" json:"GL_AMOUNT_MAIN,omitempty"`                    // "GL_AMOUNT_MAIN" : "9500000.00",
	DEBIT_CURRENCY_MAIN     string `protobuf:"bytes,8,opt,name=DEBIT_CURRENCY_MAIN,proto3" json:"DEBIT_CURRENCY_MAIN,omitempty"`          // "DEBIT_CURRENCY_MAIN" : "USD",
	CREDIT_CURRENCY_GL_MAIN string `protobuf:"bytes,9,opt,name=CREDIT_CURRENCY_GL_MAIN,proto3" json:"CREDIT_CURRENCY_GL_MAIN,omitempty"`  // "CREDIT_CURRENCY_GL_MAIN" : "EUR",
	CREDIT_CURRENCY_IA_MAIN string `protobuf:"bytes,10,opt,name=CREDIT_CURRENCY_IA_MAIN,proto3" json:"CREDIT_CURRENCY_IA_MAIN,omitempty"` // "CREDIT_CURRENCY_IA_MAIN" : "EUR",
	FEE_DEBIT_AMOUNT        string `protobuf:"bytes,11,opt,name=FEE_DEBIT_AMOUNT,proto3" json:"FEE_DEBIT_AMOUNT,omitempty"`               // "FEE_DEBIT_AMOUNT" : "15.22",
	FEE_CREDIT_AMOUNT       string `protobuf:"bytes,12,opt,name=FEE_CREDIT_AMOUNT,proto3" json:"FEE_CREDIT_AMOUNT,omitempty"`             // "FEE_CREDIT_AMOUNT" : "221816.28",
	// string GL_FEE_ACCOUNT = 13 [json_name='GL_FEE_ACCOUNT']; // "GL_FEE_ACCOUNT" : "4012307421",
	CREDIT_CURRENCY_FEE              string `protobuf:"bytes,14,opt,name=CREDIT_CURRENCY_FEE,proto3" json:"CREDIT_CURRENCY_FEE,omitempty"`                           // "CREDIT_CURRENCY_FEE" : "IDR",
	FEE_ACCOUNT_CHANNEL              string `protobuf:"bytes,15,opt,name=FEE_ACCOUNT_CHANNEL,proto3" json:"FEE_ACCOUNT_CHANNEL,omitempty"`                           // "FEE_ACCOUNT_CHANNEL" : "1003200310",
	FEE_DEBIT_AMOUNT_CHANNEL         string `protobuf:"bytes,16,opt,name=FEE_DEBIT_AMOUNT_CHANNEL,proto3" json:"FEE_DEBIT_AMOUNT_CHANNEL,omitempty"`                 // "FEE_DEBIT_AMOUNT_CHANNEL":"1.02",
	FEE_CREDIT_AMOUNT_CHANNEL        string `protobuf:"bytes,17,opt,name=FEE_CREDIT_AMOUNT_CHANNEL,proto3" json:"FEE_CREDIT_AMOUNT_CHANNEL,omitempty"`               // "FEE_CREDIT_AMOUNT_CHANNEL":"15000.00",
	FEE_DEBIT_CURRENCY_CHANNEL       string `protobuf:"bytes,18,opt,name=FEE_DEBIT_CURRENCY_CHANNEL,proto3" json:"FEE_DEBIT_CURRENCY_CHANNEL,omitempty"`             // "FEE_DEBIT_CURRENCY_CHANNEL":"USD",
	FEE_CURRENCY_CHANNEL             string `protobuf:"bytes,19,opt,name=FEE_CURRENCY_CHANNEL,proto3" json:"FEE_CURRENCY_CHANNEL,omitempty"`                         // "FEE_CURRENCY_CHANNEL" : "IDR",
	DEST_BANK_DEBIT_AMOUNT           string `protobuf:"bytes,20,opt,name=DEST_BANK_DEBIT_AMOUNT,proto3" json:"DEST_BANK_DEBIT_AMOUNT,omitempty"`                     // "DEST_BANK_DEBIT_AMOUNT" : "9500000.00",
	NOSTRO_ACCOUNT                   string `protobuf:"bytes,21,opt,name=NOSTRO_ACCOUNT,proto3" json:"NOSTRO_ACCOUNT,omitempty"`                                     // "NOSTRO_ACCOUNT" : "1000736000",
	RATE_GAP_CREDIT_AMOUNT           string `protobuf:"bytes,22,opt,name=RATE_GAP_CREDIT_AMOUNT,proto3" json:"RATE_GAP_CREDIT_AMOUNT,omitempty"`                     // "RATE_GAP_CREDIT_AMOUNT" : "0.00",
	RATE_GAP_DEBIT_AMOUNT            string `protobuf:"bytes,23,opt,name=RATE_GAP_DEBIT_AMOUNT,proto3" json:"RATE_GAP_DEBIT_AMOUNT,omitempty"`                       // "RATE_GAP_DEBIT_AMOUNT" : "0.00",
	NOSTRO_AMOUNT                    string `protobuf:"bytes,24,opt,name=NOSTRO_AMOUNT,proto3" json:"NOSTRO_AMOUNT,omitempty"`                                       // "NOSTRO_AMOUNT" : "9500000.00",
	CREDIT_CURRENCY_NOSTRO_DEST_BANK string `protobuf:"bytes,25,opt,name=CREDIT_CURRENCY_NOSTRO_DEST_BANK,proto3" json:"CREDIT_CURRENCY_NOSTRO_DEST_BANK,omitempty"` // "CREDIT_CURRENCY_NOSTRO_DEST_BANK" : "EUR",
	CREDIT_CURRENCY_IA_DEST_BANK     string `protobuf:"bytes,26,opt,name=CREDIT_CURRENCY_IA_DEST_BANK,proto3" json:"CREDIT_CURRENCY_IA_DEST_BANK,omitempty"`         // "CREDIT_CURRENCY_IA_DEST_BANK" : "EUR",
	IA_FEE_ACCOUNT                   string `protobuf:"bytes,27,opt,name=IA_FEE_ACCOUNT,proto3" json:"IA_FEE_ACCOUNT,omitempty"`                                     // "IA_FEE_ACCOUNT" : "020618000025998",
	IA_FEE_DEBIT_AMOUNT              string `protobuf:"bytes,28,opt,name=IA_FEE_DEBIT_AMOUNT,proto3" json:"IA_FEE_DEBIT_AMOUNT,omitempty"`                           // "IA_FEE_DEBIT_AMOUNT" : "0.00",
	GL_FEE_CREDIT_AMOUNT             string `protobuf:"bytes,29,opt,name=GL_FEE_CREDIT_AMOUNT,proto3" json:"GL_FEE_CREDIT_AMOUNT,omitempty"`                         // "GL_FEE_CREDIT_AMOUNT" : "0.00",
	BOOK_RATE_BUY                    string `protobuf:"bytes,30,opt,name=BOOK_RATE_BUY,proto3" json:"BOOK_RATE_BUY,omitempty"`                                       // "BOOK_RATE_BUY" : "14574.00",
	BOOK_RATE_SELL                   string `protobuf:"bytes,31,opt,name=BOOK_RATE_SELL,proto3" json:"BOOK_RATE_SELL,omitempty"`                                     // "BOOK_RATE_SELL" : "15281.96",
	BUY_RATE                         string `protobuf:"bytes,32,opt,name=BUY_RATE,proto3" json:"BUY_RATE,omitempty"`                                                 // "BUY_RATE" : "14574.00",
	GL_FEE_ACCOUNT                   string `protobuf:"bytes,33,opt,name=GL_FEE_ACCOUNT,proto3" json:"GL_FEE_ACCOUNT,omitempty"`                                     // "GL_FEE_ACCOUNT": "4012307421",
	REMARK2                          string `protobuf:"bytes,34,opt,name=REMARK2,proto3" json:"REMARK2,omitempty"`                                                   // "REMARK2" : "22742847968",
	REMARK3                          string `protobuf:"bytes,35,opt,name=REMARK3,proto3" json:"REMARK3,omitempty"`                                                   // "REMARK3" : "22742847968",
	TELLERID_KCBO                    string `protobuf:"bytes,36,opt,name=TELLERID_KCBO,proto3" json:"TELLERID_KCBO,omitempty"`                                       // "TELLERID_KCBO" : "0206891",
	DEAL_CODE                        string `protobuf:"bytes,37,opt,name=DEAL_CODE,proto3" json:"DEAL_CODE,omitempty"`                                               // "DEAL_CODE": "O0316358",
	COUNTERPART                      string `protobuf:"bytes,38,opt,name=COUNTERPART,proto3" json:"COUNTERPART,omitempty"`                                           // "COUNTERPART" : "BRICAMS",
	ROUTING                          string `protobuf:"bytes,39,opt,name=ROUTING,proto3" json:"ROUTING,omitempty"`                                                   // "ROUTING" : "SWIFT",
	TRANSACTION_ID_TYPE              string `protobuf:"bytes,40,opt,name=TRANSACTION_ID_TYPE,proto3" json:"TRANSACTION_ID_TYPE,omitempty"`                           // "TRANSACTION_ID_TYPE" : "0",
	NOSTRO_BIC                       string `protobuf:"bytes,41,opt,name=NOSTRO_BIC,proto3" json:"NOSTRO_BIC,omitempty"`                                             // "NOSTRO_BIC" : "ABCADEFFKTO",
	TRANSACTION_ID                   string `protobuf:"bytes,42,opt,name=TRANSACTION_ID,proto3" json:"TRANSACTION_ID,omitempty"`                                     // "TRANSACTION_ID" : "H2022030622135",
	USER_TRANSACTION                 string `protobuf:"bytes,43,opt,name=USER_TRANSACTION,proto3" json:"USER_TRANSACTION,omitempty"`                                 // "USER_TRANSACTION" : "HANS",
	USER_TRANSACTION_BRANCH_CODE     string `protobuf:"bytes,44,opt,name=USER_TRANSACTION_BRANCH_CODE,proto3" json:"USER_TRANSACTION_BRANCH_CODE,omitempty"`         // "USER_TRANSACTION_BRANCH_CODE" : "020601",
	ACCOUNT_NUMBER                   string `protobuf:"bytes,45,opt,name=ACCOUNT_NUMBER,proto3" json:"ACCOUNT_NUMBER,omitempty"`                                     // "ACCOUNT_NUMBER" : "122311321",
	CHARGES_TYPE                     string `protobuf:"bytes,46,opt,name=CHARGES_TYPE,proto3" json:"CHARGES_TYPE,omitempty"`                                         // "CHARGES_TYPE" : "OUR",
	BENEFICIARY_BANK_CODE            string `protobuf:"bytes,47,opt,name=BENEFICIARY_BANK_CODE,proto3" json:"BENEFICIARY_BANK_CODE,omitempty"`                       // "BENEFICIARY_BANK_CODE" : "AERIUS33XXX",
	BENEFICIARY_BANK_NAME            string `protobuf:"bytes,48,opt,name=BENEFICIARY_BANK_NAME,proto3" json:"BENEFICIARY_BANK_NAME,omitempty"`                       // "BENEFICIARY_BANK_NAME" : "AMERIS BANK",
	BENEFICIARY_BANK_ADDRESS         string `protobuf:"bytes,49,opt,name=BENEFICIARY_BANK_ADDRESS,proto3" json:"BENEFICIARY_BANK_ADDRESS,omitempty"`                 // "BENEFICIARY_BANK_ADDRESS" : "1300 MORRIS DRIVE",
	BENEFICIARY_BANK_CITY            string `protobuf:"bytes,50,opt,name=BENEFICIARY_BANK_CITY,proto3" json:"BENEFICIARY_BANK_CITY,omitempty"`                       // "BENEFICIARY_BANK_CITY" : "CHESTERBROOK,PA",
	BENEFICIARY_BANK_COUNTRY_CODE    string `protobuf:"bytes,51,opt,name=BENEFICIARY_BANK_COUNTRY_CODE,proto3" json:"BENEFICIARY_BANK_COUNTRY_CODE,omitempty"`       // "BENEFICIARY_BANK_COUNTRY_CODE" : "US",
	BENEFICIARY_ID_TYPE              string `protobuf:"bytes,52,opt,name=BENEFICIARY_ID_TYPE,proto3" json:"BENEFICIARY_ID_TYPE,omitempty"`                           // "BENEFICIARY_ID_TYPE" : "1",
	BENEFICIARY_ID_NUMBER            string `protobuf:"bytes,53,opt,name=BENEFICIARY_ID_NUMBER,proto3" json:"BENEFICIARY_ID_NUMBER,omitempty"`                       // "BENEFICIARY_ID_NUMBER" : "3318101912900004",
	BENEFICIARY_NAME                 string `protobuf:"bytes,54,opt,name=BENEFICIARY_NAME,proto3" json:"BENEFICIARY_NAME,omitempty"`                                 // "BENEFICIARY_NAME" : "FERRY MARK",
	BENEFICIARY_ADDRESS              string `protobuf:"bytes,55,opt,name=BENEFICIARY_ADDRESS,proto3" json:"BENEFICIARY_ADDRESS,omitempty"`                           // "BENEFICIARY_ADDRESS" : "24 STREET",
	BENEFICIARY_CITY                 string `protobuf:"bytes,56,opt,name=BENEFICIARY_CITY,proto3" json:"BENEFICIARY_CITY,omitempty"`                                 // "BENEFICIARY_CITY" : "ALASKA",
	BENEFICIARY_STATE_PROVINCE       string `protobuf:"bytes,57,opt,name=BENEFICIARY_STATE_PROVINCE,proto3" json:"BENEFICIARY_STATE_PROVINCE,omitempty"`             // "BENEFICIARY_STATE_PROVINCE" : "ALASKA",
	BENEFICIARY_POSTCODE             string `protobuf:"bytes,58,opt,name=BENEFICIARY_POSTCODE,proto3" json:"BENEFICIARY_POSTCODE,omitempty"`                         // "BENEFICIARY_POSTCODE" : "50144",
	BENEFICIARY_COUNTRY_CODE         string `protobuf:"bytes,59,opt,name=BENEFICIARY_COUNTRY_CODE,proto3" json:"BENEFICIARY_COUNTRY_CODE,omitempty"`                 // "BENEFICIARY_COUNTRY_CODE" : "US",
	BENEFICIARY_PHONE_CODE           string `protobuf:"bytes,60,opt,name=BENEFICIARY_PHONE_CODE,proto3" json:"BENEFICIARY_PHONE_CODE,omitempty"`                     // "BENEFICIARY_PHONE_CODE" : "852",
	BENEFICIARY_PHONE                string `protobuf:"bytes,61,opt,name=BENEFICIARY_PHONE,proto3" json:"BENEFICIARY_PHONE,omitempty"`                               // "BENEFICIARY_PHONE" : "081792226376",
	BENEFICIARY_EMAIL                string `protobuf:"bytes,62,opt,name=BENEFICIARY_EMAIL,proto3" json:"BENEFICIARY_EMAIL,omitempty"`                               // "BENEFICIARY_EMAIL" : "ELABRAMBRI@GMAIL.COM",
	BENEFICIARY_TYPE                 string `protobuf:"bytes,63,opt,name=BENEFICIARY_TYPE,proto3" json:"BENEFICIARY_TYPE,omitempty"`                                 // "BENEFICIARY_TYPE" : "1",
	BENEFICIARY_GENDER               string `protobuf:"bytes,64,opt,name=BENEFICIARY_GENDER,proto3" json:"BENEFICIARY_GENDER,omitempty"`                             // "BENEFICIARY_GENDER" : "1",
	BENEFICIARY_RELATIONSHIP         string `protobuf:"bytes,65,opt,name=BENEFICIARY_RELATIONSHIP,proto3" json:"BENEFICIARY_RELATIONSHIP,omitempty"`                 // "BENEFICIARY_RELATIONSHIP" : "1",
	SENDER_ID_TYPE                   string `protobuf:"bytes,66,opt,name=SENDER_ID_TYPE,proto3" json:"SENDER_ID_TYPE,omitempty"`                                     // "SENDER_ID_TYPE" : "1",
	SENDER_ID_NUMBER                 string `protobuf:"bytes,67,opt,name=SENDER_ID_NUMBER,proto3" json:"SENDER_ID_NUMBER,omitempty"`                                 // "SENDER_ID_NUMBER" : "00835345345345",
	SENDER_ID_ISSUE_DATE             string `protobuf:"bytes,68,opt,name=SENDER_ID_ISSUE_DATE,proto3" json:"SENDER_ID_ISSUE_DATE,omitempty"`                         // "SENDER_ID_ISSUE_DATE" : "2020-08-18",
	SENDER_ID_EXPIRED_DATE           string `protobuf:"bytes,69,opt,name=SENDER_ID_EXPIRED_DATE,proto3" json:"SENDER_ID_EXPIRED_DATE,omitempty"`                     // "SENDER_ID_EXPIRED_DATE" : "2020-09-18",
	SENDER_NAME                      string `protobuf:"bytes,70,opt,name=SENDER_NAME,proto3" json:"SENDER_NAME,omitempty"`                                           // "SENDER_NAME" : "BANGKIT NGABDIANTO OTHER",
	SENDER_ADDRESS                   string `protobuf:"bytes,71,opt,name=SENDER_ADDRESS,proto3" json:"SENDER_ADDRESS,omitempty"`                                     // "SENDER_ADDRESS" : "JL HARSONO RM",
	SENDER_CITY                      string `protobuf:"bytes,72,opt,name=SENDER_CITY,proto3" json:"SENDER_CITY,omitempty"`                                           // "SENDER_CITY" : "DKI JAKARTA",
	SENDER_STATE_PROVINCE            string `protobuf:"bytes,73,opt,name=SENDER_STATE_PROVINCE,proto3" json:"SENDER_STATE_PROVINCE,omitempty"`                       // "SENDER_STATE_PROVINCE" : "JAKARTA SELATAN",
	SENDER_POSTCODE                  string `protobuf:"bytes,74,opt,name=SENDER_POSTCODE,proto3" json:"SENDER_POSTCODE,omitempty"`                                   // "SENDER_POSTCODE" : "50144",
	SENDER_COUNTRY_CODE              string `protobuf:"bytes,75,opt,name=SENDER_COUNTRY_CODE,proto3" json:"SENDER_COUNTRY_CODE,omitempty"`                           // "SENDER_COUNTRY_CODE" : "1",
	SENDER_DOB                       string `protobuf:"bytes,76,opt,name=SENDER_DOB,proto3" json:"SENDER_DOB,omitempty"`                                             // "SENDER_DOB" : "1990-01-22",
	SENDER_PHONE_CODE                string `protobuf:"bytes,77,opt,name=SENDER_PHONE_CODE,proto3" json:"SENDER_PHONE_CODE,omitempty"`                               // "SENDER_PHONE_CODE" : "62",
	SENDER_PHONE                     string `protobuf:"bytes,78,opt,name=SENDER_PHONE,proto3" json:"SENDER_PHONE,omitempty"`                                         // "SENDER_PHONE" : "6281781112353",
	SENDER_EMAIL                     string `protobuf:"bytes,79,opt,name=SENDER_EMAIL,proto3" json:"SENDER_EMAIL,omitempty"`                                         // "SENDER_EMAIL" : "ELABRAMBRI@BRILIAN.BRI.CO.ID",
	SENDER_TYPE                      string `protobuf:"bytes,80,opt,name=SENDER_TYPE,proto3" json:"SENDER_TYPE,omitempty"`                                           // "SENDER_TYPE" : "1",
	SENDER_SOURCE_OF_FUND            string `protobuf:"bytes,81,opt,name=SENDER_SOURCE_OF_FUND,proto3" json:"SENDER_SOURCE_OF_FUND,omitempty"`                       // "SENDER_SOURCE_OF_FUND" : "2",
	SENDER_BIRTH_CITY                string `protobuf:"bytes,82,opt,name=SENDER_BIRTH_CITY,proto3" json:"SENDER_BIRTH_CITY,omitempty"`                               // "SENDER_BIRTH_CITY" : "153",
	SENDER_POSITION                  string `protobuf:"bytes,83,opt,name=SENDER_POSITION,proto3" json:"SENDER_POSITION,omitempty"`                                   // "SENDER_POSITION" : "1",
	SENDER_BIRTH_COUNTRY             string `protobuf:"bytes,84,opt,name=SENDER_BIRTH_COUNTRY,proto3" json:"SENDER_BIRTH_COUNTRY,omitempty"`                         // "SENDER_BIRTH_COUNTRY" : "ID",
	SENDER_WORKING_STATUS            string `protobuf:"bytes,85,opt,name=SENDER_WORKING_STATUS,proto3" json:"SENDER_WORKING_STATUS,omitempty"`                       // "SENDER_WORKING_STATUS" : "1",
	SENDER_PROFESSION                string `protobuf:"bytes,86,opt,name=SENDER_PROFESSION,proto3" json:"SENDER_PROFESSION,omitempty"`                               // "SENDER_PROFESSION" : "1",
	SENDER_CITIZENSHIP_COUNTRY       string `protobuf:"bytes,87,opt,name=SENDER_CITIZENSHIP_COUNTRY,proto3" json:"SENDER_CITIZENSHIP_COUNTRY,omitempty"`             // "SENDER_CITIZENSHIP_COUNTRY" : "ID",
	SENDER_GENDER                    string `protobuf:"bytes,88,opt,name=SENDER_GENDER,proto3" json:"SENDER_GENDER,omitempty"`                                       // "SENDER_GENDER" : "1",
	TRANSACTION_PURPOSE              string `protobuf:"bytes,89,opt,name=TRANSACTION_PURPOSE,proto3" json:"TRANSACTION_PURPOSE,omitempty"`                           // "TRANSACTION_PURPOSE" : "17",
	TICKET_NUMBER                    string `protobuf:"bytes,90,opt,name=TICKET_NUMBER,proto3" json:"TICKET_NUMBER,omitempty"`                                       // "TICKET_NUMBER" : "037418000246703",
	INTENDED_USE                     string `protobuf:"bytes,91,opt,name=INTENDED_USE,proto3" json:"INTENDED_USE,omitempty"`                                         // "INTENDED_USE" : "1"
	SELL_RATE                        string `protobuf:"bytes,92,opt,name=SELL_RATE,proto3" json:"SELL_RATE,omitempty"`                                               // "SELL_RATE" : "1",
	REMARK_TO_BENEFICIARY            string `protobuf:"bytes,93,opt,name=REMARK_TO_BENEFICIARY,proto3" json:"REMARK_TO_BENEFICIARY,omitempty"`
	REMARK_TO_BENEFICIARY_BANK       string `protobuf:"bytes,94,opt,name=REMARK_TO_BENEFICIARY_BANK,proto3" json:"REMARK_TO_BENEFICIARY_BANK,omitempty"`
}

func (x *SwiftRemittanceRequest) Reset() {
	*x = SwiftRemittanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwiftRemittanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwiftRemittanceRequest) ProtoMessage() {}

func (x *SwiftRemittanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwiftRemittanceRequest.ProtoReflect.Descriptor instead.
func (*SwiftRemittanceRequest) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{2}
}

func (x *SwiftRemittanceRequest) GetDEBIT_ACCOUNT_MAIN() string {
	if x != nil {
		return x.DEBIT_ACCOUNT_MAIN
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetDEBIT_AMOUNT_MAIN() string {
	if x != nil {
		return x.DEBIT_AMOUNT_MAIN
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetDEBIT_AMOUNT_FEE_MAIN() string {
	if x != nil {
		return x.DEBIT_AMOUNT_FEE_MAIN
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetIA_FEE_OUR_ACCOUNT_MAIN() string {
	if x != nil {
		return x.IA_FEE_OUR_ACCOUNT_MAIN
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetIA_FEE_OUR_AMOUNT_MAIN() string {
	if x != nil {
		return x.IA_FEE_OUR_AMOUNT_MAIN
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetGL_ACCOUNT() string {
	if x != nil {
		return x.GL_ACCOUNT
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetGL_AMOUNT_MAIN() string {
	if x != nil {
		return x.GL_AMOUNT_MAIN
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetDEBIT_CURRENCY_MAIN() string {
	if x != nil {
		return x.DEBIT_CURRENCY_MAIN
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetCREDIT_CURRENCY_GL_MAIN() string {
	if x != nil {
		return x.CREDIT_CURRENCY_GL_MAIN
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetCREDIT_CURRENCY_IA_MAIN() string {
	if x != nil {
		return x.CREDIT_CURRENCY_IA_MAIN
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetFEE_DEBIT_AMOUNT() string {
	if x != nil {
		return x.FEE_DEBIT_AMOUNT
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetFEE_CREDIT_AMOUNT() string {
	if x != nil {
		return x.FEE_CREDIT_AMOUNT
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetCREDIT_CURRENCY_FEE() string {
	if x != nil {
		return x.CREDIT_CURRENCY_FEE
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetFEE_ACCOUNT_CHANNEL() string {
	if x != nil {
		return x.FEE_ACCOUNT_CHANNEL
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetFEE_DEBIT_AMOUNT_CHANNEL() string {
	if x != nil {
		return x.FEE_DEBIT_AMOUNT_CHANNEL
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetFEE_CREDIT_AMOUNT_CHANNEL() string {
	if x != nil {
		return x.FEE_CREDIT_AMOUNT_CHANNEL
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetFEE_DEBIT_CURRENCY_CHANNEL() string {
	if x != nil {
		return x.FEE_DEBIT_CURRENCY_CHANNEL
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetFEE_CURRENCY_CHANNEL() string {
	if x != nil {
		return x.FEE_CURRENCY_CHANNEL
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetDEST_BANK_DEBIT_AMOUNT() string {
	if x != nil {
		return x.DEST_BANK_DEBIT_AMOUNT
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetNOSTRO_ACCOUNT() string {
	if x != nil {
		return x.NOSTRO_ACCOUNT
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetRATE_GAP_CREDIT_AMOUNT() string {
	if x != nil {
		return x.RATE_GAP_CREDIT_AMOUNT
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetRATE_GAP_DEBIT_AMOUNT() string {
	if x != nil {
		return x.RATE_GAP_DEBIT_AMOUNT
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetNOSTRO_AMOUNT() string {
	if x != nil {
		return x.NOSTRO_AMOUNT
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetCREDIT_CURRENCY_NOSTRO_DEST_BANK() string {
	if x != nil {
		return x.CREDIT_CURRENCY_NOSTRO_DEST_BANK
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetCREDIT_CURRENCY_IA_DEST_BANK() string {
	if x != nil {
		return x.CREDIT_CURRENCY_IA_DEST_BANK
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetIA_FEE_ACCOUNT() string {
	if x != nil {
		return x.IA_FEE_ACCOUNT
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetIA_FEE_DEBIT_AMOUNT() string {
	if x != nil {
		return x.IA_FEE_DEBIT_AMOUNT
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetGL_FEE_CREDIT_AMOUNT() string {
	if x != nil {
		return x.GL_FEE_CREDIT_AMOUNT
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetBOOK_RATE_BUY() string {
	if x != nil {
		return x.BOOK_RATE_BUY
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetBOOK_RATE_SELL() string {
	if x != nil {
		return x.BOOK_RATE_SELL
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetBUY_RATE() string {
	if x != nil {
		return x.BUY_RATE
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetGL_FEE_ACCOUNT() string {
	if x != nil {
		return x.GL_FEE_ACCOUNT
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetREMARK2() string {
	if x != nil {
		return x.REMARK2
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetREMARK3() string {
	if x != nil {
		return x.REMARK3
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetTELLERID_KCBO() string {
	if x != nil {
		return x.TELLERID_KCBO
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetDEAL_CODE() string {
	if x != nil {
		return x.DEAL_CODE
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetCOUNTERPART() string {
	if x != nil {
		return x.COUNTERPART
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetROUTING() string {
	if x != nil {
		return x.ROUTING
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetTRANSACTION_ID_TYPE() string {
	if x != nil {
		return x.TRANSACTION_ID_TYPE
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetNOSTRO_BIC() string {
	if x != nil {
		return x.NOSTRO_BIC
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetTRANSACTION_ID() string {
	if x != nil {
		return x.TRANSACTION_ID
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetUSER_TRANSACTION() string {
	if x != nil {
		return x.USER_TRANSACTION
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetUSER_TRANSACTION_BRANCH_CODE() string {
	if x != nil {
		return x.USER_TRANSACTION_BRANCH_CODE
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetACCOUNT_NUMBER() string {
	if x != nil {
		return x.ACCOUNT_NUMBER
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetCHARGES_TYPE() string {
	if x != nil {
		return x.CHARGES_TYPE
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetBENEFICIARY_BANK_CODE() string {
	if x != nil {
		return x.BENEFICIARY_BANK_CODE
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetBENEFICIARY_BANK_NAME() string {
	if x != nil {
		return x.BENEFICIARY_BANK_NAME
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetBENEFICIARY_BANK_ADDRESS() string {
	if x != nil {
		return x.BENEFICIARY_BANK_ADDRESS
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetBENEFICIARY_BANK_CITY() string {
	if x != nil {
		return x.BENEFICIARY_BANK_CITY
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetBENEFICIARY_BANK_COUNTRY_CODE() string {
	if x != nil {
		return x.BENEFICIARY_BANK_COUNTRY_CODE
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetBENEFICIARY_ID_TYPE() string {
	if x != nil {
		return x.BENEFICIARY_ID_TYPE
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetBENEFICIARY_ID_NUMBER() string {
	if x != nil {
		return x.BENEFICIARY_ID_NUMBER
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetBENEFICIARY_NAME() string {
	if x != nil {
		return x.BENEFICIARY_NAME
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetBENEFICIARY_ADDRESS() string {
	if x != nil {
		return x.BENEFICIARY_ADDRESS
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetBENEFICIARY_CITY() string {
	if x != nil {
		return x.BENEFICIARY_CITY
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetBENEFICIARY_STATE_PROVINCE() string {
	if x != nil {
		return x.BENEFICIARY_STATE_PROVINCE
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetBENEFICIARY_POSTCODE() string {
	if x != nil {
		return x.BENEFICIARY_POSTCODE
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetBENEFICIARY_COUNTRY_CODE() string {
	if x != nil {
		return x.BENEFICIARY_COUNTRY_CODE
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetBENEFICIARY_PHONE_CODE() string {
	if x != nil {
		return x.BENEFICIARY_PHONE_CODE
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetBENEFICIARY_PHONE() string {
	if x != nil {
		return x.BENEFICIARY_PHONE
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetBENEFICIARY_EMAIL() string {
	if x != nil {
		return x.BENEFICIARY_EMAIL
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetBENEFICIARY_TYPE() string {
	if x != nil {
		return x.BENEFICIARY_TYPE
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetBENEFICIARY_GENDER() string {
	if x != nil {
		return x.BENEFICIARY_GENDER
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetBENEFICIARY_RELATIONSHIP() string {
	if x != nil {
		return x.BENEFICIARY_RELATIONSHIP
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetSENDER_ID_TYPE() string {
	if x != nil {
		return x.SENDER_ID_TYPE
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetSENDER_ID_NUMBER() string {
	if x != nil {
		return x.SENDER_ID_NUMBER
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetSENDER_ID_ISSUE_DATE() string {
	if x != nil {
		return x.SENDER_ID_ISSUE_DATE
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetSENDER_ID_EXPIRED_DATE() string {
	if x != nil {
		return x.SENDER_ID_EXPIRED_DATE
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetSENDER_NAME() string {
	if x != nil {
		return x.SENDER_NAME
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetSENDER_ADDRESS() string {
	if x != nil {
		return x.SENDER_ADDRESS
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetSENDER_CITY() string {
	if x != nil {
		return x.SENDER_CITY
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetSENDER_STATE_PROVINCE() string {
	if x != nil {
		return x.SENDER_STATE_PROVINCE
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetSENDER_POSTCODE() string {
	if x != nil {
		return x.SENDER_POSTCODE
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetSENDER_COUNTRY_CODE() string {
	if x != nil {
		return x.SENDER_COUNTRY_CODE
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetSENDER_DOB() string {
	if x != nil {
		return x.SENDER_DOB
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetSENDER_PHONE_CODE() string {
	if x != nil {
		return x.SENDER_PHONE_CODE
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetSENDER_PHONE() string {
	if x != nil {
		return x.SENDER_PHONE
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetSENDER_EMAIL() string {
	if x != nil {
		return x.SENDER_EMAIL
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetSENDER_TYPE() string {
	if x != nil {
		return x.SENDER_TYPE
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetSENDER_SOURCE_OF_FUND() string {
	if x != nil {
		return x.SENDER_SOURCE_OF_FUND
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetSENDER_BIRTH_CITY() string {
	if x != nil {
		return x.SENDER_BIRTH_CITY
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetSENDER_POSITION() string {
	if x != nil {
		return x.SENDER_POSITION
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetSENDER_BIRTH_COUNTRY() string {
	if x != nil {
		return x.SENDER_BIRTH_COUNTRY
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetSENDER_WORKING_STATUS() string {
	if x != nil {
		return x.SENDER_WORKING_STATUS
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetSENDER_PROFESSION() string {
	if x != nil {
		return x.SENDER_PROFESSION
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetSENDER_CITIZENSHIP_COUNTRY() string {
	if x != nil {
		return x.SENDER_CITIZENSHIP_COUNTRY
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetSENDER_GENDER() string {
	if x != nil {
		return x.SENDER_GENDER
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetTRANSACTION_PURPOSE() string {
	if x != nil {
		return x.TRANSACTION_PURPOSE
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetTICKET_NUMBER() string {
	if x != nil {
		return x.TICKET_NUMBER
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetINTENDED_USE() string {
	if x != nil {
		return x.INTENDED_USE
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetSELL_RATE() string {
	if x != nil {
		return x.SELL_RATE
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetREMARK_TO_BENEFICIARY() string {
	if x != nil {
		return x.REMARK_TO_BENEFICIARY
	}
	return ""
}

func (x *SwiftRemittanceRequest) GetREMARK_TO_BENEFICIARY_BANK() string {
	if x != nil {
		return x.REMARK_TO_BENEFICIARY_BANK
	}
	return ""
}

type SwiftRemittance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	REASON           string `protobuf:"bytes,1,opt,name=REASON,proto3" json:"REASON,omitempty"`                     // "REASON": "[ERROR] Transaction ID Already Exist",
	JOURNAL_SEQ4     string `protobuf:"bytes,2,opt,name=JOURNAL_SEQ4,proto3" json:"JOURNAL_SEQ4,omitempty"`         // "JOURNAL_SEQ4": "7655318",
	JOURNAL_SEQ3     string `protobuf:"bytes,3,opt,name=JOURNAL_SEQ3,proto3" json:"JOURNAL_SEQ3,omitempty"`         // "JOURNAL_SEQ3": "7655317",
	JOURNAL_SEQ2     string `protobuf:"bytes,4,opt,name=JOURNAL_SEQ2,proto3" json:"JOURNAL_SEQ2,omitempty"`         // "JOURNAL_SEQ2": "7655316",
	JOURNAL_SEQ      string `protobuf:"bytes,5,opt,name=JOURNAL_SEQ,proto3" json:"JOURNAL_SEQ,omitempty"`           // "JOURNAL_SEQ": "7655315",
	ERROR_CODE       string `protobuf:"bytes,6,opt,name=ERROR_CODE,proto3" json:"ERROR_CODE,omitempty"`             // "ERROR_CODE": "RMT-99",
	RESPONSE_CODE    string `protobuf:"bytes,7,opt,name=RESPONSE_CODE,proto3" json:"RESPONSE_CODE,omitempty"`       // "RESPONSE_CODE": "0002",
	RESPONSE_MESSAGE string `protobuf:"bytes,8,opt,name=RESPONSE_MESSAGE,proto3" json:"RESPONSE_MESSAGE,omitempty"` // "RESPONSE_MESSAGE": "Transaction Flag Failed : [ERROR] Transaction ID Already Exist"
	TIKET_NO         string `protobuf:"bytes,9,opt,name=TIKET_NO,proto3" json:"TIKET_NO,omitempty"`                 // "TIKET_NO": "020602000566703",
	UETR             string `protobuf:"bytes,10,opt,name=UETR,proto3" json:"UETR,omitempty"`                        // "UETR": "ceceedcd-05d4-41be-a956-970130668483",
	ID_TRANSACTION   string `protobuf:"bytes,11,opt,name=ID_TRANSACTION,proto3" json:"ID_TRANSACTION,omitempty"`    // "ID_TRANSACTION": "200926",
	JOURNAL_SEQ5     string `protobuf:"bytes,12,opt,name=JOURNAL_SEQ5,proto3" json:"JOURNAL_SEQ5,omitempty"`        // "JOURNAL_SEQ5": "7655314",
	JOURNAL_SEQ6     string `protobuf:"bytes,13,opt,name=JOURNAL_SEQ6,proto3" json:"JOURNAL_SEQ6,omitempty"`        // "JOURNAL_SEQ6": "7655313",
}

func (x *SwiftRemittance) Reset() {
	*x = SwiftRemittance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwiftRemittance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwiftRemittance) ProtoMessage() {}

func (x *SwiftRemittance) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwiftRemittance.ProtoReflect.Descriptor instead.
func (*SwiftRemittance) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{3}
}

func (x *SwiftRemittance) GetREASON() string {
	if x != nil {
		return x.REASON
	}
	return ""
}

func (x *SwiftRemittance) GetJOURNAL_SEQ4() string {
	if x != nil {
		return x.JOURNAL_SEQ4
	}
	return ""
}

func (x *SwiftRemittance) GetJOURNAL_SEQ3() string {
	if x != nil {
		return x.JOURNAL_SEQ3
	}
	return ""
}

func (x *SwiftRemittance) GetJOURNAL_SEQ2() string {
	if x != nil {
		return x.JOURNAL_SEQ2
	}
	return ""
}

func (x *SwiftRemittance) GetJOURNAL_SEQ() string {
	if x != nil {
		return x.JOURNAL_SEQ
	}
	return ""
}

func (x *SwiftRemittance) GetERROR_CODE() string {
	if x != nil {
		return x.ERROR_CODE
	}
	return ""
}

func (x *SwiftRemittance) GetRESPONSE_CODE() string {
	if x != nil {
		return x.RESPONSE_CODE
	}
	return ""
}

func (x *SwiftRemittance) GetRESPONSE_MESSAGE() string {
	if x != nil {
		return x.RESPONSE_MESSAGE
	}
	return ""
}

func (x *SwiftRemittance) GetTIKET_NO() string {
	if x != nil {
		return x.TIKET_NO
	}
	return ""
}

func (x *SwiftRemittance) GetUETR() string {
	if x != nil {
		return x.UETR
	}
	return ""
}

func (x *SwiftRemittance) GetID_TRANSACTION() string {
	if x != nil {
		return x.ID_TRANSACTION
	}
	return ""
}

func (x *SwiftRemittance) GetJOURNAL_SEQ5() string {
	if x != nil {
		return x.JOURNAL_SEQ5
	}
	return ""
}

func (x *SwiftRemittance) GetJOURNAL_SEQ6() string {
	if x != nil {
		return x.JOURNAL_SEQ6
	}
	return ""
}

type SwiftRemittanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool             `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32           `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string           `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *SwiftRemittance `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SwiftRemittanceResponse) Reset() {
	*x = SwiftRemittanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwiftRemittanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwiftRemittanceResponse) ProtoMessage() {}

func (x *SwiftRemittanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwiftRemittanceResponse.ProtoReflect.Descriptor instead.
func (*SwiftRemittanceResponse) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{4}
}

func (x *SwiftRemittanceResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *SwiftRemittanceResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SwiftRemittanceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SwiftRemittanceResponse) GetData() *SwiftRemittance {
	if x != nil {
		return x.Data
	}
	return nil
}

type CounterpartTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AMOUNT_ORI                    string `protobuf:"bytes,1,opt,name=AMOUNT_ORI,proto3" json:"AMOUNT_ORI,omitempty"`                                        // "AMOUNT_ORI": "7.00",
	DEBIT_ACCOUNT                 string `protobuf:"bytes,2,opt,name=DEBIT_ACCOUNT,proto3" json:"DEBIT_ACCOUNT,omitempty"`                                  // "DEBIT_ACCOUNT": "001901001158306",
	DEBIT_AMOUNT                  string `protobuf:"bytes,3,opt,name=DEBIT_AMOUNT,proto3" json:"DEBIT_AMOUNT,omitempty"`                                    // "DEBIT_AMOUNT": "106148.85",
	DEBIT_CURRENCY                string `protobuf:"bytes,4,opt,name=DEBIT_CURRENCY,proto3" json:"DEBIT_CURRENCY,omitempty"`                                // "DEBIT_CURRENCY": "IDR",
	CREDIT_ACCOUNT_NOSTRO         string `protobuf:"bytes,5,opt,name=CREDIT_ACCOUNT_NOSTRO,proto3" json:"CREDIT_ACCOUNT_NOSTRO,omitempty"`                  // "CREDIT_ACCOUNT_NOSTRO": "020601000714304",
	CREDIT_AMOUNT_NOSTRO          string `protobuf:"bytes,6,opt,name=CREDIT_AMOUNT_NOSTRO,proto3" json:"CREDIT_AMOUNT_NOSTRO,omitempty"`                    // "CREDIT_AMOUNT_NOSTRO": "106148.85",
	CREDIT_NOSTRO_CURRENCY        string `protobuf:"bytes,7,opt,name=CREDIT_NOSTRO_CURRENCY,proto3" json:"CREDIT_NOSTRO_CURRENCY,omitempty"`                // "CREDIT_NOSTRO_CURRENCY": "IDR",
	CREDIT_ACCOUNT_GL_FEE         string `protobuf:"bytes,8,opt,name=CREDIT_ACCOUNT_GL_FEE,proto3" json:"CREDIT_ACCOUNT_GL_FEE,omitempty"`                  // "CREDIT_ACCOUNT_GL_FEE": "4012307421",
	CREDIT_AMOUNT_GL_FEE          string `protobuf:"bytes,9,opt,name=CREDIT_AMOUNT_GL_FEE,proto3" json:"CREDIT_AMOUNT_GL_FEE,omitempty"`                    // "CREDIT_AMOUNT_GL_FEE": "86166.00",
	CREDIT_GL_CURRENCY            string `protobuf:"bytes,10,opt,name=CREDIT_GL_CURRENCY,proto3" json:"CREDIT_GL_CURRENCY,omitempty"`                       // "CREDIT_GL_CURRENCY": "IDR",
	FEE_ACCOUNT_CHANNEL           string `protobuf:"bytes,11,opt,name=FEE_ACCOUNT_CHANNEL,proto3" json:"FEE_ACCOUNT_CHANNEL,omitempty"`                     // "FEE_ACCOUNT_CHANNEL": "1003200310",
	FEE_DEBIT_AMOUNT_CHANNEL      string `protobuf:"bytes,12,opt,name=FEE_DEBIT_AMOUNT_CHANNEL,proto3" json:"FEE_DEBIT_AMOUNT_CHANNEL,omitempty"`           // "FEE_DEBIT_AMOUNT_CHANNEL": "500000.00",
	FEE_CREDIT_AMOUNT_CHANNEL     string `protobuf:"bytes,13,opt,name=FEE_CREDIT_AMOUNT_CHANNEL,proto3" json:"FEE_CREDIT_AMOUNT_CHANNEL,omitempty"`         // "FEE_CREDIT_AMOUNT_CHANNEL":"500000.00",
	FEE_CURRENCY_CHANNEL          string `protobuf:"bytes,14,opt,name=FEE_CURRENCY_CHANNEL,proto3" json:"FEE_CURRENCY_CHANNEL,omitempty"`                   // "FEE_CURRENCY_CHANNEL": "IDR",
	TELLERID_KCBO                 string `protobuf:"bytes,15,opt,name=TELLERID_KCBO,proto3" json:"TELLERID_KCBO,omitempty"`                                 // "TELLERID_KCBO":"0374891",
	BUY_RATE                      string `protobuf:"bytes,16,opt,name=BUY_RATE,proto3" json:"BUY_RATE,omitempty"`                                           // "BUY_RATE": "1.00",
	SELL_RATE                     string `protobuf:"bytes,17,opt,name=SELL_RATE,proto3" json:"SELL_RATE,omitempty"`                                         // "SELL_RATE": "10000",
	BOOK_RATE_BUY                 string `protobuf:"bytes,18,opt,name=BOOK_RATE_BUY,proto3" json:"BOOK_RATE_BUY,omitempty"`                                 // "BOOK_RATE_BUY": "1.00",
	BOOK_RATE_SELL                string `protobuf:"bytes,19,opt,name=BOOK_RATE_SELL,proto3" json:"BOOK_RATE_SELL,omitempty"`                               // "BOOK_RATE_SELL": "10000",
	REMARK2                       string `protobuf:"bytes,20,opt,name=REMARK2,proto3" json:"REMARK2,omitempty"`                                             // "REMARK2": "REMARK2_COUNTERPART",
	REMARK3                       string `protobuf:"bytes,21,opt,name=REMARK3,proto3" json:"REMARK3,omitempty"`                                             // "REMARK3": "REMARK3_COUNTERPART",
	COUNTERPART                   string `protobuf:"bytes,22,opt,name=COUNTERPART,proto3" json:"COUNTERPART,omitempty"`                                     // "COUNTERPART": "BRICAMS",
	ROUTING                       string `protobuf:"bytes,76,opt,name=ROUTING,proto3" json:"ROUTING,omitempty"`                                             // "ROUTING": "SWIFT",
	TRANSACTION_ID_TYPE           string `protobuf:"bytes,23,opt,name=TRANSACTION_ID_TYPE,proto3" json:"TRANSACTION_ID_TYPE,omitempty"`                     // "TRANSACTION_ID_TYPE": "0",
	NOSTRO_BIC                    string `protobuf:"bytes,24,opt,name=NOSTRO_BIC,proto3" json:"NOSTRO_BIC,omitempty"`                                       // "NOSTRO_BIC": "MONEYGRAM",
	TRANSACTION_ID                string `protobuf:"bytes,25,opt,name=TRANSACTION_ID,proto3" json:"TRANSACTION_ID,omitempty"`                               // "TRANSACTION_ID": "H2022032203",
	USER_TRANSACTION              string `protobuf:"bytes,26,opt,name=USER_TRANSACTION,proto3" json:"USER_TRANSACTION,omitempty"`                           // "USER_TRANSACTION": "HANS",
	USER_TRANSACTION_BRANCH_CODE  string `protobuf:"bytes,27,opt,name=USER_TRANSACTION_BRANCH_CODE,proto3" json:"USER_TRANSACTION_BRANCH_CODE,omitempty"`   // "USER_TRANSACTION_BRANCH_CODE": "020601",
	ACCOUNT_NUMBER                string `protobuf:"bytes,28,opt,name=ACCOUNT_NUMBER,proto3" json:"ACCOUNT_NUMBER,omitempty"`                               // "ACCOUNT_NUMBER": "1223113215555",
	CHARGES_TYPE                  string `protobuf:"bytes,29,opt,name=CHARGES_TYPE,proto3" json:"CHARGES_TYPE,omitempty"`                                   // "CHARGES_TYPE": "OUR",
	BENEFICIARY_BANK_CODE         string `protobuf:"bytes,30,opt,name=BENEFICIARY_BANK_CODE,proto3" json:"BENEFICIARY_BANK_CODE,omitempty"`                 // "BENEFICIARY_BANK_CODE": "AERIUS33XXX",
	BENEFICIARY_BANK_NAME         string `protobuf:"bytes,31,opt,name=BENEFICIARY_BANK_NAME,proto3" json:"BENEFICIARY_BANK_NAME,omitempty"`                 // "BENEFICIARY_BANK_NAME": "AMERIS BANK",
	BENEFICIARY_BANK_ADDRESS      string `protobuf:"bytes,32,opt,name=BENEFICIARY_BANK_ADDRESS,proto3" json:"BENEFICIARY_BANK_ADDRESS,omitempty"`           // "BENEFICIARY_BANK_ADDRESS": "1300 MORRIS DRIVE",
	BENEFICIARY_BANK_CITY         string `protobuf:"bytes,33,opt,name=BENEFICIARY_BANK_CITY,proto3" json:"BENEFICIARY_BANK_CITY,omitempty"`                 // "BENEFICIARY_BANK_CITY": "CHESTERBROOK,PA",
	BENEFICIARY_BANK_COUNTRY_CODE string `protobuf:"bytes,34,opt,name=BENEFICIARY_BANK_COUNTRY_CODE,proto3" json:"BENEFICIARY_BANK_COUNTRY_CODE,omitempty"` // "BENEFICIARY_BANK_COUNTRY_CODE": "US",
	BENEFICIARY_ID_TYPE           string `protobuf:"bytes,35,opt,name=BENEFICIARY_ID_TYPE,proto3" json:"BENEFICIARY_ID_TYPE,omitempty"`                     // "BENEFICIARY_ID_TYPE": "1",
	BENEFICIARY_ID_NUMBER         string `protobuf:"bytes,36,opt,name=BENEFICIARY_ID_NUMBER,proto3" json:"BENEFICIARY_ID_NUMBER,omitempty"`                 // "BENEFICIARY_ID_NUMBER": "3318101912900004",
	BENEFICIARY_NAME              string `protobuf:"bytes,37,opt,name=BENEFICIARY_NAME,proto3" json:"BENEFICIARY_NAME,omitempty"`                           // "BENEFICIARY_NAME": "FERRY MARK",
	BENEFICIARY_ADDRESS           string `protobuf:"bytes,38,opt,name=BENEFICIARY_ADDRESS,proto3" json:"BENEFICIARY_ADDRESS,omitempty"`                     // "BENEFICIARY_ADDRESS": "24 STREET",
	BENEFICIARY_CITY              string `protobuf:"bytes,39,opt,name=BENEFICIARY_CITY,proto3" json:"BENEFICIARY_CITY,omitempty"`                           // "BENEFICIARY_CITY": "ALASKA",
	BENEFICIARY_STATE_PROVINCE    string `protobuf:"bytes,40,opt,name=BENEFICIARY_STATE_PROVINCE,proto3" json:"BENEFICIARY_STATE_PROVINCE,omitempty"`       // "BENEFICIARY_STATE_PROVINCE": "ALASKA",
	BENEFICIARY_POSTCODE          string `protobuf:"bytes,41,opt,name=BENEFICIARY_POSTCODE,proto3" json:"BENEFICIARY_POSTCODE,omitempty"`                   // "BENEFICIARY_POSTCODE": "50144",
	BENEFICIARY_COUNTRY_CODE      string `protobuf:"bytes,42,opt,name=BENEFICIARY_COUNTRY_CODE,proto3" json:"BENEFICIARY_COUNTRY_CODE,omitempty"`           // "BENEFICIARY_COUNTRY_CODE": "US",
	BENEFICIARY_PHONE_CODE        string `protobuf:"bytes,43,opt,name=BENEFICIARY_PHONE_CODE,proto3" json:"BENEFICIARY_PHONE_CODE,omitempty"`               // "BENEFICIARY_PHONE_CODE": "852",
	BENEFICIARY_PHONE             string `protobuf:"bytes,44,opt,name=BENEFICIARY_PHONE,proto3" json:"BENEFICIARY_PHONE,omitempty"`                         // "BENEFICIARY_PHONE": "081792226376",
	BENEFICIARY_EMAIL             string `protobuf:"bytes,45,opt,name=BENEFICIARY_EMAIL,proto3" json:"BENEFICIARY_EMAIL,omitempty"`                         // "BENEFICIARY_EMAIL": "ELABRAMBRI@GMAIL.COM",
	BENEFICIARY_TYPE              string `protobuf:"bytes,46,opt,name=BENEFICIARY_TYPE,proto3" json:"BENEFICIARY_TYPE,omitempty"`                           // "BENEFICIARY_TYPE": "1",
	BENEFICIARY_GENDER            string `protobuf:"bytes,47,opt,name=BENEFICIARY_GENDER,proto3" json:"BENEFICIARY_GENDER,omitempty"`                       // "BENEFICIARY_GENDER": "1",
	BENEFICIARY_RELATIONSHIP      string `protobuf:"bytes,48,opt,name=BENEFICIARY_RELATIONSHIP,proto3" json:"BENEFICIARY_RELATIONSHIP,omitempty"`           // "BENEFICIARY_RELATIONSHIP": "1",
	CURRENCY_ORI                  string `protobuf:"bytes,49,opt,name=CURRENCY_ORI,proto3" json:"CURRENCY_ORI,omitempty"`                                   // "CURRENCY_ORI": "USD",
	SENDER_ID_TYPE                string `protobuf:"bytes,50,opt,name=SENDER_ID_TYPE,proto3" json:"SENDER_ID_TYPE,omitempty"`                               // "SENDER_ID_TYPE": "1",
	SENDER_ID_NUMBER              string `protobuf:"bytes,51,opt,name=SENDER_ID_NUMBER,proto3" json:"SENDER_ID_NUMBER,omitempty"`                           // "SENDER_ID_NUMBER": "00835345345345",
	SENDER_ID_ISSUE_DATE          string `protobuf:"bytes,52,opt,name=SENDER_ID_ISSUE_DATE,proto3" json:"SENDER_ID_ISSUE_DATE,omitempty"`                   // "SENDER_ID_ISSUE_DATE": "2020-08-18",
	SENDER_ID_EXPIRED_DATE        string `protobuf:"bytes,53,opt,name=SENDER_ID_EXPIRED_DATE,proto3" json:"SENDER_ID_EXPIRED_DATE,omitempty"`               // "SENDER_ID_EXPIRED_DATE": "2020-09-18",
	SENDER_NAME                   string `protobuf:"bytes,54,opt,name=SENDER_NAME,proto3" json:"SENDER_NAME,omitempty"`                                     // "SENDER_NAME": "BANGKIT NGABDIANTO OTHER",
	SENDER_ADDRESS                string `protobuf:"bytes,55,opt,name=SENDER_ADDRESS,proto3" json:"SENDER_ADDRESS,omitempty"`                               // "SENDER_ADDRESS": "JL HARSONO RM",
	SENDER_CITY                   string `protobuf:"bytes,56,opt,name=SENDER_CITY,proto3" json:"SENDER_CITY,omitempty"`                                     // "SENDER_CITY": "DKI JAKARTA",
	SENDER_STATE_PROVINCE         string `protobuf:"bytes,57,opt,name=SENDER_STATE_PROVINCE,proto3" json:"SENDER_STATE_PROVINCE,omitempty"`                 // "SENDER_STATE_PROVINCE": "JAKARTA SELATAN",
	SENDER_POSTCODE               string `protobuf:"bytes,58,opt,name=SENDER_POSTCODE,proto3" json:"SENDER_POSTCODE,omitempty"`                             // "SENDER_POSTCODE": "50144",
	SENDER_COUNTRY_CODE           string `protobuf:"bytes,59,opt,name=SENDER_COUNTRY_CODE,proto3" json:"SENDER_COUNTRY_CODE,omitempty"`                     // "SENDER_COUNTRY_CODE": "1",
	SENDER_DOB                    string `protobuf:"bytes,60,opt,name=SENDER_DOB,proto3" json:"SENDER_DOB,omitempty"`                                       // "SENDER_DOB": "1990-01-22",
	SENDER_PHONE_CODE             string `protobuf:"bytes,61,opt,name=SENDER_PHONE_CODE,proto3" json:"SENDER_PHONE_CODE,omitempty"`                         // "SENDER_PHONE_CODE": "62",
	SENDER_PHONE                  string `protobuf:"bytes,62,opt,name=SENDER_PHONE,proto3" json:"SENDER_PHONE,omitempty"`                                   // "SENDER_PHONE": "6281781112353",
	SENDER_EMAIL                  string `protobuf:"bytes,63,opt,name=SENDER_EMAIL,proto3" json:"SENDER_EMAIL,omitempty"`                                   // "SENDER_EMAIL": "ELABRAMBRI@BRILIAN.BRI.CO.ID",
	SENDER_TYPE                   string `protobuf:"bytes,64,opt,name=SENDER_TYPE,proto3" json:"SENDER_TYPE,omitempty"`                                     // "SENDER_TYPE": "1",
	SENDER_SOURCE_OF_FUND         string `protobuf:"bytes,65,opt,name=SENDER_SOURCE_OF_FUND,proto3" json:"SENDER_SOURCE_OF_FUND,omitempty"`                 // "SENDER_SOURCE_OF_FUND": "2",
	SENDER_BIRTH_CITY             string `protobuf:"bytes,66,opt,name=SENDER_BIRTH_CITY,proto3" json:"SENDER_BIRTH_CITY,omitempty"`                         // "SENDER_BIRTH_CITY": "153",
	SENDER_POSITION               string `protobuf:"bytes,67,opt,name=SENDER_POSITION,proto3" json:"SENDER_POSITION,omitempty"`                             // "SENDER_POSITION": "1",
	SENDER_BIRTH_COUNTRY          string `protobuf:"bytes,68,opt,name=SENDER_BIRTH_COUNTRY,proto3" json:"SENDER_BIRTH_COUNTRY,omitempty"`                   // "SENDER_BIRTH_COUNTRY": "ID",
	SENDER_WORKING_STATUS         string `protobuf:"bytes,69,opt,name=SENDER_WORKING_STATUS,proto3" json:"SENDER_WORKING_STATUS,omitempty"`                 // "SENDER_WORKING_STATUS": "1",
	SENDER_PROFESSION             string `protobuf:"bytes,70,opt,name=SENDER_PROFESSION,proto3" json:"SENDER_PROFESSION,omitempty"`                         // "SENDER_PROFESSION": "1",
	SENDER_CITIZENSHIP_COUNTRY    string `protobuf:"bytes,71,opt,name=SENDER_CITIZENSHIP_COUNTRY,proto3" json:"SENDER_CITIZENSHIP_COUNTRY,omitempty"`       // "SENDER_CITIZENSHIP_COUNTRY": "ID",
	SENDER_GENDER                 string `protobuf:"bytes,72,opt,name=SENDER_GENDER,proto3" json:"SENDER_GENDER,omitempty"`                                 // "SENDER_GENDER": "1",
	TRANSACTION_PURPOSE           string `protobuf:"bytes,73,opt,name=TRANSACTION_PURPOSE,proto3" json:"TRANSACTION_PURPOSE,omitempty"`                     // "TRANSACTION_PURPOSE": "17",
	TICKET_NUMBER                 string `protobuf:"bytes,74,opt,name=TICKET_NUMBER,proto3" json:"TICKET_NUMBER,omitempty"`                                 // "TICKET_NUMBER": "037402000163703",
	INTENDED_USE                  string `protobuf:"bytes,75,opt,name=INTENDED_USE,proto3" json:"INTENDED_USE,omitempty"`                                   // "INTENDED_USE": "1"
}

func (x *CounterpartTransactionRequest) Reset() {
	*x = CounterpartTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CounterpartTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounterpartTransactionRequest) ProtoMessage() {}

func (x *CounterpartTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CounterpartTransactionRequest.ProtoReflect.Descriptor instead.
func (*CounterpartTransactionRequest) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{5}
}

func (x *CounterpartTransactionRequest) GetAMOUNT_ORI() string {
	if x != nil {
		return x.AMOUNT_ORI
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetDEBIT_ACCOUNT() string {
	if x != nil {
		return x.DEBIT_ACCOUNT
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetDEBIT_AMOUNT() string {
	if x != nil {
		return x.DEBIT_AMOUNT
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetDEBIT_CURRENCY() string {
	if x != nil {
		return x.DEBIT_CURRENCY
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetCREDIT_ACCOUNT_NOSTRO() string {
	if x != nil {
		return x.CREDIT_ACCOUNT_NOSTRO
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetCREDIT_AMOUNT_NOSTRO() string {
	if x != nil {
		return x.CREDIT_AMOUNT_NOSTRO
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetCREDIT_NOSTRO_CURRENCY() string {
	if x != nil {
		return x.CREDIT_NOSTRO_CURRENCY
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetCREDIT_ACCOUNT_GL_FEE() string {
	if x != nil {
		return x.CREDIT_ACCOUNT_GL_FEE
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetCREDIT_AMOUNT_GL_FEE() string {
	if x != nil {
		return x.CREDIT_AMOUNT_GL_FEE
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetCREDIT_GL_CURRENCY() string {
	if x != nil {
		return x.CREDIT_GL_CURRENCY
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetFEE_ACCOUNT_CHANNEL() string {
	if x != nil {
		return x.FEE_ACCOUNT_CHANNEL
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetFEE_DEBIT_AMOUNT_CHANNEL() string {
	if x != nil {
		return x.FEE_DEBIT_AMOUNT_CHANNEL
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetFEE_CREDIT_AMOUNT_CHANNEL() string {
	if x != nil {
		return x.FEE_CREDIT_AMOUNT_CHANNEL
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetFEE_CURRENCY_CHANNEL() string {
	if x != nil {
		return x.FEE_CURRENCY_CHANNEL
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetTELLERID_KCBO() string {
	if x != nil {
		return x.TELLERID_KCBO
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetBUY_RATE() string {
	if x != nil {
		return x.BUY_RATE
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetSELL_RATE() string {
	if x != nil {
		return x.SELL_RATE
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetBOOK_RATE_BUY() string {
	if x != nil {
		return x.BOOK_RATE_BUY
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetBOOK_RATE_SELL() string {
	if x != nil {
		return x.BOOK_RATE_SELL
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetREMARK2() string {
	if x != nil {
		return x.REMARK2
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetREMARK3() string {
	if x != nil {
		return x.REMARK3
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetCOUNTERPART() string {
	if x != nil {
		return x.COUNTERPART
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetROUTING() string {
	if x != nil {
		return x.ROUTING
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetTRANSACTION_ID_TYPE() string {
	if x != nil {
		return x.TRANSACTION_ID_TYPE
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetNOSTRO_BIC() string {
	if x != nil {
		return x.NOSTRO_BIC
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetTRANSACTION_ID() string {
	if x != nil {
		return x.TRANSACTION_ID
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetUSER_TRANSACTION() string {
	if x != nil {
		return x.USER_TRANSACTION
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetUSER_TRANSACTION_BRANCH_CODE() string {
	if x != nil {
		return x.USER_TRANSACTION_BRANCH_CODE
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetACCOUNT_NUMBER() string {
	if x != nil {
		return x.ACCOUNT_NUMBER
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetCHARGES_TYPE() string {
	if x != nil {
		return x.CHARGES_TYPE
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetBENEFICIARY_BANK_CODE() string {
	if x != nil {
		return x.BENEFICIARY_BANK_CODE
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetBENEFICIARY_BANK_NAME() string {
	if x != nil {
		return x.BENEFICIARY_BANK_NAME
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetBENEFICIARY_BANK_ADDRESS() string {
	if x != nil {
		return x.BENEFICIARY_BANK_ADDRESS
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetBENEFICIARY_BANK_CITY() string {
	if x != nil {
		return x.BENEFICIARY_BANK_CITY
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetBENEFICIARY_BANK_COUNTRY_CODE() string {
	if x != nil {
		return x.BENEFICIARY_BANK_COUNTRY_CODE
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetBENEFICIARY_ID_TYPE() string {
	if x != nil {
		return x.BENEFICIARY_ID_TYPE
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetBENEFICIARY_ID_NUMBER() string {
	if x != nil {
		return x.BENEFICIARY_ID_NUMBER
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetBENEFICIARY_NAME() string {
	if x != nil {
		return x.BENEFICIARY_NAME
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetBENEFICIARY_ADDRESS() string {
	if x != nil {
		return x.BENEFICIARY_ADDRESS
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetBENEFICIARY_CITY() string {
	if x != nil {
		return x.BENEFICIARY_CITY
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetBENEFICIARY_STATE_PROVINCE() string {
	if x != nil {
		return x.BENEFICIARY_STATE_PROVINCE
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetBENEFICIARY_POSTCODE() string {
	if x != nil {
		return x.BENEFICIARY_POSTCODE
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetBENEFICIARY_COUNTRY_CODE() string {
	if x != nil {
		return x.BENEFICIARY_COUNTRY_CODE
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetBENEFICIARY_PHONE_CODE() string {
	if x != nil {
		return x.BENEFICIARY_PHONE_CODE
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetBENEFICIARY_PHONE() string {
	if x != nil {
		return x.BENEFICIARY_PHONE
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetBENEFICIARY_EMAIL() string {
	if x != nil {
		return x.BENEFICIARY_EMAIL
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetBENEFICIARY_TYPE() string {
	if x != nil {
		return x.BENEFICIARY_TYPE
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetBENEFICIARY_GENDER() string {
	if x != nil {
		return x.BENEFICIARY_GENDER
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetBENEFICIARY_RELATIONSHIP() string {
	if x != nil {
		return x.BENEFICIARY_RELATIONSHIP
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetCURRENCY_ORI() string {
	if x != nil {
		return x.CURRENCY_ORI
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetSENDER_ID_TYPE() string {
	if x != nil {
		return x.SENDER_ID_TYPE
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetSENDER_ID_NUMBER() string {
	if x != nil {
		return x.SENDER_ID_NUMBER
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetSENDER_ID_ISSUE_DATE() string {
	if x != nil {
		return x.SENDER_ID_ISSUE_DATE
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetSENDER_ID_EXPIRED_DATE() string {
	if x != nil {
		return x.SENDER_ID_EXPIRED_DATE
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetSENDER_NAME() string {
	if x != nil {
		return x.SENDER_NAME
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetSENDER_ADDRESS() string {
	if x != nil {
		return x.SENDER_ADDRESS
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetSENDER_CITY() string {
	if x != nil {
		return x.SENDER_CITY
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetSENDER_STATE_PROVINCE() string {
	if x != nil {
		return x.SENDER_STATE_PROVINCE
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetSENDER_POSTCODE() string {
	if x != nil {
		return x.SENDER_POSTCODE
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetSENDER_COUNTRY_CODE() string {
	if x != nil {
		return x.SENDER_COUNTRY_CODE
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetSENDER_DOB() string {
	if x != nil {
		return x.SENDER_DOB
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetSENDER_PHONE_CODE() string {
	if x != nil {
		return x.SENDER_PHONE_CODE
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetSENDER_PHONE() string {
	if x != nil {
		return x.SENDER_PHONE
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetSENDER_EMAIL() string {
	if x != nil {
		return x.SENDER_EMAIL
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetSENDER_TYPE() string {
	if x != nil {
		return x.SENDER_TYPE
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetSENDER_SOURCE_OF_FUND() string {
	if x != nil {
		return x.SENDER_SOURCE_OF_FUND
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetSENDER_BIRTH_CITY() string {
	if x != nil {
		return x.SENDER_BIRTH_CITY
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetSENDER_POSITION() string {
	if x != nil {
		return x.SENDER_POSITION
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetSENDER_BIRTH_COUNTRY() string {
	if x != nil {
		return x.SENDER_BIRTH_COUNTRY
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetSENDER_WORKING_STATUS() string {
	if x != nil {
		return x.SENDER_WORKING_STATUS
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetSENDER_PROFESSION() string {
	if x != nil {
		return x.SENDER_PROFESSION
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetSENDER_CITIZENSHIP_COUNTRY() string {
	if x != nil {
		return x.SENDER_CITIZENSHIP_COUNTRY
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetSENDER_GENDER() string {
	if x != nil {
		return x.SENDER_GENDER
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetTRANSACTION_PURPOSE() string {
	if x != nil {
		return x.TRANSACTION_PURPOSE
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetTICKET_NUMBER() string {
	if x != nil {
		return x.TICKET_NUMBER
	}
	return ""
}

func (x *CounterpartTransactionRequest) GetINTENDED_USE() string {
	if x != nil {
		return x.INTENDED_USE
	}
	return ""
}

type CounterpartTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JOURNAL_SEQ      string `protobuf:"bytes,1,opt,name=JOURNAL_SEQ,proto3" json:"JOURNAL_SEQ,omitempty"`           // "JOURNAL_SEQ": "8940006",
	RESPONSE_CODE    string `protobuf:"bytes,2,opt,name=RESPONSE_CODE,proto3" json:"RESPONSE_CODE,omitempty"`       // "RESPONSE_CODE": "00",
	RESPONSE_MESSAGE string `protobuf:"bytes,3,opt,name=RESPONSE_MESSAGE,proto3" json:"RESPONSE_MESSAGE,omitempty"` // "RESPONSE_MESSAGE": "Transaction Successfully",
	ERROR_CODE       string `protobuf:"bytes,4,opt,name=ERROR_CODE,proto3" json:"ERROR_CODE,omitempty"`             // "ERROR_CODE": "AS-000"
}

func (x *CounterpartTransaction) Reset() {
	*x = CounterpartTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CounterpartTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounterpartTransaction) ProtoMessage() {}

func (x *CounterpartTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CounterpartTransaction.ProtoReflect.Descriptor instead.
func (*CounterpartTransaction) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{6}
}

func (x *CounterpartTransaction) GetJOURNAL_SEQ() string {
	if x != nil {
		return x.JOURNAL_SEQ
	}
	return ""
}

func (x *CounterpartTransaction) GetRESPONSE_CODE() string {
	if x != nil {
		return x.RESPONSE_CODE
	}
	return ""
}

func (x *CounterpartTransaction) GetRESPONSE_MESSAGE() string {
	if x != nil {
		return x.RESPONSE_MESSAGE
	}
	return ""
}

func (x *CounterpartTransaction) GetERROR_CODE() string {
	if x != nil {
		return x.ERROR_CODE
	}
	return ""
}

type CounterpartTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool                    `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string                  `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *CounterpartTransaction `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CounterpartTransactionResponse) Reset() {
	*x = CounterpartTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CounterpartTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounterpartTransactionResponse) ProtoMessage() {}

func (x *CounterpartTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CounterpartTransactionResponse.ProtoReflect.Descriptor instead.
func (*CounterpartTransactionResponse) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{7}
}

func (x *CounterpartTransactionResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *CounterpartTransactionResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CounterpartTransactionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CounterpartTransactionResponse) GetData() *CounterpartTransaction {
	if x != nil {
		return x.Data
	}
	return nil
}

type SwiftRoutePartnerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SENDER_CURRENCY  string `protobuf:"bytes,1,opt,name=SENDER_CURRENCY,proto3" json:"SENDER_CURRENCY,omitempty"`   // "SENDER_CURRENCY": "IDR",
	RECEIVE_COUNTRY  string `protobuf:"bytes,2,opt,name=RECEIVE_COUNTRY,proto3" json:"RECEIVE_COUNTRY,omitempty"`   // "RECEIVE_COUNTRY": "US",
	RECEIVE_AMOUNT   string `protobuf:"bytes,3,opt,name=RECEIVE_AMOUNT,proto3" json:"RECEIVE_AMOUNT,omitempty"`     // "RECEIVE_AMOUNT": "24000",
	RECEIVE_CURRENCY string `protobuf:"bytes,4,opt,name=RECEIVE_CURRENCY,proto3" json:"RECEIVE_CURRENCY,omitempty"` // "RECEIVE_CURRENCY": "USD",
	CHARGE_TYPE      string `protobuf:"bytes,5,opt,name=CHARGE_TYPE,proto3" json:"CHARGE_TYPE,omitempty"`           // "CHARGE_TYPE": "OUR",
	COUNTERPART      string `protobuf:"bytes,6,opt,name=COUNTERPART,proto3" json:"COUNTERPART,omitempty"`           // "COUNTERPART": "BRICAMS",
	DEALCODE         string `protobuf:"bytes,7,opt,name=DEALCODE,proto3" json:"DEALCODE,omitempty"`                 // "DEAL_CODE": "O0141895"
}

func (x *SwiftRoutePartnerRequest) Reset() {
	*x = SwiftRoutePartnerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwiftRoutePartnerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwiftRoutePartnerRequest) ProtoMessage() {}

func (x *SwiftRoutePartnerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwiftRoutePartnerRequest.ProtoReflect.Descriptor instead.
func (*SwiftRoutePartnerRequest) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{8}
}

func (x *SwiftRoutePartnerRequest) GetSENDER_CURRENCY() string {
	if x != nil {
		return x.SENDER_CURRENCY
	}
	return ""
}

func (x *SwiftRoutePartnerRequest) GetRECEIVE_COUNTRY() string {
	if x != nil {
		return x.RECEIVE_COUNTRY
	}
	return ""
}

func (x *SwiftRoutePartnerRequest) GetRECEIVE_AMOUNT() string {
	if x != nil {
		return x.RECEIVE_AMOUNT
	}
	return ""
}

func (x *SwiftRoutePartnerRequest) GetRECEIVE_CURRENCY() string {
	if x != nil {
		return x.RECEIVE_CURRENCY
	}
	return ""
}

func (x *SwiftRoutePartnerRequest) GetCHARGE_TYPE() string {
	if x != nil {
		return x.CHARGE_TYPE
	}
	return ""
}

func (x *SwiftRoutePartnerRequest) GetCOUNTERPART() string {
	if x != nil {
		return x.COUNTERPART
	}
	return ""
}

func (x *SwiftRoutePartnerRequest) GetDEALCODE() string {
	if x != nil {
		return x.DEALCODE
	}
	return ""
}

type KursBRIEFXRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DEALT_CURRENCY   string `protobuf:"bytes,1,opt,name=DEALT_CURRENCY,json=DEALTCURRENCY,proto3" json:"DEALT_CURRENCY,omitempty"`       // "DEALT_CURRENCY": "USD",
	COUNTER_CURRENCY string `protobuf:"bytes,2,opt,name=COUNTER_CURRENCY,json=COUNTERCURRENCY,proto3" json:"COUNTER_CURRENCY,omitempty"` // "COUNTER_CURRENCY": "IDR"
}

func (x *KursBRIEFXRequest) Reset() {
	*x = KursBRIEFXRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KursBRIEFXRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KursBRIEFXRequest) ProtoMessage() {}

func (x *KursBRIEFXRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KursBRIEFXRequest.ProtoReflect.Descriptor instead.
func (*KursBRIEFXRequest) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{9}
}

func (x *KursBRIEFXRequest) GetDEALT_CURRENCY() string {
	if x != nil {
		return x.DEALT_CURRENCY
	}
	return ""
}

func (x *KursBRIEFXRequest) GetCOUNTER_CURRENCY() string {
	if x != nil {
		return x.COUNTER_CURRENCY
	}
	return ""
}

type BRIGateBRIefxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DealtCurrency   string `protobuf:"bytes,1,opt,name=dealtCurrency,proto3" json:"dealtCurrency,omitempty"`
	CounterCurrency string `protobuf:"bytes,2,opt,name=counterCurrency,proto3" json:"counterCurrency,omitempty"`
}

func (x *BRIGateBRIefxRequest) Reset() {
	*x = BRIGateBRIefxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRIGateBRIefxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRIGateBRIefxRequest) ProtoMessage() {}

func (x *BRIGateBRIefxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRIGateBRIefxRequest.ProtoReflect.Descriptor instead.
func (*BRIGateBRIefxRequest) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{10}
}

func (x *BRIGateBRIefxRequest) GetDealtCurrency() string {
	if x != nil {
		return x.DealtCurrency
	}
	return ""
}

func (x *BRIGateBRIefxRequest) GetCounterCurrency() string {
	if x != nil {
		return x.CounterCurrency
	}
	return ""
}

type BRIGateBRIefxData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency        string  `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`                  // "currency": "USD",
	IbtBuy          float64 `protobuf:"fixed64,2,opt,name=ibtBuy,proto3" json:"ibtBuy,omitempty"`                    // "ibtBuy": 13955.0,
	IbtSell         float64 `protobuf:"fixed64,3,opt,name=ibtSell,proto3" json:"ibtSell,omitempty"`                  // "ibtSell": 14105.0,
	SpreadBuy       float64 `protobuf:"fixed64,4,opt,name=spreadBuy,proto3" json:"spreadBuy,omitempty"`              // "spreadBuy": 0.0,
	SpreadSell      float64 `protobuf:"fixed64,5,opt,name=spreadSell,proto3" json:"spreadSell,omitempty"`            // "spreadSell": 0.0,
	CounterBuy      float64 `protobuf:"fixed64,6,opt,name=counterBuy,proto3" json:"counterBuy,omitempty"`            // "counterBuy": 13955.0,
	CounterSell     float64 `protobuf:"fixed64,7,opt,name=counterSell,proto3" json:"counterSell,omitempty"`          // "counterSell": 14105.0,
	BookRate        float64 `protobuf:"fixed64,8,opt,name=bookRate,proto3" json:"bookRate,omitempty"`                // "bookRate": 14030.0,
	Status          float64 `protobuf:"fixed64,9,opt,name=status,proto3" json:"status,omitempty"`                    // "status": 0,
	Tier1Buy        float64 `protobuf:"fixed64,10,opt,name=tier1Buy,proto3" json:"tier1Buy,omitempty"`               // "tier1Buy": 13955.0,
	Tier2Buy        float64 `protobuf:"fixed64,11,opt,name=tier2Buy,proto3" json:"tier2Buy,omitempty"`               // "tier2Buy": 13955.0,
	Tier3Buy        float64 `protobuf:"fixed64,12,opt,name=tier3Buy,proto3" json:"tier3Buy,omitempty"`               // "tier3Buy": 13955.0,
	Tier4Buy        float64 `protobuf:"fixed64,13,opt,name=tier4Buy,proto3" json:"tier4Buy,omitempty"`               // "tier4Buy": 13955.0,
	Tier1Sell       float64 `protobuf:"fixed64,14,opt,name=tier1Sell,proto3" json:"tier1Sell,omitempty"`             // "tier1Sell": 14105.0,
	Tier2Sell       float64 `protobuf:"fixed64,15,opt,name=tier2Sell,proto3" json:"tier2Sell,omitempty"`             // "tier2Sell": 14105.0,
	Tier3Sell       float64 `protobuf:"fixed64,16,opt,name=tier3Sell,proto3" json:"tier3Sell,omitempty"`             // "tier3Sell": 14105.0,
	Tier4Sell       float64 `protobuf:"fixed64,17,opt,name=tier4Sell,proto3" json:"tier4Sell,omitempty"`             // "tier4Sell": 14105.0,
	Tier1SpreadBuy  float64 `protobuf:"fixed64,18,opt,name=tier1SpreadBuy,proto3" json:"tier1SpreadBuy,omitempty"`   // "tier1SpreadBuy": 0.0,
	Tier2SpreadBuy  float64 `protobuf:"fixed64,19,opt,name=tier2SpreadBuy,proto3" json:"tier2SpreadBuy,omitempty"`   // "tier2SpreadBuy": 0.0,
	Tier3SpreadBuy  float64 `protobuf:"fixed64,20,opt,name=tier3SpreadBuy,proto3" json:"tier3SpreadBuy,omitempty"`   // "tier3SpreadBuy": 0.0,
	Tier4SpreadBuy  float64 `protobuf:"fixed64,21,opt,name=tier4SpreadBuy,proto3" json:"tier4SpreadBuy,omitempty"`   // "tier4SpreadBuy": 0.0,
	Tier1SpreadSell float64 `protobuf:"fixed64,22,opt,name=tier1SpreadSell,proto3" json:"tier1SpreadSell,omitempty"` // "tier1SpreadSell": 0.0,
	Tier2SpreadSell float64 `protobuf:"fixed64,23,opt,name=tier2SpreadSell,proto3" json:"tier2SpreadSell,omitempty"` // "tier2SpreadSell": 0.0,
	Tier3SpreadSell float64 `protobuf:"fixed64,24,opt,name=tier3SpreadSell,proto3" json:"tier3SpreadSell,omitempty"` // "tier3SpreadSell": 0.0,
	Tier4SpreadSell float64 `protobuf:"fixed64,25,opt,name=tier4SpreadSell,proto3" json:"tier4SpreadSell,omitempty"` // "tier4SpreadSell": 0.0,
	UploadTime      string  `protobuf:"bytes,26,opt,name=uploadTime,proto3" json:"uploadTime,omitempty"`             // "uploadTime": "2022-05-27T14:07:05.833",
	BnBuy           float64 `protobuf:"fixed64,27,opt,name=bnBuy,proto3" json:"bnBuy,omitempty"`                     // "bnBuy": 13930.0,
	BnSell          float64 `protobuf:"fixed64,28,opt,name=bnSell,proto3" json:"bnSell,omitempty"`                   // "bnSell": 14130.0,
	TtBuy           float64 `protobuf:"fixed64,29,opt,name=ttBuy,proto3" json:"ttBuy,omitempty"`                     // "ttBuy": 13950.0,
	TtSell          float64 `protobuf:"fixed64,30,opt,name=ttSell,proto3" json:"ttSell,omitempty"`                   // "ttSell": 14110.0,
	TcBuy           float64 `protobuf:"fixed64,31,opt,name=tcBuy,proto3" json:"tcBuy,omitempty"`                     // "tcBuy": 13905.0,
	TcSell          float64 `protobuf:"fixed64,32,opt,name=tcSell,proto3" json:"tcSell,omitempty"`                   // "tcSell": 14155.0,
	BnBuySpread     float64 `protobuf:"fixed64,33,opt,name=bnBuySpread,proto3" json:"bnBuySpread,omitempty"`         // "bnBuySpread": 25.0,
	BnSellSpread    float64 `protobuf:"fixed64,34,opt,name=bnSellSpread,proto3" json:"bnSellSpread,omitempty"`       // "bnSellSpread": 25.0,
	TtBuySpread     float64 `protobuf:"fixed64,35,opt,name=ttBuySpread,proto3" json:"ttBuySpread,omitempty"`         // "ttBuySpread": 5.0,
	TtSellSpread    float64 `protobuf:"fixed64,36,opt,name=ttSellSpread,proto3" json:"ttSellSpread,omitempty"`       // "ttSellSpread": 5.0,
	TcBuySpread     float64 `protobuf:"fixed64,37,opt,name=tcBuySpread,proto3" json:"tcBuySpread,omitempty"`         // "tcBuySpread": 50.0,
	TcSellSpread    float64 `protobuf:"fixed64,38,opt,name=tcSellSpread,proto3" json:"tcSellSpread,omitempty"`       // "tcSellSpread": 50.0,
	StatusIb        float64 `protobuf:"fixed64,39,opt,name=statusIb,proto3" json:"statusIb,omitempty"`               // "statusIb": 0
}

func (x *BRIGateBRIefxData) Reset() {
	*x = BRIGateBRIefxData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRIGateBRIefxData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRIGateBRIefxData) ProtoMessage() {}

func (x *BRIGateBRIefxData) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRIGateBRIefxData.ProtoReflect.Descriptor instead.
func (*BRIGateBRIefxData) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{11}
}

func (x *BRIGateBRIefxData) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BRIGateBRIefxData) GetIbtBuy() float64 {
	if x != nil {
		return x.IbtBuy
	}
	return 0
}

func (x *BRIGateBRIefxData) GetIbtSell() float64 {
	if x != nil {
		return x.IbtSell
	}
	return 0
}

func (x *BRIGateBRIefxData) GetSpreadBuy() float64 {
	if x != nil {
		return x.SpreadBuy
	}
	return 0
}

func (x *BRIGateBRIefxData) GetSpreadSell() float64 {
	if x != nil {
		return x.SpreadSell
	}
	return 0
}

func (x *BRIGateBRIefxData) GetCounterBuy() float64 {
	if x != nil {
		return x.CounterBuy
	}
	return 0
}

func (x *BRIGateBRIefxData) GetCounterSell() float64 {
	if x != nil {
		return x.CounterSell
	}
	return 0
}

func (x *BRIGateBRIefxData) GetBookRate() float64 {
	if x != nil {
		return x.BookRate
	}
	return 0
}

func (x *BRIGateBRIefxData) GetStatus() float64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *BRIGateBRIefxData) GetTier1Buy() float64 {
	if x != nil {
		return x.Tier1Buy
	}
	return 0
}

func (x *BRIGateBRIefxData) GetTier2Buy() float64 {
	if x != nil {
		return x.Tier2Buy
	}
	return 0
}

func (x *BRIGateBRIefxData) GetTier3Buy() float64 {
	if x != nil {
		return x.Tier3Buy
	}
	return 0
}

func (x *BRIGateBRIefxData) GetTier4Buy() float64 {
	if x != nil {
		return x.Tier4Buy
	}
	return 0
}

func (x *BRIGateBRIefxData) GetTier1Sell() float64 {
	if x != nil {
		return x.Tier1Sell
	}
	return 0
}

func (x *BRIGateBRIefxData) GetTier2Sell() float64 {
	if x != nil {
		return x.Tier2Sell
	}
	return 0
}

func (x *BRIGateBRIefxData) GetTier3Sell() float64 {
	if x != nil {
		return x.Tier3Sell
	}
	return 0
}

func (x *BRIGateBRIefxData) GetTier4Sell() float64 {
	if x != nil {
		return x.Tier4Sell
	}
	return 0
}

func (x *BRIGateBRIefxData) GetTier1SpreadBuy() float64 {
	if x != nil {
		return x.Tier1SpreadBuy
	}
	return 0
}

func (x *BRIGateBRIefxData) GetTier2SpreadBuy() float64 {
	if x != nil {
		return x.Tier2SpreadBuy
	}
	return 0
}

func (x *BRIGateBRIefxData) GetTier3SpreadBuy() float64 {
	if x != nil {
		return x.Tier3SpreadBuy
	}
	return 0
}

func (x *BRIGateBRIefxData) GetTier4SpreadBuy() float64 {
	if x != nil {
		return x.Tier4SpreadBuy
	}
	return 0
}

func (x *BRIGateBRIefxData) GetTier1SpreadSell() float64 {
	if x != nil {
		return x.Tier1SpreadSell
	}
	return 0
}

func (x *BRIGateBRIefxData) GetTier2SpreadSell() float64 {
	if x != nil {
		return x.Tier2SpreadSell
	}
	return 0
}

func (x *BRIGateBRIefxData) GetTier3SpreadSell() float64 {
	if x != nil {
		return x.Tier3SpreadSell
	}
	return 0
}

func (x *BRIGateBRIefxData) GetTier4SpreadSell() float64 {
	if x != nil {
		return x.Tier4SpreadSell
	}
	return 0
}

func (x *BRIGateBRIefxData) GetUploadTime() string {
	if x != nil {
		return x.UploadTime
	}
	return ""
}

func (x *BRIGateBRIefxData) GetBnBuy() float64 {
	if x != nil {
		return x.BnBuy
	}
	return 0
}

func (x *BRIGateBRIefxData) GetBnSell() float64 {
	if x != nil {
		return x.BnSell
	}
	return 0
}

func (x *BRIGateBRIefxData) GetTtBuy() float64 {
	if x != nil {
		return x.TtBuy
	}
	return 0
}

func (x *BRIGateBRIefxData) GetTtSell() float64 {
	if x != nil {
		return x.TtSell
	}
	return 0
}

func (x *BRIGateBRIefxData) GetTcBuy() float64 {
	if x != nil {
		return x.TcBuy
	}
	return 0
}

func (x *BRIGateBRIefxData) GetTcSell() float64 {
	if x != nil {
		return x.TcSell
	}
	return 0
}

func (x *BRIGateBRIefxData) GetBnBuySpread() float64 {
	if x != nil {
		return x.BnBuySpread
	}
	return 0
}

func (x *BRIGateBRIefxData) GetBnSellSpread() float64 {
	if x != nil {
		return x.BnSellSpread
	}
	return 0
}

func (x *BRIGateBRIefxData) GetTtBuySpread() float64 {
	if x != nil {
		return x.TtBuySpread
	}
	return 0
}

func (x *BRIGateBRIefxData) GetTtSellSpread() float64 {
	if x != nil {
		return x.TtSellSpread
	}
	return 0
}

func (x *BRIGateBRIefxData) GetTcBuySpread() float64 {
	if x != nil {
		return x.TcBuySpread
	}
	return 0
}

func (x *BRIGateBRIefxData) GetTcSellSpread() float64 {
	if x != nil {
		return x.TcSellSpread
	}
	return 0
}

func (x *BRIGateBRIefxData) GetStatusIb() float64 {
	if x != nil {
		return x.StatusIb
	}
	return 0
}

type BRIGateBRIefxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseCode    string               `protobuf:"bytes,1,opt,name=responseCode,proto3" json:"responseCode,omitempty"`       // "responseCode": "00",
	ResponseMessage string               `protobuf:"bytes,2,opt,name=responseMessage,proto3" json:"responseMessage,omitempty"` // "responseMessage": "SUKSES",
	ResponseData    []*BRIGateBRIefxData `protobuf:"bytes,3,rep,name=responseData,proto3" json:"responseData,omitempty"`       // "responseData": {}
}

func (x *BRIGateBRIefxResponse) Reset() {
	*x = BRIGateBRIefxResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRIGateBRIefxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRIGateBRIefxResponse) ProtoMessage() {}

func (x *BRIGateBRIefxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRIGateBRIefxResponse.ProtoReflect.Descriptor instead.
func (*BRIGateBRIefxResponse) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{12}
}

func (x *BRIGateBRIefxResponse) GetResponseCode() string {
	if x != nil {
		return x.ResponseCode
	}
	return ""
}

func (x *BRIGateBRIefxResponse) GetResponseMessage() string {
	if x != nil {
		return x.ResponseMessage
	}
	return ""
}

func (x *BRIGateBRIefxResponse) GetResponseData() []*BRIGateBRIefxData {
	if x != nil {
		return x.ResponseData
	}
	return nil
}

type BRIGateBRIefxAddons struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyDebet   string `protobuf:"bytes,1,opt,name=currencyDebet,proto3" json:"currencyDebet,omitempty"`
	CurrencyCredit  string `protobuf:"bytes,2,opt,name=currencyCredit,proto3" json:"currencyCredit,omitempty"`
	CounterBuy      string `protobuf:"bytes,5,opt,name=counterBuy,proto3" json:"counterBuy,omitempty"`
	CounterSell     string `protobuf:"bytes,6,opt,name=counterSell,proto3" json:"counterSell,omitempty"`
	UpdateDate      string `protobuf:"bytes,7,opt,name=updateDate,proto3" json:"updateDate,omitempty"`
	ResponseCode    string `protobuf:"bytes,8,opt,name=responseCode,proto3" json:"responseCode,omitempty"`
	ResponseMessage string `protobuf:"bytes,9,opt,name=responseMessage,proto3" json:"responseMessage,omitempty"`
	Currency        string `protobuf:"bytes,10,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *BRIGateBRIefxAddons) Reset() {
	*x = BRIGateBRIefxAddons{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRIGateBRIefxAddons) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRIGateBRIefxAddons) ProtoMessage() {}

func (x *BRIGateBRIefxAddons) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRIGateBRIefxAddons.ProtoReflect.Descriptor instead.
func (*BRIGateBRIefxAddons) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{13}
}

func (x *BRIGateBRIefxAddons) GetCurrencyDebet() string {
	if x != nil {
		return x.CurrencyDebet
	}
	return ""
}

func (x *BRIGateBRIefxAddons) GetCurrencyCredit() string {
	if x != nil {
		return x.CurrencyCredit
	}
	return ""
}

func (x *BRIGateBRIefxAddons) GetCounterBuy() string {
	if x != nil {
		return x.CounterBuy
	}
	return ""
}

func (x *BRIGateBRIefxAddons) GetCounterSell() string {
	if x != nil {
		return x.CounterSell
	}
	return ""
}

func (x *BRIGateBRIefxAddons) GetUpdateDate() string {
	if x != nil {
		return x.UpdateDate
	}
	return ""
}

func (x *BRIGateBRIefxAddons) GetResponseCode() string {
	if x != nil {
		return x.ResponseCode
	}
	return ""
}

func (x *BRIGateBRIefxAddons) GetResponseMessage() string {
	if x != nil {
		return x.ResponseMessage
	}
	return ""
}

func (x *BRIGateBRIefxAddons) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type BRIGateBRIefxAddonsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool                 `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32               `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string               `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *BRIGateBRIefxAddons `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *BRIGateBRIefxAddonsResponse) Reset() {
	*x = BRIGateBRIefxAddonsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRIGateBRIefxAddonsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRIGateBRIefxAddonsResponse) ProtoMessage() {}

func (x *BRIGateBRIefxAddonsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRIGateBRIefxAddonsResponse.ProtoReflect.Descriptor instead.
func (*BRIGateBRIefxAddonsResponse) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{14}
}

func (x *BRIGateBRIefxAddonsResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *BRIGateBRIefxAddonsResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BRIGateBRIefxAddonsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BRIGateBRIefxAddonsResponse) GetData() *BRIGateBRIefxAddons {
	if x != nil {
		return x.Data
	}
	return nil
}

type KursBRIEFX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CURRENCY_PAIR    string  `protobuf:"bytes,1,opt,name=CURRENCY_PAIR,json=CURRENCYPAIR,proto3" json:"CURRENCY_PAIR,omitempty"`           // "CURRENCY_PAIR": "USD-IDR",
	CURRENCY_1       string  `protobuf:"bytes,2,opt,name=CURRENCY_1,json=CURRENCY1,proto3" json:"CURRENCY_1,omitempty"`                    // "CURRENCY_1": "USD",
	CURRENCY_2       string  `protobuf:"bytes,3,opt,name=CURRENCY_2,json=CURRENCY2,proto3" json:"CURRENCY_2,omitempty"`                    // "CURRENCY_2": "IDR",
	BUY              float64 `protobuf:"fixed64,4,opt,name=BUY,proto3" json:"BUY,omitempty"`                                               // "BUY": 14574,
	SELL             float64 `protobuf:"fixed64,5,opt,name=SELL,proto3" json:"SELL,omitempty"`                                             // "SELL": 14664,
	STATUS           int32   `protobuf:"varint,6,opt,name=STATUS,proto3" json:"STATUS,omitempty"`                                          // "STATUS": 1,
	LASTEST_UPDATE   string  `protobuf:"bytes,7,opt,name=LASTEST_UPDATE,json=LASTESTUPDATE,proto3" json:"LASTEST_UPDATE,omitempty"`        // "LASTEST_UPDATE": "2022-05-13T22:59:06.953",
	ERROR_CODE       string  `protobuf:"bytes,8,opt,name=ERROR_CODE,json=ERRORCODE,proto3" json:"ERROR_CODE,omitempty"`                    // "ERROR_CODE": "FX-001",
	RESPONSE_CODE    string  `protobuf:"bytes,9,opt,name=RESPONSE_CODE,json=RESPONSECODE,proto3" json:"RESPONSE_CODE,omitempty"`           // "RESPONSE_CODE": "00",
	RESPONSE_MESSAGE string  `protobuf:"bytes,10,opt,name=RESPONSE_MESSAGE,json=RESPONSEMESSAGE,proto3" json:"RESPONSE_MESSAGE,omitempty"` // "RESPONSE_MESSAGE": "Sukses"
}

func (x *KursBRIEFX) Reset() {
	*x = KursBRIEFX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KursBRIEFX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KursBRIEFX) ProtoMessage() {}

func (x *KursBRIEFX) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KursBRIEFX.ProtoReflect.Descriptor instead.
func (*KursBRIEFX) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{15}
}

func (x *KursBRIEFX) GetCURRENCY_PAIR() string {
	if x != nil {
		return x.CURRENCY_PAIR
	}
	return ""
}

func (x *KursBRIEFX) GetCURRENCY_1() string {
	if x != nil {
		return x.CURRENCY_1
	}
	return ""
}

func (x *KursBRIEFX) GetCURRENCY_2() string {
	if x != nil {
		return x.CURRENCY_2
	}
	return ""
}

func (x *KursBRIEFX) GetBUY() float64 {
	if x != nil {
		return x.BUY
	}
	return 0
}

func (x *KursBRIEFX) GetSELL() float64 {
	if x != nil {
		return x.SELL
	}
	return 0
}

func (x *KursBRIEFX) GetSTATUS() int32 {
	if x != nil {
		return x.STATUS
	}
	return 0
}

func (x *KursBRIEFX) GetLASTEST_UPDATE() string {
	if x != nil {
		return x.LASTEST_UPDATE
	}
	return ""
}

func (x *KursBRIEFX) GetERROR_CODE() string {
	if x != nil {
		return x.ERROR_CODE
	}
	return ""
}

func (x *KursBRIEFX) GetRESPONSE_CODE() string {
	if x != nil {
		return x.RESPONSE_CODE
	}
	return ""
}

func (x *KursBRIEFX) GetRESPONSE_MESSAGE() string {
	if x != nil {
		return x.RESPONSE_MESSAGE
	}
	return ""
}

type KursBRIEFXResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool        `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32      `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string      `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *KursBRIEFX `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *KursBRIEFXResponse) Reset() {
	*x = KursBRIEFXResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KursBRIEFXResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KursBRIEFXResponse) ProtoMessage() {}

func (x *KursBRIEFXResponse) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KursBRIEFXResponse.ProtoReflect.Descriptor instead.
func (*KursBRIEFXResponse) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{16}
}

func (x *KursBRIEFXResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *KursBRIEFXResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *KursBRIEFXResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *KursBRIEFXResponse) GetData() *KursBRIEFX {
	if x != nil {
		return x.Data
	}
	return nil
}

type SwiftRoutePartnerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TICKET_NUMBER       string `protobuf:"bytes,1,opt,name=TICKET_NUMBER,proto3" json:"TICKET_NUMBER,omitempty"`             // "TICKET_NUMBER": "020602000555703",
	ROUTE               string `protobuf:"bytes,2,opt,name=ROUTE,proto3" json:"ROUTE,omitempty"`                             // "ROUTE": "SWIFT",
	TRANSACTION_TYPE    string `protobuf:"bytes,3,opt,name=TRANSACTION_TYPE,proto3" json:"TRANSACTION_TYPE,omitempty"`       // "TRANSACTION_TYPE": "ACCOUNT",
	TRANSACTION_ID_TYPE string `protobuf:"bytes,4,opt,name=TRANSACTION_ID_TYPE,proto3" json:"TRANSACTION_ID_TYPE,omitempty"` // "TRANSACTION_ID_TYPE": "0",
	NOSTRO_BIC          string `protobuf:"bytes,5,opt,name=NOSTRO_BIC,proto3" json:"NOSTRO_BIC,omitempty"`                   // "NOSTRO_BIC": "AANLGB21XXX",
	SEND_AMOUNT         string `protobuf:"bytes,6,opt,name=SEND_AMOUNT,proto3" json:"SEND_AMOUNT,omitempty"`                 // "SEND_AMOUNT": "344664000.00",
	SEND_AMOUNT_TOTAL   string `protobuf:"bytes,7,opt,name=SEND_AMOUNT_TOTAL,proto3" json:"SEND_AMOUNT_TOTAL,omitempty"`     // "SEND_AMOUNT_TOTAL": "345094830.00",
	SEND_CURRENCY       string `protobuf:"bytes,8,opt,name=SEND_CURRENCY,proto3" json:"SEND_CURRENCY,omitempty"`             // "SEND_CURRENCY": "IDR",
	CURRENCY_TRX        string `protobuf:"bytes,9,opt,name=CURRENCY_TRX,proto3" json:"CURRENCY_TRX,omitempty"`               // "CURRENCY_TRX": "USD",
	BASE_CURRENCY       string `protobuf:"bytes,10,opt,name=BASE_CURRENCY,proto3" json:"BASE_CURRENCY,omitempty"`            // "BASE_CURRENCY": "USD",
	CHARGES_CURRENCY    string `protobuf:"bytes,11,opt,name=CHARGES_CURRENCY,proto3" json:"CHARGES_CURRENCY,omitempty"`      // "CHARGES_CURRENCY": "IDR",
	AMOUNT              string `protobuf:"bytes,12,opt,name=AMOUNT,proto3" json:"AMOUNT,omitempty"`                          // "AMOUNT": "24000.00",
	AMOUNT_CONVERT      string `protobuf:"bytes,13,opt,name=AMOUNT_CONVERT,proto3" json:"AMOUNT_CONVERT,omitempty"`          // "AMOUNT_CONVERT": "24000.00",
	CHARGES             string `protobuf:"bytes,14,opt,name=CHARGES,proto3" json:"CHARGES,omitempty"`                        // "CHARGES": "5.00",
	CHARGES_OUR         string `protobuf:"bytes,15,opt,name=CHARGES_OUR,proto3" json:"CHARGES_OUR,omitempty"`                // "CHARGES_OUR": "25.00",
	FX_SPREAD           string `protobuf:"bytes,16,opt,name=FX_SPREAD,proto3" json:"FX_SPREAD,omitempty"`                    // "FX_SPREAD": "0.00",
	// bool MULTICURRENCY = 17 [json_name='MULTICURRENCY']; // "MULTICURRENCY": "0",
	ESTIMATED_TIME                   string `protobuf:"bytes,18,opt,name=ESTIMATED_TIME,proto3" json:"ESTIMATED_TIME,omitempty"`                                     // "ESTIMATED_TIME": "3600",
	BUY_RATE                         string `protobuf:"bytes,19,opt,name=BUY_RATE,proto3" json:"BUY_RATE,omitempty"`                                                 // "BUY_RATE": "1.00",
	SELL_RATE                        string `protobuf:"bytes,20,opt,name=SELL_RATE,proto3" json:"SELL_RATE,omitempty"`                                               // "SELL_RATE": "14361.00",
	SESSION_ID                       string `protobuf:"bytes,21,opt,name=SESSION_ID,proto3" json:"SESSION_ID,omitempty"`                                             // "SESSION_ID": "",
	DEBIT_AMOUNT_MAIN                string `protobuf:"bytes,22,opt,name=DEBIT_AMOUNT_MAIN,proto3" json:"DEBIT_AMOUNT_MAIN,omitempty"`                               // "DEBIT_AMOUNT_MAIN": "344664000.00",
	DEBIT_AMOUNT_FEE_MAIN            string `protobuf:"bytes,23,opt,name=DEBIT_AMOUNT_FEE_MAIN,proto3" json:"DEBIT_AMOUNT_FEE_MAIN,omitempty"`                       // "DEBIT_AMOUNT_FEE_MAIN": "359025.00",
	IA_FEE_OUR_ACCOUNT_MAIN          string `protobuf:"bytes,24,opt,name=IA_FEE_OUR_ACCOUNT_MAIN,proto3" json:"IA_FEE_OUR_ACCOUNT_MAIN,omitempty"`                   // "IA_FEE_OUR_ACCOUNT_MAIN": "030102000111990",
	IA_FEE_OUR_AMOUNT_MAIN           string `protobuf:"bytes,25,opt,name=IA_FEE_OUR_AMOUNT_MAIN,proto3" json:"IA_FEE_OUR_AMOUNT_MAIN,omitempty"`                     // "IA_FEE_OUR_AMOUNT_MAIN": "25.00",
	GL_ACCOUNT                       string `protobuf:"bytes,26,opt,name=GL_ACCOUNT,proto3" json:"GL_ACCOUNT,omitempty"`                                             // "GL_ACCOUNT": "1039407420",
	GL_AMOUNT_MAIN                   string `protobuf:"bytes,27,opt,name=GL_AMOUNT_MAIN,proto3" json:"GL_AMOUNT_MAIN,omitempty"`                                     // "GL_AMOUNT_MAIN": "24000.00",
	DEBIT_CURRENCY_MAIN              string `protobuf:"bytes,28,opt,name=DEBIT_CURRENCY_MAIN,proto3" json:"DEBIT_CURRENCY_MAIN,omitempty"`                           // "DEBIT_CURRENCY_MAIN": "IDR",
	CREDIT_CURRENCY_GL_MAIN          string `protobuf:"bytes,29,opt,name=CREDIT_CURRENCY_GL_MAIN,proto3" json:"CREDIT_CURRENCY_GL_MAIN,omitempty"`                   // "CREDIT_CURRENCY_GL_MAIN": "USD",
	CREDIT_CURRENCY_IA_MAIN          string `protobuf:"bytes,30,opt,name=CREDIT_CURRENCY_IA_MAIN,proto3" json:"CREDIT_CURRENCY_IA_MAIN,omitempty"`                   // "CREDIT_CURRENCY_IA_MAIN": "USD",
	FEE_DEBIT_AMOUNT                 string `protobuf:"bytes,31,opt,name=FEE_DEBIT_AMOUNT,proto3" json:"FEE_DEBIT_AMOUNT,omitempty"`                                 // "FEE_DEBIT_AMOUNT": "71805.00",
	GL_FEE_ACCOUNT                   string `protobuf:"bytes,32,opt,name=GL_FEE_ACCOUNT,proto3" json:"GL_FEE_ACCOUNT,omitempty"`                                     // "GL_FEE_ACCOUNT": "4012307421",
	CREDIT_CURRENCY_FEE              string `protobuf:"bytes,33,opt,name=CREDIT_CURRENCY_FEE,proto3" json:"CREDIT_CURRENCY_FEE,omitempty"`                           // "CREDIT_CURRENCY_FEE": "IDR",
	FEE_CREDIT_AMOUNT                string `protobuf:"bytes,34,opt,name=FEE_CREDIT_AMOUNT,proto3" json:"FEE_CREDIT_AMOUNT,omitempty"`                               // "FEE_CREDIT_AMOUNT": "71805.00",
	NOSTRO_ACCOUNT                   string `protobuf:"bytes,35,opt,name=NOSTRO_ACCOUNT,proto3" json:"NOSTRO_ACCOUNT,omitempty"`                                     // "NOSTRO_ACCOUNT": "1000715000",
	NOSTRO_AMOUNT                    string `protobuf:"bytes,36,opt,name=NOSTRO_AMOUNT,proto3" json:"NOSTRO_AMOUNT,omitempty"`                                       // "NOSTRO_AMOUNT": "24000.00",
	IA_FEE_CREDIT_AMOUNT             string `protobuf:"bytes,37,opt,name=IA_FEE_CREDIT_AMOUNT,proto3" json:"IA_FEE_CREDIT_AMOUNT,omitempty"`                         // "IA_FEE_CREDIT_AMOUNT": "0.00",
	CREDIT_CURRENCY_NOSTRO_DEST_BANK string `protobuf:"bytes,38,opt,name=CREDIT_CURRENCY_NOSTRO_DEST_BANK,proto3" json:"CREDIT_CURRENCY_NOSTRO_DEST_BANK,omitempty"` // "CREDIT_CURRENCY_NOSTRO_DEST_BANK": "USD",
	NOSTRO_CURRENCY                  string `protobuf:"bytes,39,opt,name=NOSTRO_CURRENCY,proto3" json:"NOSTRO_CURRENCY,omitempty"`                                   // "NOSTRO_CURRENCY": "USD",
	NOSTRO_ACCOUNT_TYPE              string `protobuf:"bytes,40,opt,name=NOSTRO_ACCOUNT_TYPE,proto3" json:"NOSTRO_ACCOUNT_TYPE,omitempty"`                           // "NOSTRO_ACCOUNT_TYPE": "GL",
	IA_FEE_ACCOUNT                   string `protobuf:"bytes,41,opt,name=IA_FEE_ACCOUNT,proto3" json:"IA_FEE_ACCOUNT,omitempty"`                                     // "IA_FEE_ACCOUNT": "030102000119998",
	DEST_BANK_DEBIT_AMOUNT           string `protobuf:"bytes,42,opt,name=DEST_BANK_DEBIT_AMOUNT,proto3" json:"DEST_BANK_DEBIT_AMOUNT,omitempty"`                     // "DEST_BANK_DEBIT_AMOUNT": "24000.00",
	RATE_GAP_DEBIT_AMOUNT            string `protobuf:"bytes,43,opt,name=RATE_GAP_DEBIT_AMOUNT,proto3" json:"RATE_GAP_DEBIT_AMOUNT,omitempty"`                       // "RATE_GAP_DEBIT_AMOUNT": "0.00",
	RATE_GAP_CREDIT_AMOUNT           string `protobuf:"bytes,44,opt,name=RATE_GAP_CREDIT_AMOUNT,proto3" json:"RATE_GAP_CREDIT_AMOUNT,omitempty"`                     // "RATE_GAP_CREDIT_AMOUNT": "0.00",
	CREDIT_CURRENCY_IA_DEST_BANK     string `protobuf:"bytes,45,opt,name=CREDIT_CURRENCY_IA_DEST_BANK,proto3" json:"CREDIT_CURRENCY_IA_DEST_BANK,omitempty"`         // "CREDIT_CURRENCY_IA_DEST_BANK": "USD",
	IA_FEE_DEBIT_AMOUNT              string `protobuf:"bytes,46,opt,name=IA_FEE_DEBIT_AMOUNT,proto3" json:"IA_FEE_DEBIT_AMOUNT,omitempty"`                           // "IA_FEE_DEBIT_AMOUNT": "0.00",
	GL_FEE_CREDIT_AMOUNT             string `protobuf:"bytes,47,opt,name=GL_FEE_CREDIT_AMOUNT,proto3" json:"GL_FEE_CREDIT_AMOUNT,omitempty"`                         // "GL_FEE_CREDIT_AMOUNT": "0.00",
	DEBIT_CURRENCY_RATE_GAP          string `protobuf:"bytes,48,opt,name=DEBIT_CURRENCY_RATE_GAP,proto3" json:"DEBIT_CURRENCY_RATE_GAP,omitempty"`                   // "DEBIT_CURRENCY_RATE_GAP": "USD",
	CREDIT_CURRENCY_RATE_GAP         string `protobuf:"bytes,49,opt,name=CREDIT_CURRENCY_RATE_GAP,proto3" json:"CREDIT_CURRENCY_RATE_GAP,omitempty"`                 // "CREDIT_CURRENCY_RATE_GAP": "IDR",
	URL_TRACKING                     string `protobuf:"bytes,50,opt,name=URL_TRACKING,proto3" json:"URL_TRACKING,omitempty"`                                         // "URL_TRACKING": "https://brifast.co.id/swift-tracker/"
	// ROUTE: COUNTERPART
	RECEIVE_AGENT_NAME     string `protobuf:"bytes,51,opt,name=RECEIVE_AGENT_NAME,proto3" json:"RECEIVE_AGENT_NAME,omitempty"`         // "RECEIVE_AGENT_NAME": "",
	CREDIT_ACCOUNT_NOSTRO  string `protobuf:"bytes,52,opt,name=CREDIT_ACCOUNT_NOSTRO,proto3" json:"CREDIT_ACCOUNT_NOSTRO,omitempty"`   // "CREDIT_ACCOUNT_NOSTRO": "020601000714304",
	CREDIT_AMOUNT_NOSTRO   string `protobuf:"bytes,53,opt,name=CREDIT_AMOUNT_NOSTRO,proto3" json:"CREDIT_AMOUNT_NOSTRO,omitempty"`     // "CREDIT_AMOUNT_NOSTRO": "15297602.58",
	CREDIT_NOSTRO_CURRENCY string `protobuf:"bytes,54,opt,name=CREDIT_NOSTRO_CURRENCY,proto3" json:"CREDIT_NOSTRO_CURRENCY,omitempty"` // "CREDIT_NOSTRO_CURRENCY": "IDR",
	FEE_AMOUNT             string `protobuf:"bytes,55,opt,name=FEE_AMOUNT,proto3" json:"FEE_AMOUNT,omitempty"`                         // "FEE_AMOUNT": "87444.00",
	CREDIT_ACCOUNT_GL_FEE  string `protobuf:"bytes,56,opt,name=CREDIT_ACCOUNT_GL_FEE,proto3" json:"CREDIT_ACCOUNT_GL_FEE,omitempty"`   // "CREDIT_ACCOUNT_GL_FEE": "4012307421",
	CREDIT_AMOUNT_GL_FEE   string `protobuf:"bytes,57,opt,name=CREDIT_AMOUNT_GL_FEE,proto3" json:"CREDIT_AMOUNT_GL_FEE,omitempty"`     // "CREDIT_AMOUNT_GL_FEE": "87444.00",
	CREDIT_GL_CURRENCY     string `protobuf:"bytes,58,opt,name=CREDIT_GL_CURRENCY,proto3" json:"CREDIT_GL_CURRENCY,omitempty"`         // "CREDIT_GL_CURRENCY": "IDR",
}

func (x *SwiftRoutePartnerData) Reset() {
	*x = SwiftRoutePartnerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwiftRoutePartnerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwiftRoutePartnerData) ProtoMessage() {}

func (x *SwiftRoutePartnerData) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwiftRoutePartnerData.ProtoReflect.Descriptor instead.
func (*SwiftRoutePartnerData) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{17}
}

func (x *SwiftRoutePartnerData) GetTICKET_NUMBER() string {
	if x != nil {
		return x.TICKET_NUMBER
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetROUTE() string {
	if x != nil {
		return x.ROUTE
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetTRANSACTION_TYPE() string {
	if x != nil {
		return x.TRANSACTION_TYPE
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetTRANSACTION_ID_TYPE() string {
	if x != nil {
		return x.TRANSACTION_ID_TYPE
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetNOSTRO_BIC() string {
	if x != nil {
		return x.NOSTRO_BIC
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetSEND_AMOUNT() string {
	if x != nil {
		return x.SEND_AMOUNT
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetSEND_AMOUNT_TOTAL() string {
	if x != nil {
		return x.SEND_AMOUNT_TOTAL
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetSEND_CURRENCY() string {
	if x != nil {
		return x.SEND_CURRENCY
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetCURRENCY_TRX() string {
	if x != nil {
		return x.CURRENCY_TRX
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetBASE_CURRENCY() string {
	if x != nil {
		return x.BASE_CURRENCY
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetCHARGES_CURRENCY() string {
	if x != nil {
		return x.CHARGES_CURRENCY
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetAMOUNT() string {
	if x != nil {
		return x.AMOUNT
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetAMOUNT_CONVERT() string {
	if x != nil {
		return x.AMOUNT_CONVERT
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetCHARGES() string {
	if x != nil {
		return x.CHARGES
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetCHARGES_OUR() string {
	if x != nil {
		return x.CHARGES_OUR
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetFX_SPREAD() string {
	if x != nil {
		return x.FX_SPREAD
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetESTIMATED_TIME() string {
	if x != nil {
		return x.ESTIMATED_TIME
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetBUY_RATE() string {
	if x != nil {
		return x.BUY_RATE
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetSELL_RATE() string {
	if x != nil {
		return x.SELL_RATE
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetSESSION_ID() string {
	if x != nil {
		return x.SESSION_ID
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetDEBIT_AMOUNT_MAIN() string {
	if x != nil {
		return x.DEBIT_AMOUNT_MAIN
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetDEBIT_AMOUNT_FEE_MAIN() string {
	if x != nil {
		return x.DEBIT_AMOUNT_FEE_MAIN
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetIA_FEE_OUR_ACCOUNT_MAIN() string {
	if x != nil {
		return x.IA_FEE_OUR_ACCOUNT_MAIN
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetIA_FEE_OUR_AMOUNT_MAIN() string {
	if x != nil {
		return x.IA_FEE_OUR_AMOUNT_MAIN
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetGL_ACCOUNT() string {
	if x != nil {
		return x.GL_ACCOUNT
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetGL_AMOUNT_MAIN() string {
	if x != nil {
		return x.GL_AMOUNT_MAIN
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetDEBIT_CURRENCY_MAIN() string {
	if x != nil {
		return x.DEBIT_CURRENCY_MAIN
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetCREDIT_CURRENCY_GL_MAIN() string {
	if x != nil {
		return x.CREDIT_CURRENCY_GL_MAIN
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetCREDIT_CURRENCY_IA_MAIN() string {
	if x != nil {
		return x.CREDIT_CURRENCY_IA_MAIN
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetFEE_DEBIT_AMOUNT() string {
	if x != nil {
		return x.FEE_DEBIT_AMOUNT
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetGL_FEE_ACCOUNT() string {
	if x != nil {
		return x.GL_FEE_ACCOUNT
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetCREDIT_CURRENCY_FEE() string {
	if x != nil {
		return x.CREDIT_CURRENCY_FEE
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetFEE_CREDIT_AMOUNT() string {
	if x != nil {
		return x.FEE_CREDIT_AMOUNT
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetNOSTRO_ACCOUNT() string {
	if x != nil {
		return x.NOSTRO_ACCOUNT
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetNOSTRO_AMOUNT() string {
	if x != nil {
		return x.NOSTRO_AMOUNT
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetIA_FEE_CREDIT_AMOUNT() string {
	if x != nil {
		return x.IA_FEE_CREDIT_AMOUNT
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetCREDIT_CURRENCY_NOSTRO_DEST_BANK() string {
	if x != nil {
		return x.CREDIT_CURRENCY_NOSTRO_DEST_BANK
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetNOSTRO_CURRENCY() string {
	if x != nil {
		return x.NOSTRO_CURRENCY
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetNOSTRO_ACCOUNT_TYPE() string {
	if x != nil {
		return x.NOSTRO_ACCOUNT_TYPE
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetIA_FEE_ACCOUNT() string {
	if x != nil {
		return x.IA_FEE_ACCOUNT
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetDEST_BANK_DEBIT_AMOUNT() string {
	if x != nil {
		return x.DEST_BANK_DEBIT_AMOUNT
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetRATE_GAP_DEBIT_AMOUNT() string {
	if x != nil {
		return x.RATE_GAP_DEBIT_AMOUNT
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetRATE_GAP_CREDIT_AMOUNT() string {
	if x != nil {
		return x.RATE_GAP_CREDIT_AMOUNT
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetCREDIT_CURRENCY_IA_DEST_BANK() string {
	if x != nil {
		return x.CREDIT_CURRENCY_IA_DEST_BANK
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetIA_FEE_DEBIT_AMOUNT() string {
	if x != nil {
		return x.IA_FEE_DEBIT_AMOUNT
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetGL_FEE_CREDIT_AMOUNT() string {
	if x != nil {
		return x.GL_FEE_CREDIT_AMOUNT
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetDEBIT_CURRENCY_RATE_GAP() string {
	if x != nil {
		return x.DEBIT_CURRENCY_RATE_GAP
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetCREDIT_CURRENCY_RATE_GAP() string {
	if x != nil {
		return x.CREDIT_CURRENCY_RATE_GAP
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetURL_TRACKING() string {
	if x != nil {
		return x.URL_TRACKING
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetRECEIVE_AGENT_NAME() string {
	if x != nil {
		return x.RECEIVE_AGENT_NAME
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetCREDIT_ACCOUNT_NOSTRO() string {
	if x != nil {
		return x.CREDIT_ACCOUNT_NOSTRO
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetCREDIT_AMOUNT_NOSTRO() string {
	if x != nil {
		return x.CREDIT_AMOUNT_NOSTRO
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetCREDIT_NOSTRO_CURRENCY() string {
	if x != nil {
		return x.CREDIT_NOSTRO_CURRENCY
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetFEE_AMOUNT() string {
	if x != nil {
		return x.FEE_AMOUNT
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetCREDIT_ACCOUNT_GL_FEE() string {
	if x != nil {
		return x.CREDIT_ACCOUNT_GL_FEE
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetCREDIT_AMOUNT_GL_FEE() string {
	if x != nil {
		return x.CREDIT_AMOUNT_GL_FEE
	}
	return ""
}

func (x *SwiftRoutePartnerData) GetCREDIT_GL_CURRENCY() string {
	if x != nil {
		return x.CREDIT_GL_CURRENCY
	}
	return ""
}

type EnumeratedValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankType               string `protobuf:"bytes,1,opt,name=bankType,proto3" json:"bankType,omitempty"`                             // "bankType": "",
	FieldMinBank           string `protobuf:"bytes,2,opt,name=fieldMinBank,proto3" json:"fieldMinBank,omitempty"`                     // "fieldMinBank": "0",
	FieldMaxBank           string `protobuf:"bytes,3,opt,name=fieldMaxBank,proto3" json:"fieldMaxBank,omitempty"`                     // "fieldMaxBank": "0",
	ValidationRegexBank    string `protobuf:"bytes,4,opt,name=validationRegexBank,proto3" json:"validationRegexBank,omitempty"`       // "validationRegexBank": "0",
	FieldMinAccount        string `protobuf:"bytes,5,opt,name=fieldMinAccount,proto3" json:"fieldMinAccount,omitempty"`               // "fieldMinAccount": "0",
	FieldMaxAccount        string `protobuf:"bytes,6,opt,name=fieldMaxAccount,proto3" json:"fieldMaxAccount,omitempty"`               // "fieldMaxAccount": "0",
	ValidationRegexAccount string `protobuf:"bytes,7,opt,name=validationRegexAccount,proto3" json:"validationRegexAccount,omitempty"` // "validationRegexAccount": "0",
	BankInfo               string `protobuf:"bytes,8,opt,name=bankInfo,proto3" json:"bankInfo,omitempty"`                             // "bankInfo": null
}

func (x *EnumeratedValue) Reset() {
	*x = EnumeratedValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumeratedValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumeratedValue) ProtoMessage() {}

func (x *EnumeratedValue) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumeratedValue.ProtoReflect.Descriptor instead.
func (*EnumeratedValue) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{18}
}

func (x *EnumeratedValue) GetBankType() string {
	if x != nil {
		return x.BankType
	}
	return ""
}

func (x *EnumeratedValue) GetFieldMinBank() string {
	if x != nil {
		return x.FieldMinBank
	}
	return ""
}

func (x *EnumeratedValue) GetFieldMaxBank() string {
	if x != nil {
		return x.FieldMaxBank
	}
	return ""
}

func (x *EnumeratedValue) GetValidationRegexBank() string {
	if x != nil {
		return x.ValidationRegexBank
	}
	return ""
}

func (x *EnumeratedValue) GetFieldMinAccount() string {
	if x != nil {
		return x.FieldMinAccount
	}
	return ""
}

func (x *EnumeratedValue) GetFieldMaxAccount() string {
	if x != nil {
		return x.FieldMaxAccount
	}
	return ""
}

func (x *EnumeratedValue) GetValidationRegexAccount() string {
	if x != nil {
		return x.ValidationRegexAccount
	}
	return ""
}

func (x *EnumeratedValue) GetBankInfo() string {
	if x != nil {
		return x.BankInfo
	}
	return ""
}

type SwiftRoutePartner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ERROR_CODE       string                   `protobuf:"bytes,1,opt,name=ERROR_CODE,proto3" json:"ERROR_CODE,omitempty"`             // "ERROR_CODE": "RMT-00",
	RESPONSE_CODE    string                   `protobuf:"bytes,2,opt,name=RESPONSE_CODE,proto3" json:"RESPONSE_CODE,omitempty"`       // "RESPONSE_CODE": "00",
	RESPONSE_MESSAGE string                   `protobuf:"bytes,3,opt,name=RESPONSE_MESSAGE,proto3" json:"RESPONSE_MESSAGE,omitempty"` // "RESPONSE_MESSAGE": "Success Get Routing",
	DATA             []*SwiftRoutePartnerData `protobuf:"bytes,4,rep,name=DATA,proto3" json:"DATA,omitempty"`
	REASON           string                   `protobuf:"bytes,5,opt,name=REASON,proto3" json:"REASON,omitempty"` // "REASON": "",
}

func (x *SwiftRoutePartner) Reset() {
	*x = SwiftRoutePartner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwiftRoutePartner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwiftRoutePartner) ProtoMessage() {}

func (x *SwiftRoutePartner) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwiftRoutePartner.ProtoReflect.Descriptor instead.
func (*SwiftRoutePartner) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{19}
}

func (x *SwiftRoutePartner) GetERROR_CODE() string {
	if x != nil {
		return x.ERROR_CODE
	}
	return ""
}

func (x *SwiftRoutePartner) GetRESPONSE_CODE() string {
	if x != nil {
		return x.RESPONSE_CODE
	}
	return ""
}

func (x *SwiftRoutePartner) GetRESPONSE_MESSAGE() string {
	if x != nil {
		return x.RESPONSE_MESSAGE
	}
	return ""
}

func (x *SwiftRoutePartner) GetDATA() []*SwiftRoutePartnerData {
	if x != nil {
		return x.DATA
	}
	return nil
}

func (x *SwiftRoutePartner) GetREASON() string {
	if x != nil {
		return x.REASON
	}
	return ""
}

type SwiftRoutePartnerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool               `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32             `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string             `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *SwiftRoutePartner `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SwiftRoutePartnerResponse) Reset() {
	*x = SwiftRoutePartnerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwiftRoutePartnerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwiftRoutePartnerResponse) ProtoMessage() {}

func (x *SwiftRoutePartnerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwiftRoutePartnerResponse.ProtoReflect.Descriptor instead.
func (*SwiftRoutePartnerResponse) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{20}
}

func (x *SwiftRoutePartnerResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *SwiftRoutePartnerResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SwiftRoutePartnerResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SwiftRoutePartnerResponse) GetData() *SwiftRoutePartner {
	if x != nil {
		return x.Data
	}
	return nil
}

type SwiftStatusTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	REFERENCE_NUMBER string `protobuf:"bytes,1,opt,name=REFERENCE_NUMBER,proto3" json:"REFERENCE_NUMBER,omitempty"` // "REFERENCE_NUMBER": "020618011877691"
}

func (x *SwiftStatusTransactionRequest) Reset() {
	*x = SwiftStatusTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwiftStatusTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwiftStatusTransactionRequest) ProtoMessage() {}

func (x *SwiftStatusTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwiftStatusTransactionRequest.ProtoReflect.Descriptor instead.
func (*SwiftStatusTransactionRequest) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{21}
}

func (x *SwiftStatusTransactionRequest) GetREFERENCE_NUMBER() string {
	if x != nil {
		return x.REFERENCE_NUMBER
	}
	return ""
}

type SwiftStatusTransactionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	STATUS_CODE_COUNTERPART string `protobuf:"bytes,1,opt,name=STATUS_CODE_COUNTERPART,proto3" json:"STATUS_CODE_COUNTERPART,omitempty"` // "STATUS_CODE_COUNTERPART": "",
	STATUS_DESC_COUNTERPART string `protobuf:"bytes,2,opt,name=STATUS_DESC_COUNTERPART,proto3" json:"STATUS_DESC_COUNTERPART,omitempty"` // "STATUS_DESC_COUNTERPART": "",
	RECEIVE_AMOUNT          string `protobuf:"bytes,3,opt,name=RECEIVE_AMOUNT,proto3" json:"RECEIVE_AMOUNT,omitempty"`                   // "RECEIVE_AMOUNT": "9500000",
	TRANSACTION_RATE        string `protobuf:"bytes,4,opt,name=TRANSACTION_RATE,proto3" json:"TRANSACTION_RATE,omitempty"`               // "TRANSACTION_RATE": "15282"
}

func (x *SwiftStatusTransactionData) Reset() {
	*x = SwiftStatusTransactionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwiftStatusTransactionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwiftStatusTransactionData) ProtoMessage() {}

func (x *SwiftStatusTransactionData) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwiftStatusTransactionData.ProtoReflect.Descriptor instead.
func (*SwiftStatusTransactionData) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{22}
}

func (x *SwiftStatusTransactionData) GetSTATUS_CODE_COUNTERPART() string {
	if x != nil {
		return x.STATUS_CODE_COUNTERPART
	}
	return ""
}

func (x *SwiftStatusTransactionData) GetSTATUS_DESC_COUNTERPART() string {
	if x != nil {
		return x.STATUS_DESC_COUNTERPART
	}
	return ""
}

func (x *SwiftStatusTransactionData) GetRECEIVE_AMOUNT() string {
	if x != nil {
		return x.RECEIVE_AMOUNT
	}
	return ""
}

func (x *SwiftStatusTransactionData) GetTRANSACTION_RATE() string {
	if x != nil {
		return x.TRANSACTION_RATE
	}
	return ""
}

type SwiftStatusTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ERROR_CODE       string                      `protobuf:"bytes,1,opt,name=ERROR_CODE,proto3" json:"ERROR_CODE,omitempty"`             // "ERROR_CODE": "RMT-01",
	RESPONSE_CODE    string                      `protobuf:"bytes,2,opt,name=RESPONSE_CODE,proto3" json:"RESPONSE_CODE,omitempty"`       // "RESPONSE_CODE": "01",
	RESPONSE_MESSAGE string                      `protobuf:"bytes,3,opt,name=RESPONSE_MESSAGE,proto3" json:"RESPONSE_MESSAGE,omitempty"` // "RESPONSE_MESSAGE": "Transaction On Progress"
	REASON           string                      `protobuf:"bytes,4,opt,name=REASON,proto3" json:"REASON,omitempty"`                     // "REASON": "Transaction Pending"
	UETR             string                      `protobuf:"bytes,5,opt,name=UETR,proto3" json:"UETR,omitempty"`                         // "UETR": "1c10b057-7723-4229-a980-c957a4ff0b08",
	DATA             *SwiftStatusTransactionData `protobuf:"bytes,6,opt,name=DATA,proto3" json:"DATA,omitempty"`
}

func (x *SwiftStatusTransaction) Reset() {
	*x = SwiftStatusTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwiftStatusTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwiftStatusTransaction) ProtoMessage() {}

func (x *SwiftStatusTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwiftStatusTransaction.ProtoReflect.Descriptor instead.
func (*SwiftStatusTransaction) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{23}
}

func (x *SwiftStatusTransaction) GetERROR_CODE() string {
	if x != nil {
		return x.ERROR_CODE
	}
	return ""
}

func (x *SwiftStatusTransaction) GetRESPONSE_CODE() string {
	if x != nil {
		return x.RESPONSE_CODE
	}
	return ""
}

func (x *SwiftStatusTransaction) GetRESPONSE_MESSAGE() string {
	if x != nil {
		return x.RESPONSE_MESSAGE
	}
	return ""
}

func (x *SwiftStatusTransaction) GetREASON() string {
	if x != nil {
		return x.REASON
	}
	return ""
}

func (x *SwiftStatusTransaction) GetUETR() string {
	if x != nil {
		return x.UETR
	}
	return ""
}

func (x *SwiftStatusTransaction) GetDATA() *SwiftStatusTransactionData {
	if x != nil {
		return x.DATA
	}
	return nil
}

type SwiftStatusTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool                    `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string                  `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *SwiftStatusTransaction `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SwiftStatusTransactionResponse) Reset() {
	*x = SwiftStatusTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwiftStatusTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwiftStatusTransactionResponse) ProtoMessage() {}

func (x *SwiftStatusTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwiftStatusTransactionResponse.ProtoReflect.Descriptor instead.
func (*SwiftStatusTransactionResponse) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{24}
}

func (x *SwiftStatusTransactionResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *SwiftStatusTransactionResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SwiftStatusTransactionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SwiftStatusTransactionResponse) GetData() *SwiftStatusTransaction {
	if x != nil {
		return x.Data
	}
	return nil
}

type TaskCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID               uint64                 `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	IsDraft              bool                   `protobuf:"varint,2,opt,name=isDraft,proto3" json:"isDraft,omitempty"`
	BeneficiaryEmails    []string               `protobuf:"bytes,3,rep,name=beneficiaryEmails,proto3" json:"beneficiaryEmails,omitempty"`
	Data                 *RemittanceTransaction `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	SelectedRoutePartner *SwiftRoutePartnerData `protobuf:"bytes,5,opt,name=selectedRoutePartner,proto3" json:"selectedRoutePartner,omitempty"`
	AccountID            uint64                 `protobuf:"varint,6,opt,name=accountID,proto3" json:"accountID,omitempty"`
	PassCode             string                 `protobuf:"bytes,8,opt,name=passCode,proto3" json:"passCode,omitempty"`
}

func (x *TaskCreateRequest) Reset() {
	*x = TaskCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCreateRequest) ProtoMessage() {}

func (x *TaskCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCreateRequest.ProtoReflect.Descriptor instead.
func (*TaskCreateRequest) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{25}
}

func (x *TaskCreateRequest) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *TaskCreateRequest) GetIsDraft() bool {
	if x != nil {
		return x.IsDraft
	}
	return false
}

func (x *TaskCreateRequest) GetBeneficiaryEmails() []string {
	if x != nil {
		return x.BeneficiaryEmails
	}
	return nil
}

func (x *TaskCreateRequest) GetData() *RemittanceTransaction {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TaskCreateRequest) GetSelectedRoutePartner() *SwiftRoutePartnerData {
	if x != nil {
		return x.SelectedRoutePartner
	}
	return nil
}

func (x *TaskCreateRequest) GetAccountID() uint64 {
	if x != nil {
		return x.AccountID
	}
	return 0
}

func (x *TaskCreateRequest) GetPassCode() string {
	if x != nil {
		return x.PassCode
	}
	return ""
}

type TaskDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoutePartnerReq     *SwiftRoutePartnerRequest `protobuf:"bytes,1,opt,name=route_partner_req,json=routePartnerReq,proto3" json:"route_partner_req,omitempty"`
	RoutePartnerData    *SwiftRoutePartnerData    `protobuf:"bytes,2,opt,name=route_partner_data,json=routePartnerData,proto3" json:"route_partner_data,omitempty"`
	SwiftRemittanceReq  *SwiftRemittanceRequest   `protobuf:"bytes,3,opt,name=swift_remittance_req,json=swiftRemittanceReq,proto3" json:"swift_remittance_req,omitempty"`
	SwiftRemittanceData *SwiftRemittance          `protobuf:"bytes,4,opt,name=swift_remittance_data,json=swiftRemittanceData,proto3" json:"swift_remittance_data,omitempty"`
}

func (x *TaskDetail) Reset() {
	*x = TaskDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDetail) ProtoMessage() {}

func (x *TaskDetail) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDetail.ProtoReflect.Descriptor instead.
func (*TaskDetail) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{26}
}

func (x *TaskDetail) GetRoutePartnerReq() *SwiftRoutePartnerRequest {
	if x != nil {
		return x.RoutePartnerReq
	}
	return nil
}

func (x *TaskDetail) GetRoutePartnerData() *SwiftRoutePartnerData {
	if x != nil {
		return x.RoutePartnerData
	}
	return nil
}

func (x *TaskDetail) GetSwiftRemittanceReq() *SwiftRemittanceRequest {
	if x != nil {
		return x.SwiftRemittanceReq
	}
	return nil
}

func (x *TaskDetail) GetSwiftRemittanceData() *SwiftRemittance {
	if x != nil {
		return x.SwiftRemittanceData
	}
	return nil
}

type TaskData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction *RemittanceTransaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Task        *Task                  `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
	Detail      *TaskDetail            `protobuf:"bytes,3,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *TaskData) Reset() {
	*x = TaskData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskData) ProtoMessage() {}

func (x *TaskData) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskData.ProtoReflect.Descriptor instead.
func (*TaskData) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{27}
}

func (x *TaskData) GetTransaction() *RemittanceTransaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *TaskData) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *TaskData) GetDetail() *TaskDetail {
	if x != nil {
		return x.Detail
	}
	return nil
}

type TaskCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool      `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32    `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string    `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *TaskData `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TaskCreateResponse) Reset() {
	*x = TaskCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCreateResponse) ProtoMessage() {}

func (x *TaskCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCreateResponse.ProtoReflect.Descriptor instead.
func (*TaskCreateResponse) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{28}
}

func (x *TaskCreateResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *TaskCreateResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TaskCreateResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TaskCreateResponse) GetData() *TaskData {
	if x != nil {
		return x.Data
	}
	return nil
}

type TaskActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID   uint64 `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Action   string `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	Comment  string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	Reasons  string `protobuf:"bytes,4,opt,name=reasons,proto3" json:"reasons,omitempty"`
	PassCode string `protobuf:"bytes,6,opt,name=passCode,proto3" json:"passCode,omitempty"`
}

func (x *TaskActionRequest) Reset() {
	*x = TaskActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskActionRequest) ProtoMessage() {}

func (x *TaskActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskActionRequest.ProtoReflect.Descriptor instead.
func (*TaskActionRequest) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{29}
}

func (x *TaskActionRequest) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *TaskActionRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *TaskActionRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *TaskActionRequest) GetReasons() string {
	if x != nil {
		return x.Reasons
	}
	return ""
}

func (x *TaskActionRequest) GetPassCode() string {
	if x != nil {
		return x.PassCode
	}
	return ""
}

type TaskActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool      `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32    `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string    `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *TaskData `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TaskActionResponse) Reset() {
	*x = TaskActionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskActionResponse) ProtoMessage() {}

func (x *TaskActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskActionResponse.ProtoReflect.Descriptor instead.
func (*TaskActionResponse) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{30}
}

func (x *TaskActionResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *TaskActionResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TaskActionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TaskActionResponse) GetData() *TaskData {
	if x != nil {
		return x.Data
	}
	return nil
}

type TaskListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     TaskStatus                      `protobuf:"varint,1,opt,name=status,proto3,enum=swift.service.v1.TaskStatus" json:"status,omitempty"`
	Step       TaskStep                        `protobuf:"varint,2,opt,name=step,proto3,enum=swift.service.v1.TaskStep" json:"step,omitempty"`
	Limit      int32                           `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Page       int32                           `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Sort       string                          `protobuf:"bytes,5,opt,name=sort,proto3" json:"sort,omitempty"`
	Dir        SortDirection                   `protobuf:"varint,6,opt,name=dir,proto3,enum=swift.service.v1.SortDirection" json:"dir,omitempty"`
	Filter     *TaskListRequest_TaskListFilter `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty"`
	Search     string                          `protobuf:"bytes,8,opt,name=search,proto3" json:"search,omitempty"`
	MyTaskOnly bool                            `protobuf:"varint,9,opt,name=myTaskOnly,proto3" json:"myTaskOnly,omitempty"`
}

func (x *TaskListRequest) Reset() {
	*x = TaskListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskListRequest) ProtoMessage() {}

func (x *TaskListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskListRequest.ProtoReflect.Descriptor instead.
func (*TaskListRequest) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{31}
}

func (x *TaskListRequest) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_AllStatus
}

func (x *TaskListRequest) GetStep() TaskStep {
	if x != nil {
		return x.Step
	}
	return TaskStep_AllStep
}

func (x *TaskListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TaskListRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *TaskListRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *TaskListRequest) GetDir() SortDirection {
	if x != nil {
		return x.Dir
	}
	return SortDirection_DESC
}

func (x *TaskListRequest) GetFilter() *TaskListRequest_TaskListFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *TaskListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *TaskListRequest) GetMyTaskOnly() bool {
	if x != nil {
		return x.MyTaskOnly
	}
	return false
}

type FileTaskListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     TaskStatus                      `protobuf:"varint,1,opt,name=status,proto3,enum=swift.service.v1.TaskStatus" json:"status,omitempty"`
	Step       TaskStep                        `protobuf:"varint,2,opt,name=step,proto3,enum=swift.service.v1.TaskStep" json:"step,omitempty"`
	Limit      int32                           `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Page       int32                           `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Sort       string                          `protobuf:"bytes,5,opt,name=sort,proto3" json:"sort,omitempty"`
	Dir        SortDirection                   `protobuf:"varint,6,opt,name=dir,proto3,enum=swift.service.v1.SortDirection" json:"dir,omitempty"`
	Filter     *TaskListRequest_TaskListFilter `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty"`
	Search     string                          `protobuf:"bytes,8,opt,name=search,proto3" json:"search,omitempty"`
	MyTaskOnly bool                            `protobuf:"varint,9,opt,name=myTaskOnly,proto3" json:"myTaskOnly,omitempty"`
	FileFormat FileTaskListRequest_Formats     `protobuf:"varint,25,opt,name=fileFormat,proto3,enum=swift.service.v1.FileTaskListRequest_Formats" json:"fileFormat,omitempty"`
}

func (x *FileTaskListRequest) Reset() {
	*x = FileTaskListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileTaskListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileTaskListRequest) ProtoMessage() {}

func (x *FileTaskListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileTaskListRequest.ProtoReflect.Descriptor instead.
func (*FileTaskListRequest) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{32}
}

func (x *FileTaskListRequest) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_AllStatus
}

func (x *FileTaskListRequest) GetStep() TaskStep {
	if x != nil {
		return x.Step
	}
	return TaskStep_AllStep
}

func (x *FileTaskListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *FileTaskListRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FileTaskListRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *FileTaskListRequest) GetDir() SortDirection {
	if x != nil {
		return x.Dir
	}
	return SortDirection_DESC
}

func (x *FileTaskListRequest) GetFilter() *TaskListRequest_TaskListFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *FileTaskListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *FileTaskListRequest) GetMyTaskOnly() bool {
	if x != nil {
		return x.MyTaskOnly
	}
	return false
}

func (x *FileTaskListRequest) GetFileFormat() FileTaskListRequest_Formats {
	if x != nil {
		return x.FileFormat
	}
	return FileTaskListRequest_null
}

type TaskListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      bool                `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code       uint32              `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message    string              `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data       []*TaskData         `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	Pagination *PaginationResponse `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *TaskListResponse) Reset() {
	*x = TaskListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskListResponse) ProtoMessage() {}

func (x *TaskListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskListResponse.ProtoReflect.Descriptor instead.
func (*TaskListResponse) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{33}
}

func (x *TaskListResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *TaskListResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TaskListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TaskListResponse) GetData() []*TaskData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TaskListResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type TaskDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID uint64 `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
}

func (x *TaskDetailRequest) Reset() {
	*x = TaskDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDetailRequest) ProtoMessage() {}

func (x *TaskDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDetailRequest.ProtoReflect.Descriptor instead.
func (*TaskDetailRequest) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{34}
}

func (x *TaskDetailRequest) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

type TaskDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool      `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32    `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string    `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *TaskData `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TaskDetailResponse) Reset() {
	*x = TaskDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDetailResponse) ProtoMessage() {}

func (x *TaskDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDetailResponse.ProtoReflect.Descriptor instead.
func (*TaskDetailResponse) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{35}
}

func (x *TaskDetailResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *TaskDetailResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TaskDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TaskDetailResponse) GetData() *TaskData {
	if x != nil {
		return x.Data
	}
	return nil
}

type DataListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  int32                           `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Page   int32                           `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Sort   string                          `protobuf:"bytes,3,opt,name=sort,proto3" json:"sort,omitempty"`
	Dir    SortDirection                   `protobuf:"varint,4,opt,name=dir,proto3,enum=swift.service.v1.SortDirection" json:"dir,omitempty"`
	Filter *DataListRequest_DataListFilter `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
	Search string                          `protobuf:"bytes,6,opt,name=search,proto3" json:"search,omitempty"`
}

func (x *DataListRequest) Reset() {
	*x = DataListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataListRequest) ProtoMessage() {}

func (x *DataListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataListRequest.ProtoReflect.Descriptor instead.
func (*DataListRequest) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{36}
}

func (x *DataListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *DataListRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DataListRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *DataListRequest) GetDir() SortDirection {
	if x != nil {
		return x.Dir
	}
	return SortDirection_DESC
}

func (x *DataListRequest) GetFilter() *DataListRequest_DataListFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *DataListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

type DataListDownloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      int32                           `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Page       int32                           `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Sort       string                          `protobuf:"bytes,3,opt,name=sort,proto3" json:"sort,omitempty"`
	Dir        SortDirection                   `protobuf:"varint,4,opt,name=dir,proto3,enum=swift.service.v1.SortDirection" json:"dir,omitempty"`
	Filter     *DataListRequest_DataListFilter `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
	Search     string                          `protobuf:"bytes,6,opt,name=search,proto3" json:"search,omitempty"`
	FileFormat FileTaskListRequest_Formats     `protobuf:"varint,25,opt,name=fileFormat,proto3,enum=swift.service.v1.FileTaskListRequest_Formats" json:"fileFormat,omitempty"`
}

func (x *DataListDownloadRequest) Reset() {
	*x = DataListDownloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataListDownloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataListDownloadRequest) ProtoMessage() {}

func (x *DataListDownloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataListDownloadRequest.ProtoReflect.Descriptor instead.
func (*DataListDownloadRequest) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{37}
}

func (x *DataListDownloadRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *DataListDownloadRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DataListDownloadRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *DataListDownloadRequest) GetDir() SortDirection {
	if x != nil {
		return x.Dir
	}
	return SortDirection_DESC
}

func (x *DataListDownloadRequest) GetFilter() *DataListRequest_DataListFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *DataListDownloadRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *DataListDownloadRequest) GetFileFormat() FileTaskListRequest_Formats {
	if x != nil {
		return x.FileFormat
	}
	return FileTaskListRequest_null
}

type DataListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      bool                     `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code       uint32                   `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message    string                   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data       []*RemittanceTransaction `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	Pagination *PaginationResponse      `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *DataListResponse) Reset() {
	*x = DataListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataListResponse) ProtoMessage() {}

func (x *DataListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataListResponse.ProtoReflect.Descriptor instead.
func (*DataListResponse) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{38}
}

func (x *DataListResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *DataListResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DataListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DataListResponse) GetData() []*RemittanceTransaction {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DataListResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type DataDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataID uint64 `protobuf:"varint,1,opt,name=dataID,proto3" json:"dataID,omitempty"`
}

func (x *DataDetailRequest) Reset() {
	*x = DataDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataDetailRequest) ProtoMessage() {}

func (x *DataDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataDetailRequest.ProtoReflect.Descriptor instead.
func (*DataDetailRequest) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{39}
}

func (x *DataDetailRequest) GetDataID() uint64 {
	if x != nil {
		return x.DataID
	}
	return 0
}

type DataDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool                   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32                 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *RemittanceTransaction `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DataDetailResponse) Reset() {
	*x = DataDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataDetailResponse) ProtoMessage() {}

func (x *DataDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataDetailResponse.ProtoReflect.Descriptor instead.
func (*DataDetailResponse) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{40}
}

func (x *DataDetailResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *DataDetailResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DataDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DataDetailResponse) GetData() *RemittanceTransaction {
	if x != nil {
		return x.Data
	}
	return nil
}

type SaveDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *RemittanceTransaction `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SaveDataRequest) Reset() {
	*x = SaveDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveDataRequest) ProtoMessage() {}

func (x *SaveDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveDataRequest.ProtoReflect.Descriptor instead.
func (*SaveDataRequest) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{41}
}

func (x *SaveDataRequest) GetData() *RemittanceTransaction {
	if x != nil {
		return x.Data
	}
	return nil
}

type SaveDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool                   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32                 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *RemittanceTransaction `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SaveDataResponse) Reset() {
	*x = SaveDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveDataResponse) ProtoMessage() {}

func (x *SaveDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveDataResponse.ProtoReflect.Descriptor instead.
func (*SaveDataResponse) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{42}
}

func (x *SaveDataResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *SaveDataResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SaveDataResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SaveDataResponse) GetData() *RemittanceTransaction {
	if x != nil {
		return x.Data
	}
	return nil
}

type BRIGateHardTokenValidationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName string `protobuf:"bytes,1,opt,name=userName,proto3" json:"userName,omitempty"`
	PassCode string `protobuf:"bytes,2,opt,name=passCode,proto3" json:"passCode,omitempty"`
}

func (x *BRIGateHardTokenValidationRequest) Reset() {
	*x = BRIGateHardTokenValidationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRIGateHardTokenValidationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRIGateHardTokenValidationRequest) ProtoMessage() {}

func (x *BRIGateHardTokenValidationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRIGateHardTokenValidationRequest.ProtoReflect.Descriptor instead.
func (*BRIGateHardTokenValidationRequest) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{43}
}

func (x *BRIGateHardTokenValidationRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *BRIGateHardTokenValidationRequest) GetPassCode() string {
	if x != nil {
		return x.PassCode
	}
	return ""
}

type BRIGateHardTokenValidation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseCode    string `protobuf:"bytes,1,opt,name=responseCode,proto3" json:"responseCode,omitempty"`
	ResponseMessage string `protobuf:"bytes,2,opt,name=responseMessage,proto3" json:"responseMessage,omitempty"`
}

func (x *BRIGateHardTokenValidation) Reset() {
	*x = BRIGateHardTokenValidation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRIGateHardTokenValidation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRIGateHardTokenValidation) ProtoMessage() {}

func (x *BRIGateHardTokenValidation) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRIGateHardTokenValidation.ProtoReflect.Descriptor instead.
func (*BRIGateHardTokenValidation) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{44}
}

func (x *BRIGateHardTokenValidation) GetResponseCode() string {
	if x != nil {
		return x.ResponseCode
	}
	return ""
}

func (x *BRIGateHardTokenValidation) GetResponseMessage() string {
	if x != nil {
		return x.ResponseMessage
	}
	return ""
}

type BRIGateHardTokenValidationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool                        `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32                      `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string                      `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *BRIGateHardTokenValidation `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *BRIGateHardTokenValidationResponse) Reset() {
	*x = BRIGateHardTokenValidationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRIGateHardTokenValidationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRIGateHardTokenValidationResponse) ProtoMessage() {}

func (x *BRIGateHardTokenValidationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRIGateHardTokenValidationResponse.ProtoReflect.Descriptor instead.
func (*BRIGateHardTokenValidationResponse) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{45}
}

func (x *BRIGateHardTokenValidationResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *BRIGateHardTokenValidationResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BRIGateHardTokenValidationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BRIGateHardTokenValidationResponse) GetData() *BRIGateHardTokenValidation {
	if x != nil {
		return x.Data
	}
	return nil
}

type NostroPriorityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NostroPriorityRequest) Reset() {
	*x = NostroPriorityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NostroPriorityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NostroPriorityRequest) ProtoMessage() {}

func (x *NostroPriorityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NostroPriorityRequest.ProtoReflect.Descriptor instead.
func (*NostroPriorityRequest) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{46}
}

type NostroPriorityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool     `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32   `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    []string `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *NostroPriorityResponse) Reset() {
	*x = NostroPriorityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NostroPriorityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NostroPriorityResponse) ProtoMessage() {}

func (x *NostroPriorityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NostroPriorityResponse.ProtoReflect.Descriptor instead.
func (*NostroPriorityResponse) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{47}
}

func (x *NostroPriorityResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *NostroPriorityResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *NostroPriorityResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NostroPriorityResponse) GetData() []string {
	if x != nil {
		return x.Data
	}
	return nil
}

type TransactionsCheckerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// bool singelData = 1;
	TotalFound     int64 `protobuf:"varint,2,opt,name=totalFound,proto3" json:"totalFound,omitempty"`
	TotalProcessed int64 `protobuf:"varint,3,opt,name=totalProcessed,proto3" json:"totalProcessed,omitempty"`
	TotalError     int64 `protobuf:"varint,4,opt,name=totalError,proto3" json:"totalError,omitempty"`
}

func (x *TransactionsCheckerResponse) Reset() {
	*x = TransactionsCheckerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionsCheckerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionsCheckerResponse) ProtoMessage() {}

func (x *TransactionsCheckerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionsCheckerResponse.ProtoReflect.Descriptor instead.
func (*TransactionsCheckerResponse) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{48}
}

func (x *TransactionsCheckerResponse) GetTotalFound() int64 {
	if x != nil {
		return x.TotalFound
	}
	return 0
}

func (x *TransactionsCheckerResponse) GetTotalProcessed() int64 {
	if x != nil {
		return x.TotalProcessed
	}
	return 0
}

func (x *TransactionsCheckerResponse) GetTotalError() int64 {
	if x != nil {
		return x.TotalError
	}
	return 0
}

type TransactionsCheckerSingelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID uint64 `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
}

func (x *TransactionsCheckerSingelRequest) Reset() {
	*x = TransactionsCheckerSingelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionsCheckerSingelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionsCheckerSingelRequest) ProtoMessage() {}

func (x *TransactionsCheckerSingelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionsCheckerSingelRequest.ProtoReflect.Descriptor instead.
func (*TransactionsCheckerSingelRequest) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{49}
}

func (x *TransactionsCheckerSingelRequest) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

type TransactionsCheckerSingelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool                         `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32                       `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string                       `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *TransactionsCheckerResponse `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TransactionsCheckerSingelResponse) Reset() {
	*x = TransactionsCheckerSingelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionsCheckerSingelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionsCheckerSingelResponse) ProtoMessage() {}

func (x *TransactionsCheckerSingelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionsCheckerSingelResponse.ProtoReflect.Descriptor instead.
func (*TransactionsCheckerSingelResponse) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{50}
}

func (x *TransactionsCheckerSingelResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *TransactionsCheckerSingelResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TransactionsCheckerSingelResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TransactionsCheckerSingelResponse) GetData() *TransactionsCheckerResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

type TransactionsCheckerBulkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskIDs []uint64 `protobuf:"varint,1,rep,packed,name=taskIDs,proto3" json:"taskIDs,omitempty"`
}

func (x *TransactionsCheckerBulkRequest) Reset() {
	*x = TransactionsCheckerBulkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionsCheckerBulkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionsCheckerBulkRequest) ProtoMessage() {}

func (x *TransactionsCheckerBulkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionsCheckerBulkRequest.ProtoReflect.Descriptor instead.
func (*TransactionsCheckerBulkRequest) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{51}
}

func (x *TransactionsCheckerBulkRequest) GetTaskIDs() []uint64 {
	if x != nil {
		return x.TaskIDs
	}
	return nil
}

type TransactionsCheckerBulkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      bool                         `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code       uint32                       `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message    string                       `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Additional *TransactionsCheckerResponse `protobuf:"bytes,4,opt,name=additional,proto3" json:"additional,omitempty"`
	Data       []*RemittanceTransaction     `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *TransactionsCheckerBulkResponse) Reset() {
	*x = TransactionsCheckerBulkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionsCheckerBulkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionsCheckerBulkResponse) ProtoMessage() {}

func (x *TransactionsCheckerBulkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionsCheckerBulkResponse.ProtoReflect.Descriptor instead.
func (*TransactionsCheckerBulkResponse) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{52}
}

func (x *TransactionsCheckerBulkResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *TransactionsCheckerBulkResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TransactionsCheckerBulkResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TransactionsCheckerBulkResponse) GetAdditional() *TransactionsCheckerResponse {
	if x != nil {
		return x.Additional
	}
	return nil
}

func (x *TransactionsCheckerBulkResponse) GetData() []*RemittanceTransaction {
	if x != nil {
		return x.Data
	}
	return nil
}

type DelayedHandlerRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalFound     int64 `protobuf:"varint,2,opt,name=totalFound,proto3" json:"totalFound,omitempty"`
	TotalProcessed int64 `protobuf:"varint,3,opt,name=totalProcessed,proto3" json:"totalProcessed,omitempty"`
	TotalError     int64 `protobuf:"varint,4,opt,name=totalError,proto3" json:"totalError,omitempty"`
}

func (x *DelayedHandlerRes) Reset() {
	*x = DelayedHandlerRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelayedHandlerRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelayedHandlerRes) ProtoMessage() {}

func (x *DelayedHandlerRes) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelayedHandlerRes.ProtoReflect.Descriptor instead.
func (*DelayedHandlerRes) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{53}
}

func (x *DelayedHandlerRes) GetTotalFound() int64 {
	if x != nil {
		return x.TotalFound
	}
	return 0
}

func (x *DelayedHandlerRes) GetTotalProcessed() int64 {
	if x != nil {
		return x.TotalProcessed
	}
	return 0
}

func (x *DelayedHandlerRes) GetTotalError() int64 {
	if x != nil {
		return x.TotalError
	}
	return 0
}

type ExecTransactionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ExecTransactionReq) Reset() {
	*x = ExecTransactionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecTransactionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecTransactionReq) ProtoMessage() {}

func (x *ExecTransactionReq) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecTransactionReq.ProtoReflect.Descriptor instead.
func (*ExecTransactionReq) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{54}
}

func (x *ExecTransactionReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ExecTransactionRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JurnalSeq      []string `protobuf:"bytes,1,rep,name=jurnal_seq,json=jurnalSeq,proto3" json:"jurnal_seq,omitempty"`
	Status         string   `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	ResponseDetail string   `protobuf:"bytes,3,opt,name=response_detail,json=responseDetail,proto3" json:"response_detail,omitempty"`
	IsRetry        bool     `protobuf:"varint,4,opt,name=is_retry,json=isRetry,proto3" json:"is_retry,omitempty"`
	DebitAmount    string   `protobuf:"bytes,5,opt,name=debit_amount,json=debitAmount,proto3" json:"debit_amount,omitempty"`
	CreditAmount   string   `protobuf:"bytes,6,opt,name=credit_amount,json=creditAmount,proto3" json:"credit_amount,omitempty"`
	DebitAccount   string   `protobuf:"bytes,7,opt,name=debit_account,json=debitAccount,proto3" json:"debit_account,omitempty"`
	CreditAccount  string   `protobuf:"bytes,8,opt,name=credit_account,json=creditAccount,proto3" json:"credit_account,omitempty"`
	TransactionId  uint64   `protobuf:"varint,9,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *ExecTransactionRes) Reset() {
	*x = ExecTransactionRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecTransactionRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecTransactionRes) ProtoMessage() {}

func (x *ExecTransactionRes) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecTransactionRes.ProtoReflect.Descriptor instead.
func (*ExecTransactionRes) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{55}
}

func (x *ExecTransactionRes) GetJurnalSeq() []string {
	if x != nil {
		return x.JurnalSeq
	}
	return nil
}

func (x *ExecTransactionRes) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ExecTransactionRes) GetResponseDetail() string {
	if x != nil {
		return x.ResponseDetail
	}
	return ""
}

func (x *ExecTransactionRes) GetIsRetry() bool {
	if x != nil {
		return x.IsRetry
	}
	return false
}

func (x *ExecTransactionRes) GetDebitAmount() string {
	if x != nil {
		return x.DebitAmount
	}
	return ""
}

func (x *ExecTransactionRes) GetCreditAmount() string {
	if x != nil {
		return x.CreditAmount
	}
	return ""
}

func (x *ExecTransactionRes) GetDebitAccount() string {
	if x != nil {
		return x.DebitAccount
	}
	return ""
}

func (x *ExecTransactionRes) GetCreditAccount() string {
	if x != nil {
		return x.CreditAccount
	}
	return ""
}

func (x *ExecTransactionRes) GetTransactionId() uint64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

type ApprovalCacheReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount        string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	AccountNumber string `protobuf:"bytes,2,opt,name=accountNumber,proto3" json:"accountNumber,omitempty"`
	DebitAccount  string `protobuf:"bytes,3,opt,name=debitAccount,proto3" json:"debitAccount,omitempty"`
}

func (x *ApprovalCacheReq) Reset() {
	*x = ApprovalCacheReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalCacheReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalCacheReq) ProtoMessage() {}

func (x *ApprovalCacheReq) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalCacheReq.ProtoReflect.Descriptor instead.
func (*ApprovalCacheReq) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{56}
}

func (x *ApprovalCacheReq) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ApprovalCacheReq) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *ApprovalCacheReq) GetDebitAccount() string {
	if x != nil {
		return x.DebitAccount
	}
	return ""
}

type ApprovalCacheRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool     `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32   `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	IsExist bool     `protobuf:"varint,4,opt,name=isExist,proto3" json:"isExist,omitempty"`
	Record  []string `protobuf:"bytes,5,rep,name=record,proto3" json:"record,omitempty"`
}

func (x *ApprovalCacheRes) Reset() {
	*x = ApprovalCacheRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalCacheRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalCacheRes) ProtoMessage() {}

func (x *ApprovalCacheRes) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalCacheRes.ProtoReflect.Descriptor instead.
func (*ApprovalCacheRes) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{57}
}

func (x *ApprovalCacheRes) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *ApprovalCacheRes) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ApprovalCacheRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ApprovalCacheRes) GetIsExist() bool {
	if x != nil {
		return x.IsExist
	}
	return false
}

func (x *ApprovalCacheRes) GetRecord() []string {
	if x != nil {
		return x.Record
	}
	return nil
}

type SwiftNotificationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	USERNAME_MAKER             string `protobuf:"bytes,1,opt,name=USERNAME_MAKER,proto3" json:"USERNAME_MAKER,omitempty"`
	USERNAME_APPROVER          string `protobuf:"bytes,2,opt,name=USERNAME_APPROVER,proto3" json:"USERNAME_APPROVER,omitempty"`
	CREATED_DATETIME           string `protobuf:"bytes,3,opt,name=CREATED_DATETIME,proto3" json:"CREATED_DATETIME,omitempty"`
	CREATED_DATE               string `protobuf:"bytes,4,opt,name=CREATED_DATE,proto3" json:"CREATED_DATE,omitempty"`
	CREATED_TIME               string `protobuf:"bytes,5,opt,name=CREATED_TIME,proto3" json:"CREATED_TIME,omitempty"`
	EVENT_DATETIME             string `protobuf:"bytes,6,opt,name=EVENT_DATETIME,proto3" json:"EVENT_DATETIME,omitempty"`
	EVENT_DATE                 string `protobuf:"bytes,7,opt,name=EVENT_DATE,proto3" json:"EVENT_DATE,omitempty"`
	EVENT_TIME                 string `protobuf:"bytes,8,opt,name=EVENT_TIME,proto3" json:"EVENT_TIME,omitempty"`
	AMOUNT                     string `protobuf:"bytes,9,opt,name=AMOUNT,proto3" json:"AMOUNT,omitempty"`
	AMOUNT_TERBILANG           string `protobuf:"bytes,10,opt,name=AMOUNT_TERBILANG,proto3" json:"AMOUNT_TERBILANG,omitempty"`
	FEE                        string `protobuf:"bytes,11,opt,name=FEE,proto3" json:"FEE,omitempty"`
	FEE_TERBILANG              string `protobuf:"bytes,12,opt,name=FEE_TERBILANG,proto3" json:"FEE_TERBILANG,omitempty"`
	REMARK                     string `protobuf:"bytes,13,opt,name=REMARK,proto3" json:"REMARK,omitempty"`
	DEBIT_ACCOUNT_NUMBER       string `protobuf:"bytes,14,opt,name=DEBIT_ACCOUNT_NUMBER,proto3" json:"DEBIT_ACCOUNT_NUMBER,omitempty"`
	DEBIT_ACCOUNT_ALIAS        string `protobuf:"bytes,15,opt,name=DEBIT_ACCOUNT_ALIAS,proto3" json:"DEBIT_ACCOUNT_ALIAS,omitempty"`
	DEBIT_ACCOUNT_HOLDER_NAME  string `protobuf:"bytes,16,opt,name=DEBIT_ACCOUNT_HOLDER_NAME,proto3" json:"DEBIT_ACCOUNT_HOLDER_NAME,omitempty"`
	DEBIT_BANK_NAME            string `protobuf:"bytes,17,opt,name=DEBIT_BANK_NAME,proto3" json:"DEBIT_BANK_NAME,omitempty"`
	DEBIT_CURRENCY_NAME        string `protobuf:"bytes,18,opt,name=DEBIT_CURRENCY_NAME,proto3" json:"DEBIT_CURRENCY_NAME,omitempty"`
	SENDER_NAME                string `protobuf:"bytes,19,opt,name=SENDER_NAME,proto3" json:"SENDER_NAME,omitempty"`
	CREDIT_ACCOUNT_NUMBER      string `protobuf:"bytes,20,opt,name=CREDIT_ACCOUNT_NUMBER,proto3" json:"CREDIT_ACCOUNT_NUMBER,omitempty"`
	CREDIT_ACCOUNT_ALIAS       string `protobuf:"bytes,21,opt,name=CREDIT_ACCOUNT_ALIAS,proto3" json:"CREDIT_ACCOUNT_ALIAS,omitempty"`
	CREDIT_ACCOUNT_HOLDER_NAME string `protobuf:"bytes,22,opt,name=CREDIT_ACCOUNT_HOLDER_NAME,proto3" json:"CREDIT_ACCOUNT_HOLDER_NAME,omitempty"`
	CREDIT_BANK_NAME           string `protobuf:"bytes,23,opt,name=CREDIT_BANK_NAME,proto3" json:"CREDIT_BANK_NAME,omitempty"`
	CREDIT_SWIFT_CODE          string `protobuf:"bytes,24,opt,name=CREDIT_SWIFT_CODE,proto3" json:"CREDIT_SWIFT_CODE,omitempty"`
	CREDIT_CURRENCY_NAME       string `protobuf:"bytes,25,opt,name=CREDIT_CURRENCY_NAME,proto3" json:"CREDIT_CURRENCY_NAME,omitempty"`
	RECEIVER_NAME              string `protobuf:"bytes,26,opt,name=RECEIVER_NAME,proto3" json:"RECEIVER_NAME,omitempty"`
	EXCHANGE_RATE              string `protobuf:"bytes,27,opt,name=EXCHANGE_RATE,proto3" json:"EXCHANGE_RATE,omitempty"`
	DEAL_CODE                  string `protobuf:"bytes,28,opt,name=DEAL_CODE,proto3" json:"DEAL_CODE,omitempty"`
	TRANSACTION_ID             string `protobuf:"bytes,29,opt,name=TRANSACTION_ID,proto3" json:"TRANSACTION_ID,omitempty"`
	ROUTE_PARTNER              string `protobuf:"bytes,30,opt,name=ROUTE_PARTNER,proto3" json:"ROUTE_PARTNER,omitempty"`
	USERNAME_CHECKER           string `protobuf:"bytes,31,opt,name=USERNAME_CHECKER,proto3" json:"USERNAME_CHECKER,omitempty"`
	USERNAME_RELEASER          string `protobuf:"bytes,32,opt,name=USERNAME_RELEASER,proto3" json:"USERNAME_RELEASER,omitempty"`
	CHECKER_DATE               string `protobuf:"bytes,33,opt,name=CHECKER_DATE,proto3" json:"CHECKER_DATE,omitempty"`
	APPROVER_DATE              string `protobuf:"bytes,34,opt,name=APPROVER_DATE,proto3" json:"APPROVER_DATE,omitempty"`
	RELEASER_DATE              string `protobuf:"bytes,35,opt,name=RELEASER_DATE,proto3" json:"RELEASER_DATE,omitempty"`
	STEP                       string `protobuf:"bytes,36,opt,name=STEP,proto3" json:"STEP,omitempty"`
	UETR                       string `protobuf:"bytes,37,opt,name=UETR,proto3" json:"UETR,omitempty"`
	USERNAME_REJECTOR          string `protobuf:"bytes,38,opt,name=USERNAME_REJECTOR,proto3" json:"USERNAME_REJECTOR,omitempty"`
	COMPANY_NAME               string `protobuf:"bytes,39,opt,name=COMPANY_NAME,proto3" json:"COMPANY_NAME,omitempty"`
	MODULE                     string `protobuf:"bytes,40,opt,name=MODULE,proto3" json:"MODULE,omitempty"`
	STATUS_SEND                string `protobuf:"bytes,41,opt,name=STATUS_SEND,proto3" json:"STATUS_SEND,omitempty"`
	STATUS_ACTION              string `protobuf:"bytes,42,opt,name=STATUS_ACTION,proto3" json:"STATUS_ACTION,omitempty"`
	STATUS_REQUEST_DELETE      string `protobuf:"bytes,43,opt,name=STATUS_REQUEST_DELETE,proto3" json:"STATUS_REQUEST_DELETE,omitempty"`
	REASON                     string `protobuf:"bytes,44,opt,name=REASON,proto3" json:"REASON,omitempty"`
	COMMENT                    string `protobuf:"bytes,45,opt,name=COMMENT,proto3" json:"COMMENT,omitempty"`
}

func (x *SwiftNotificationData) Reset() {
	*x = SwiftNotificationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwiftNotificationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwiftNotificationData) ProtoMessage() {}

func (x *SwiftNotificationData) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwiftNotificationData.ProtoReflect.Descriptor instead.
func (*SwiftNotificationData) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{58}
}

func (x *SwiftNotificationData) GetUSERNAME_MAKER() string {
	if x != nil {
		return x.USERNAME_MAKER
	}
	return ""
}

func (x *SwiftNotificationData) GetUSERNAME_APPROVER() string {
	if x != nil {
		return x.USERNAME_APPROVER
	}
	return ""
}

func (x *SwiftNotificationData) GetCREATED_DATETIME() string {
	if x != nil {
		return x.CREATED_DATETIME
	}
	return ""
}

func (x *SwiftNotificationData) GetCREATED_DATE() string {
	if x != nil {
		return x.CREATED_DATE
	}
	return ""
}

func (x *SwiftNotificationData) GetCREATED_TIME() string {
	if x != nil {
		return x.CREATED_TIME
	}
	return ""
}

func (x *SwiftNotificationData) GetEVENT_DATETIME() string {
	if x != nil {
		return x.EVENT_DATETIME
	}
	return ""
}

func (x *SwiftNotificationData) GetEVENT_DATE() string {
	if x != nil {
		return x.EVENT_DATE
	}
	return ""
}

func (x *SwiftNotificationData) GetEVENT_TIME() string {
	if x != nil {
		return x.EVENT_TIME
	}
	return ""
}

func (x *SwiftNotificationData) GetAMOUNT() string {
	if x != nil {
		return x.AMOUNT
	}
	return ""
}

func (x *SwiftNotificationData) GetAMOUNT_TERBILANG() string {
	if x != nil {
		return x.AMOUNT_TERBILANG
	}
	return ""
}

func (x *SwiftNotificationData) GetFEE() string {
	if x != nil {
		return x.FEE
	}
	return ""
}

func (x *SwiftNotificationData) GetFEE_TERBILANG() string {
	if x != nil {
		return x.FEE_TERBILANG
	}
	return ""
}

func (x *SwiftNotificationData) GetREMARK() string {
	if x != nil {
		return x.REMARK
	}
	return ""
}

func (x *SwiftNotificationData) GetDEBIT_ACCOUNT_NUMBER() string {
	if x != nil {
		return x.DEBIT_ACCOUNT_NUMBER
	}
	return ""
}

func (x *SwiftNotificationData) GetDEBIT_ACCOUNT_ALIAS() string {
	if x != nil {
		return x.DEBIT_ACCOUNT_ALIAS
	}
	return ""
}

func (x *SwiftNotificationData) GetDEBIT_ACCOUNT_HOLDER_NAME() string {
	if x != nil {
		return x.DEBIT_ACCOUNT_HOLDER_NAME
	}
	return ""
}

func (x *SwiftNotificationData) GetDEBIT_BANK_NAME() string {
	if x != nil {
		return x.DEBIT_BANK_NAME
	}
	return ""
}

func (x *SwiftNotificationData) GetDEBIT_CURRENCY_NAME() string {
	if x != nil {
		return x.DEBIT_CURRENCY_NAME
	}
	return ""
}

func (x *SwiftNotificationData) GetSENDER_NAME() string {
	if x != nil {
		return x.SENDER_NAME
	}
	return ""
}

func (x *SwiftNotificationData) GetCREDIT_ACCOUNT_NUMBER() string {
	if x != nil {
		return x.CREDIT_ACCOUNT_NUMBER
	}
	return ""
}

func (x *SwiftNotificationData) GetCREDIT_ACCOUNT_ALIAS() string {
	if x != nil {
		return x.CREDIT_ACCOUNT_ALIAS
	}
	return ""
}

func (x *SwiftNotificationData) GetCREDIT_ACCOUNT_HOLDER_NAME() string {
	if x != nil {
		return x.CREDIT_ACCOUNT_HOLDER_NAME
	}
	return ""
}

func (x *SwiftNotificationData) GetCREDIT_BANK_NAME() string {
	if x != nil {
		return x.CREDIT_BANK_NAME
	}
	return ""
}

func (x *SwiftNotificationData) GetCREDIT_SWIFT_CODE() string {
	if x != nil {
		return x.CREDIT_SWIFT_CODE
	}
	return ""
}

func (x *SwiftNotificationData) GetCREDIT_CURRENCY_NAME() string {
	if x != nil {
		return x.CREDIT_CURRENCY_NAME
	}
	return ""
}

func (x *SwiftNotificationData) GetRECEIVER_NAME() string {
	if x != nil {
		return x.RECEIVER_NAME
	}
	return ""
}

func (x *SwiftNotificationData) GetEXCHANGE_RATE() string {
	if x != nil {
		return x.EXCHANGE_RATE
	}
	return ""
}

func (x *SwiftNotificationData) GetDEAL_CODE() string {
	if x != nil {
		return x.DEAL_CODE
	}
	return ""
}

func (x *SwiftNotificationData) GetTRANSACTION_ID() string {
	if x != nil {
		return x.TRANSACTION_ID
	}
	return ""
}

func (x *SwiftNotificationData) GetROUTE_PARTNER() string {
	if x != nil {
		return x.ROUTE_PARTNER
	}
	return ""
}

func (x *SwiftNotificationData) GetUSERNAME_CHECKER() string {
	if x != nil {
		return x.USERNAME_CHECKER
	}
	return ""
}

func (x *SwiftNotificationData) GetUSERNAME_RELEASER() string {
	if x != nil {
		return x.USERNAME_RELEASER
	}
	return ""
}

func (x *SwiftNotificationData) GetCHECKER_DATE() string {
	if x != nil {
		return x.CHECKER_DATE
	}
	return ""
}

func (x *SwiftNotificationData) GetAPPROVER_DATE() string {
	if x != nil {
		return x.APPROVER_DATE
	}
	return ""
}

func (x *SwiftNotificationData) GetRELEASER_DATE() string {
	if x != nil {
		return x.RELEASER_DATE
	}
	return ""
}

func (x *SwiftNotificationData) GetSTEP() string {
	if x != nil {
		return x.STEP
	}
	return ""
}

func (x *SwiftNotificationData) GetUETR() string {
	if x != nil {
		return x.UETR
	}
	return ""
}

func (x *SwiftNotificationData) GetUSERNAME_REJECTOR() string {
	if x != nil {
		return x.USERNAME_REJECTOR
	}
	return ""
}

func (x *SwiftNotificationData) GetCOMPANY_NAME() string {
	if x != nil {
		return x.COMPANY_NAME
	}
	return ""
}

func (x *SwiftNotificationData) GetMODULE() string {
	if x != nil {
		return x.MODULE
	}
	return ""
}

func (x *SwiftNotificationData) GetSTATUS_SEND() string {
	if x != nil {
		return x.STATUS_SEND
	}
	return ""
}

func (x *SwiftNotificationData) GetSTATUS_ACTION() string {
	if x != nil {
		return x.STATUS_ACTION
	}
	return ""
}

func (x *SwiftNotificationData) GetSTATUS_REQUEST_DELETE() string {
	if x != nil {
		return x.STATUS_REQUEST_DELETE
	}
	return ""
}

func (x *SwiftNotificationData) GetREASON() string {
	if x != nil {
		return x.REASON
	}
	return ""
}

func (x *SwiftNotificationData) GetCOMMENT() string {
	if x != nil {
		return x.COMMENT
	}
	return ""
}

type RemittanceTransactionTemplateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataID                        uint64 `protobuf:"varint,1,opt,name=dataID,proto3" json:"dataID,omitempty"`
	AMOUNT_ORI                    string `protobuf:"bytes,2,opt,name=AMOUNT_ORI,json=AMOUNTORI,proto3" json:"AMOUNT_ORI,omitempty"`                                                         // "AMOUNT_ORI": "7.00",
	DEBIT_ACCOUNT                 string `protobuf:"bytes,3,opt,name=DEBIT_ACCOUNT,json=DEBITACCOUNT,proto3" json:"DEBIT_ACCOUNT,omitempty"`                                                // "DEBIT_ACCOUNT": "001901001158306",
	DEBIT_AMOUNT                  string `protobuf:"bytes,4,opt,name=DEBIT_AMOUNT,json=DEBITAMOUNT,proto3" json:"DEBIT_AMOUNT,omitempty"`                                                   // "DEBIT_AMOUNT": "106148.85",
	DEBIT_ACCOUNT_MAIN            string `protobuf:"bytes,5,opt,name=DEBIT_ACCOUNT_MAIN,json=DEBITACCOUNTMAIN,proto3" json:"DEBIT_ACCOUNT_MAIN,omitempty"`                                  // "DEBIT_ACCOUNT_MAIN" : "020618000018501",
	FEE_ACCOUNT_CHANNEL           string `protobuf:"bytes,6,opt,name=FEE_ACCOUNT_CHANNEL,json=FEEACCOUNTCHANNEL,proto3" json:"FEE_ACCOUNT_CHANNEL,omitempty"`                               // "FEE_ACCOUNT_CHANNEL": "1003200310",
	FEE_DEBIT_AMOUNT_CHANNEL      string `protobuf:"bytes,7,opt,name=FEE_DEBIT_AMOUNT_CHANNEL,json=FEEDEBITAMOUNTCHANNEL,proto3" json:"FEE_DEBIT_AMOUNT_CHANNEL,omitempty"`                 // "FEE_DEBIT_AMOUNT_CHANNEL": "500000.00",
	FEE_CREDIT_AMOUNT_CHANNEL     string `protobuf:"bytes,8,opt,name=FEE_CREDIT_AMOUNT_CHANNEL,json=FEECREDITAMOUNTCHANNEL,proto3" json:"FEE_CREDIT_AMOUNT_CHANNEL,omitempty"`              // "FEE_CREDIT_AMOUNT_CHANNEL":"500000.00",
	FEE_CURRENCY_CHANNEL          string `protobuf:"bytes,9,opt,name=FEE_CURRENCY_CHANNEL,json=FEECURRENCYCHANNEL,proto3" json:"FEE_CURRENCY_CHANNEL,omitempty"`                            // "FEE_CURRENCY_CHANNEL": "IDR",
	TELLERID_KCBO                 string `protobuf:"bytes,10,opt,name=TELLERID_KCBO,json=TELLERIDKCBO,proto3" json:"TELLERID_KCBO,omitempty"`                                               // "TELLERID_KCBO":"0374891",
	BOOK_RATE_BUY                 string `protobuf:"bytes,11,opt,name=BOOK_RATE_BUY,json=BOOKRATEBUY,proto3" json:"BOOK_RATE_BUY,omitempty"`                                                // "BOOK_RATE_BUY": "1.00",
	BOOK_RATE_SELL                string `protobuf:"bytes,12,opt,name=BOOK_RATE_SELL,json=BOOKRATESELL,proto3" json:"BOOK_RATE_SELL,omitempty"`                                             // "BOOK_RATE_SELL": "10000",
	REMARK2                       string `protobuf:"bytes,13,opt,name=REMARK2,proto3" json:"REMARK2,omitempty"`                                                                             // "REMARK2": "REMARK2_COUNTERPART",
	REMARK3                       string `protobuf:"bytes,14,opt,name=REMARK3,proto3" json:"REMARK3,omitempty"`                                                                             // "REMARK3": "REMARK3_COUNTERPART",
	DEAL_CODE                     string `protobuf:"bytes,15,opt,name=DEAL_CODE,json=DEALCODE,proto3" json:"DEAL_CODE,omitempty"`                                                           // "DEAL_CODE": "O0316358",
	COUNTERPART                   string `protobuf:"bytes,16,opt,name=COUNTERPART,proto3" json:"COUNTERPART,omitempty"`                                                                     // "COUNTERPART": "BRICAMS",
	ROUTING                       string `protobuf:"bytes,17,opt,name=ROUTING,proto3" json:"ROUTING,omitempty"`                                                                             // "ROUTING": "SWIFT",
	TRANSACTION_ID                string `protobuf:"bytes,18,opt,name=TRANSACTION_ID,json=TRANSACTIONID,proto3" json:"TRANSACTION_ID,omitempty"`                                            // "TRANSACTION_ID": "H2022032203",
	USER_TRANSACTION              string `protobuf:"bytes,19,opt,name=USER_TRANSACTION,json=USERTRANSACTION,proto3" json:"USER_TRANSACTION,omitempty"`                                      // "USER_TRANSACTION": "HANS",
	USER_TRANSACTION_BRANCH_CODE  string `protobuf:"bytes,20,opt,name=USER_TRANSACTION_BRANCH_CODE,json=USERTRANSACTIONBRANCHCODE,proto3" json:"USER_TRANSACTION_BRANCH_CODE,omitempty"`    // "USER_TRANSACTION_BRANCH_CODE": "020601",
	ACCOUNT_NUMBER                string `protobuf:"bytes,21,opt,name=ACCOUNT_NUMBER,json=ACCOUNTNUMBER,proto3" json:"ACCOUNT_NUMBER,omitempty"`                                            // "ACCOUNT_NUMBER": "1223113215555",
	CHARGES_TYPE                  string `protobuf:"bytes,22,opt,name=CHARGES_TYPE,json=CHARGESTYPE,proto3" json:"CHARGES_TYPE,omitempty"`                                                  // "CHARGES_TYPE": "OUR",
	BENEFICIARY_BANK_CODE         string `protobuf:"bytes,23,opt,name=BENEFICIARY_BANK_CODE,json=BENEFICIARYBANKCODE,proto3" json:"BENEFICIARY_BANK_CODE,omitempty"`                        // "BENEFICIARY_BANK_CODE": "AERIUS33XXX",
	BENEFICIARY_BANK_NAME         string `protobuf:"bytes,24,opt,name=BENEFICIARY_BANK_NAME,json=BENEFICIARYBANKNAME,proto3" json:"BENEFICIARY_BANK_NAME,omitempty"`                        // "BENEFICIARY_BANK_NAME": "AMERIS BANK",
	BENEFICIARY_BANK_ADDRESS      string `protobuf:"bytes,25,opt,name=BENEFICIARY_BANK_ADDRESS,json=BENEFICIARYBANKADDRESS,proto3" json:"BENEFICIARY_BANK_ADDRESS,omitempty"`               // "BENEFICIARY_BANK_ADDRESS": "1300 MORRIS DRIVE",
	BENEFICIARY_BANK_CITY         string `protobuf:"bytes,26,opt,name=BENEFICIARY_BANK_CITY,json=BENEFICIARYBANKCITY,proto3" json:"BENEFICIARY_BANK_CITY,omitempty"`                        // "BENEFICIARY_BANK_CITY": "CHESTERBROOK,PA",
	BENEFICIARY_BANK_COUNTRY_CODE string `protobuf:"bytes,27,opt,name=BENEFICIARY_BANK_COUNTRY_CODE,json=BENEFICIARYBANKCOUNTRYCODE,proto3" json:"BENEFICIARY_BANK_COUNTRY_CODE,omitempty"` // "BENEFICIARY_BANK_COUNTRY_CODE": "US",
	BENEFICIARY_ID_TYPE           string `protobuf:"bytes,28,opt,name=BENEFICIARY_ID_TYPE,json=BENEFICIARYIDTYPE,proto3" json:"BENEFICIARY_ID_TYPE,omitempty"`                              // "BENEFICIARY_ID_TYPE": "1",
	BENEFICIARY_ID_NUMBER         string `protobuf:"bytes,29,opt,name=BENEFICIARY_ID_NUMBER,json=BENEFICIARYIDNUMBER,proto3" json:"BENEFICIARY_ID_NUMBER,omitempty"`                        // "BENEFICIARY_ID_NUMBER": "3318101912900004",
	BENEFICIARY_NAME              string `protobuf:"bytes,30,opt,name=BENEFICIARY_NAME,json=BENEFICIARYNAME,proto3" json:"BENEFICIARY_NAME,omitempty"`                                      // "BENEFICIARY_NAME": "FERRY MARK",
	BENEFICIARY_ADDRESS           string `protobuf:"bytes,31,opt,name=BENEFICIARY_ADDRESS,json=BENEFICIARYADDRESS,proto3" json:"BENEFICIARY_ADDRESS,omitempty"`                             // "BENEFICIARY_ADDRESS": "24 STREET",
	BENEFICIARY_CITY              string `protobuf:"bytes,32,opt,name=BENEFICIARY_CITY,json=BENEFICIARYCITY,proto3" json:"BENEFICIARY_CITY,omitempty"`                                      // "BENEFICIARY_CITY": "ALASKA",
	BENEFICIARY_STATE_PROVINCE    string `protobuf:"bytes,33,opt,name=BENEFICIARY_STATE_PROVINCE,json=BENEFICIARYSTATEPROVINCE,proto3" json:"BENEFICIARY_STATE_PROVINCE,omitempty"`         // "BENEFICIARY_STATE_PROVINCE": "ALASKA",
	BENEFICIARY_POSTCODE          string `protobuf:"bytes,34,opt,name=BENEFICIARY_POSTCODE,json=BENEFICIARYPOSTCODE,proto3" json:"BENEFICIARY_POSTCODE,omitempty"`                          // "BENEFICIARY_POSTCODE": "50144",
	BENEFICIARY_COUNTRY_CODE      string `protobuf:"bytes,35,opt,name=BENEFICIARY_COUNTRY_CODE,json=BENEFICIARYCOUNTRYCODE,proto3" json:"BENEFICIARY_COUNTRY_CODE,omitempty"`               // "BENEFICIARY_COUNTRY_CODE": "US",
	BENEFICIARY_PHONE_CODE        string `protobuf:"bytes,36,opt,name=BENEFICIARY_PHONE_CODE,json=BENEFICIARYPHONECODE,proto3" json:"BENEFICIARY_PHONE_CODE,omitempty"`                     // "BENEFICIARY_PHONE_CODE": "852",
	BENEFICIARY_PHONE             string `protobuf:"bytes,37,opt,name=BENEFICIARY_PHONE,json=BENEFICIARYPHONE,proto3" json:"BENEFICIARY_PHONE,omitempty"`                                   // "BENEFICIARY_PHONE": "081792226376",
	BENEFICIARY_EMAIL             string `protobuf:"bytes,38,opt,name=BENEFICIARY_EMAIL,json=BENEFICIARYEMAIL,proto3" json:"BENEFICIARY_EMAIL,omitempty"`                                   // "BENEFICIARY_EMAIL": "ELABRAMBRI@GMAIL.COM",
	BENEFICIARY_TYPE              string `protobuf:"bytes,39,opt,name=BENEFICIARY_TYPE,json=BENEFICIARYTYPE,proto3" json:"BENEFICIARY_TYPE,omitempty"`                                      // "BENEFICIARY_TYPE": "1",
	BENEFICIARY_GENDER            string `protobuf:"bytes,40,opt,name=BENEFICIARY_GENDER,json=BENEFICIARYGENDER,proto3" json:"BENEFICIARY_GENDER,omitempty"`                                // "BENEFICIARY_GENDER": "1",
	BENEFICIARY_RELATIONSHIP      string `protobuf:"bytes,41,opt,name=BENEFICIARY_RELATIONSHIP,json=BENEFICIARYRELATIONSHIP,proto3" json:"BENEFICIARY_RELATIONSHIP,omitempty"`              // "BENEFICIARY_RELATIONSHIP": "1",
	CURRENCY_ORI                  string `protobuf:"bytes,42,opt,name=CURRENCY_ORI,json=CURRENCYORI,proto3" json:"CURRENCY_ORI,omitempty"`                                                  // "CURRENCY_ORI": "USD",
	SENDER_ID_TYPE                string `protobuf:"bytes,43,opt,name=SENDER_ID_TYPE,json=SENDERIDTYPE,proto3" json:"SENDER_ID_TYPE,omitempty"`                                             // "SENDER_ID_TYPE": "1",
	SENDER_ID_NUMBER              string `protobuf:"bytes,44,opt,name=SENDER_ID_NUMBER,json=SENDERIDNUMBER,proto3" json:"SENDER_ID_NUMBER,omitempty"`                                       // "SENDER_ID_NUMBER": "00835345345345",
	SENDER_ID_ISSUE_DATE          string `protobuf:"bytes,45,opt,name=SENDER_ID_ISSUE_DATE,json=SENDERIDISSUEDATE,proto3" json:"SENDER_ID_ISSUE_DATE,omitempty"`                            // "SENDER_ID_ISSUE_DATE": "2020-08-18",
	SENDER_ID_EXPIRED_DATE        string `protobuf:"bytes,46,opt,name=SENDER_ID_EXPIRED_DATE,json=SENDERIDEXPIREDDATE,proto3" json:"SENDER_ID_EXPIRED_DATE,omitempty"`                      // "SENDER_ID_EXPIRED_DATE": "2020-09-18",
	SENDER_NAME                   string `protobuf:"bytes,47,opt,name=SENDER_NAME,json=SENDERNAME,proto3" json:"SENDER_NAME,omitempty"`                                                     // "SENDER_NAME": "BANGKIT NGABDIANTO OTHER",
	SENDER_ADDRESS                string `protobuf:"bytes,48,opt,name=SENDER_ADDRESS,json=SENDERADDRESS,proto3" json:"SENDER_ADDRESS,omitempty"`                                            // "SENDER_ADDRESS": "JL HARSONO RM",
	SENDER_CITY                   string `protobuf:"bytes,49,opt,name=SENDER_CITY,json=SENDERCITY,proto3" json:"SENDER_CITY,omitempty"`                                                     // "SENDER_CITY": "DKI JAKARTA",
	SENDER_STATE_PROVINCE         string `protobuf:"bytes,50,opt,name=SENDER_STATE_PROVINCE,json=SENDERSTATEPROVINCE,proto3" json:"SENDER_STATE_PROVINCE,omitempty"`                        // "SENDER_STATE_PROVINCE": "JAKARTA SELATAN",
	SENDER_POSTCODE               string `protobuf:"bytes,51,opt,name=SENDER_POSTCODE,json=SENDERPOSTCODE,proto3" json:"SENDER_POSTCODE,omitempty"`                                         // "SENDER_POSTCODE": "50144",
	SENDER_COUNTRY_CODE           string `protobuf:"bytes,52,opt,name=SENDER_COUNTRY_CODE,json=SENDERCOUNTRYCODE,proto3" json:"SENDER_COUNTRY_CODE,omitempty"`                              // "SENDER_COUNTRY_CODE": "1",
	SENDER_DOB                    string `protobuf:"bytes,53,opt,name=SENDER_DOB,json=SENDERDOB,proto3" json:"SENDER_DOB,omitempty"`                                                        // "SENDER_DOB": "1990-01-22",
	SENDER_PHONE_CODE             string `protobuf:"bytes,54,opt,name=SENDER_PHONE_CODE,json=SENDERPHONECODE,proto3" json:"SENDER_PHONE_CODE,omitempty"`                                    // "SENDER_PHONE_CODE": "62",
	SENDER_PHONE                  string `protobuf:"bytes,55,opt,name=SENDER_PHONE,json=SENDERPHONE,proto3" json:"SENDER_PHONE,omitempty"`                                                  // "SENDER_PHONE": "6281781112353",
	SENDER_EMAIL                  string `protobuf:"bytes,56,opt,name=SENDER_EMAIL,json=SENDEREMAIL,proto3" json:"SENDER_EMAIL,omitempty"`                                                  // "SENDER_EMAIL": "ELABRAMBRI@BRILIAN.BRI.CO.ID",
	SENDER_TYPE                   string `protobuf:"bytes,57,opt,name=SENDER_TYPE,json=SENDERTYPE,proto3" json:"SENDER_TYPE,omitempty"`                                                     // "SENDER_TYPE": "1",
	SENDER_SOURCE_OF_FUND         string `protobuf:"bytes,58,opt,name=SENDER_SOURCE_OF_FUND,json=SENDERSOURCEOFFUND,proto3" json:"SENDER_SOURCE_OF_FUND,omitempty"`                         // "SENDER_SOURCE_OF_FUND": "2",
	SENDER_BIRTH_CITY             string `protobuf:"bytes,59,opt,name=SENDER_BIRTH_CITY,json=SENDERBIRTHCITY,proto3" json:"SENDER_BIRTH_CITY,omitempty"`                                    // "SENDER_BIRTH_CITY": "153",
	SENDER_POSITION               string `protobuf:"bytes,60,opt,name=SENDER_POSITION,json=SENDERPOSITION,proto3" json:"SENDER_POSITION,omitempty"`                                         // "SENDER_POSITION": "1",
	SENDER_BIRTH_COUNTRY          string `protobuf:"bytes,61,opt,name=SENDER_BIRTH_COUNTRY,json=SENDERBIRTHCOUNTRY,proto3" json:"SENDER_BIRTH_COUNTRY,omitempty"`                           // "SENDER_BIRTH_COUNTRY": "ID",
	SENDER_WORKING_STATUS         string `protobuf:"bytes,62,opt,name=SENDER_WORKING_STATUS,json=SENDERWORKINGSTATUS,proto3" json:"SENDER_WORKING_STATUS,omitempty"`                        // "SENDER_WORKING_STATUS": "1",
	SENDER_PROFESSION             string `protobuf:"bytes,63,opt,name=SENDER_PROFESSION,json=SENDERPROFESSION,proto3" json:"SENDER_PROFESSION,omitempty"`                                   // "SENDER_PROFESSION": "1",
	SENDER_CITIZENSHIP_COUNTRY    string `protobuf:"bytes,64,opt,name=SENDER_CITIZENSHIP_COUNTRY,json=SENDERCITIZENSHIPCOUNTRY,proto3" json:"SENDER_CITIZENSHIP_COUNTRY,omitempty"`         // "SENDER_CITIZENSHIP_COUNTRY": "ID",
	SENDER_GENDER                 string `protobuf:"bytes,65,opt,name=SENDER_GENDER,json=SENDERGENDER,proto3" json:"SENDER_GENDER,omitempty"`                                               // "SENDER_GENDER": "1",
	TRANSACTION_PURPOSE           string `protobuf:"bytes,66,opt,name=TRANSACTION_PURPOSE,json=TRANSACTIONPURPOSE,proto3" json:"TRANSACTION_PURPOSE,omitempty"`                             // "TRANSACTION_PURPOSE": "17",
	INTENDED_USE                  string `protobuf:"bytes,67,opt,name=INTENDED_USE,json=INTENDEDUSE,proto3" json:"INTENDED_USE,omitempty"`                                                  // "INTENDED_USE": "1"
	TICKET_NUMBER                 string `protobuf:"bytes,68,opt,name=TICKET_NUMBER,json=TICKETNUMBER,proto3" json:"TICKET_NUMBER,omitempty"`                                               // "TICKET_NUMBER"
	SendDate                      string `protobuf:"bytes,69,opt,name=sendDate,proto3" json:"sendDate,omitempty"`
	CompanyID                     string `protobuf:"bytes,70,opt,name=companyID,proto3" json:"companyID,omitempty"`
	MakerRoleID                   uint64 `protobuf:"varint,71,opt,name=makerRoleID,proto3" json:"makerRoleID,omitempty"`
	DebitAccountID                uint64 `protobuf:"varint,72,opt,name=debitAccountID,proto3" json:"debitAccountID,omitempty"`
	DebitAccountAlias             string `protobuf:"bytes,75,opt,name=debitAccountAlias,proto3" json:"debitAccountAlias,omitempty"`
	DebitCurrencyID               string `protobuf:"bytes,73,opt,name=debitCurrencyID,proto3" json:"debitCurrencyID,omitempty"`
	FileAttachment                string `protobuf:"bytes,74,opt,name=fileAttachment,proto3" json:"fileAttachment,omitempty"`
	ScheduleTransaction           string `protobuf:"bytes,76,opt,name=scheduleTransaction,proto3" json:"scheduleTransaction,omitempty"`
	SelectedRoutePartner          string `protobuf:"bytes,77,opt,name=selectedRoutePartner,proto3" json:"selectedRoutePartner,omitempty"`
	BeneficiaryEmails             string `protobuf:"bytes,78,opt,name=beneficiaryEmails,proto3" json:"beneficiaryEmails,omitempty"`
	TransactionResponse           string `protobuf:"bytes,79,opt,name=transactionResponse,proto3" json:"transactionResponse,omitempty"`
	CompletedDate                 string `protobuf:"bytes,80,opt,name=completedDate,proto3" json:"completedDate,omitempty"`
	TransactionStatus             string `protobuf:"bytes,90,opt,name=transactionStatus,proto3" json:"transactionStatus,omitempty"`
	TaskID                        uint64 `protobuf:"varint,91,opt,name=taskID,proto3" json:"taskID,omitempty"`
	TransactionResponseMessage    string `protobuf:"bytes,92,opt,name=transactionResponseMessage,proto3" json:"transactionResponseMessage,omitempty"`
	CheckStatusResponse           string `protobuf:"bytes,93,opt,name=checkStatusResponse,proto3" json:"checkStatusResponse,omitempty"`
	LastChecked                   string `protobuf:"bytes,94,opt,name=lastChecked,proto3" json:"lastChecked,omitempty"`
	BeneficiaryCountryName        string `protobuf:"bytes,95,opt,name=beneficiaryCountryName,proto3" json:"beneficiaryCountryName,omitempty"`
	TransactionSvcId              uint64 `protobuf:"varint,96,opt,name=transaction_svc_id,json=transactionSvcId,proto3" json:"transaction_svc_id,omitempty"`
	CreatedByName                 string `protobuf:"bytes,101,opt,name=createdByName,proto3" json:"createdByName,omitempty"`
	CreatedAt                     string `protobuf:"bytes,102,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt                     string `protobuf:"bytes,103,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *RemittanceTransactionTemplateData) Reset() {
	*x = RemittanceTransactionTemplateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemittanceTransactionTemplateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemittanceTransactionTemplateData) ProtoMessage() {}

func (x *RemittanceTransactionTemplateData) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemittanceTransactionTemplateData.ProtoReflect.Descriptor instead.
func (*RemittanceTransactionTemplateData) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{59}
}

func (x *RemittanceTransactionTemplateData) GetDataID() uint64 {
	if x != nil {
		return x.DataID
	}
	return 0
}

func (x *RemittanceTransactionTemplateData) GetAMOUNT_ORI() string {
	if x != nil {
		return x.AMOUNT_ORI
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetDEBIT_ACCOUNT() string {
	if x != nil {
		return x.DEBIT_ACCOUNT
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetDEBIT_AMOUNT() string {
	if x != nil {
		return x.DEBIT_AMOUNT
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetDEBIT_ACCOUNT_MAIN() string {
	if x != nil {
		return x.DEBIT_ACCOUNT_MAIN
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetFEE_ACCOUNT_CHANNEL() string {
	if x != nil {
		return x.FEE_ACCOUNT_CHANNEL
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetFEE_DEBIT_AMOUNT_CHANNEL() string {
	if x != nil {
		return x.FEE_DEBIT_AMOUNT_CHANNEL
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetFEE_CREDIT_AMOUNT_CHANNEL() string {
	if x != nil {
		return x.FEE_CREDIT_AMOUNT_CHANNEL
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetFEE_CURRENCY_CHANNEL() string {
	if x != nil {
		return x.FEE_CURRENCY_CHANNEL
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetTELLERID_KCBO() string {
	if x != nil {
		return x.TELLERID_KCBO
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetBOOK_RATE_BUY() string {
	if x != nil {
		return x.BOOK_RATE_BUY
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetBOOK_RATE_SELL() string {
	if x != nil {
		return x.BOOK_RATE_SELL
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetREMARK2() string {
	if x != nil {
		return x.REMARK2
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetREMARK3() string {
	if x != nil {
		return x.REMARK3
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetDEAL_CODE() string {
	if x != nil {
		return x.DEAL_CODE
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetCOUNTERPART() string {
	if x != nil {
		return x.COUNTERPART
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetROUTING() string {
	if x != nil {
		return x.ROUTING
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetTRANSACTION_ID() string {
	if x != nil {
		return x.TRANSACTION_ID
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetUSER_TRANSACTION() string {
	if x != nil {
		return x.USER_TRANSACTION
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetUSER_TRANSACTION_BRANCH_CODE() string {
	if x != nil {
		return x.USER_TRANSACTION_BRANCH_CODE
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetACCOUNT_NUMBER() string {
	if x != nil {
		return x.ACCOUNT_NUMBER
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetCHARGES_TYPE() string {
	if x != nil {
		return x.CHARGES_TYPE
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetBENEFICIARY_BANK_CODE() string {
	if x != nil {
		return x.BENEFICIARY_BANK_CODE
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetBENEFICIARY_BANK_NAME() string {
	if x != nil {
		return x.BENEFICIARY_BANK_NAME
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetBENEFICIARY_BANK_ADDRESS() string {
	if x != nil {
		return x.BENEFICIARY_BANK_ADDRESS
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetBENEFICIARY_BANK_CITY() string {
	if x != nil {
		return x.BENEFICIARY_BANK_CITY
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetBENEFICIARY_BANK_COUNTRY_CODE() string {
	if x != nil {
		return x.BENEFICIARY_BANK_COUNTRY_CODE
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetBENEFICIARY_ID_TYPE() string {
	if x != nil {
		return x.BENEFICIARY_ID_TYPE
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetBENEFICIARY_ID_NUMBER() string {
	if x != nil {
		return x.BENEFICIARY_ID_NUMBER
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetBENEFICIARY_NAME() string {
	if x != nil {
		return x.BENEFICIARY_NAME
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetBENEFICIARY_ADDRESS() string {
	if x != nil {
		return x.BENEFICIARY_ADDRESS
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetBENEFICIARY_CITY() string {
	if x != nil {
		return x.BENEFICIARY_CITY
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetBENEFICIARY_STATE_PROVINCE() string {
	if x != nil {
		return x.BENEFICIARY_STATE_PROVINCE
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetBENEFICIARY_POSTCODE() string {
	if x != nil {
		return x.BENEFICIARY_POSTCODE
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetBENEFICIARY_COUNTRY_CODE() string {
	if x != nil {
		return x.BENEFICIARY_COUNTRY_CODE
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetBENEFICIARY_PHONE_CODE() string {
	if x != nil {
		return x.BENEFICIARY_PHONE_CODE
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetBENEFICIARY_PHONE() string {
	if x != nil {
		return x.BENEFICIARY_PHONE
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetBENEFICIARY_EMAIL() string {
	if x != nil {
		return x.BENEFICIARY_EMAIL
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetBENEFICIARY_TYPE() string {
	if x != nil {
		return x.BENEFICIARY_TYPE
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetBENEFICIARY_GENDER() string {
	if x != nil {
		return x.BENEFICIARY_GENDER
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetBENEFICIARY_RELATIONSHIP() string {
	if x != nil {
		return x.BENEFICIARY_RELATIONSHIP
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetCURRENCY_ORI() string {
	if x != nil {
		return x.CURRENCY_ORI
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetSENDER_ID_TYPE() string {
	if x != nil {
		return x.SENDER_ID_TYPE
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetSENDER_ID_NUMBER() string {
	if x != nil {
		return x.SENDER_ID_NUMBER
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetSENDER_ID_ISSUE_DATE() string {
	if x != nil {
		return x.SENDER_ID_ISSUE_DATE
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetSENDER_ID_EXPIRED_DATE() string {
	if x != nil {
		return x.SENDER_ID_EXPIRED_DATE
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetSENDER_NAME() string {
	if x != nil {
		return x.SENDER_NAME
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetSENDER_ADDRESS() string {
	if x != nil {
		return x.SENDER_ADDRESS
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetSENDER_CITY() string {
	if x != nil {
		return x.SENDER_CITY
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetSENDER_STATE_PROVINCE() string {
	if x != nil {
		return x.SENDER_STATE_PROVINCE
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetSENDER_POSTCODE() string {
	if x != nil {
		return x.SENDER_POSTCODE
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetSENDER_COUNTRY_CODE() string {
	if x != nil {
		return x.SENDER_COUNTRY_CODE
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetSENDER_DOB() string {
	if x != nil {
		return x.SENDER_DOB
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetSENDER_PHONE_CODE() string {
	if x != nil {
		return x.SENDER_PHONE_CODE
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetSENDER_PHONE() string {
	if x != nil {
		return x.SENDER_PHONE
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetSENDER_EMAIL() string {
	if x != nil {
		return x.SENDER_EMAIL
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetSENDER_TYPE() string {
	if x != nil {
		return x.SENDER_TYPE
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetSENDER_SOURCE_OF_FUND() string {
	if x != nil {
		return x.SENDER_SOURCE_OF_FUND
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetSENDER_BIRTH_CITY() string {
	if x != nil {
		return x.SENDER_BIRTH_CITY
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetSENDER_POSITION() string {
	if x != nil {
		return x.SENDER_POSITION
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetSENDER_BIRTH_COUNTRY() string {
	if x != nil {
		return x.SENDER_BIRTH_COUNTRY
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetSENDER_WORKING_STATUS() string {
	if x != nil {
		return x.SENDER_WORKING_STATUS
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetSENDER_PROFESSION() string {
	if x != nil {
		return x.SENDER_PROFESSION
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetSENDER_CITIZENSHIP_COUNTRY() string {
	if x != nil {
		return x.SENDER_CITIZENSHIP_COUNTRY
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetSENDER_GENDER() string {
	if x != nil {
		return x.SENDER_GENDER
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetTRANSACTION_PURPOSE() string {
	if x != nil {
		return x.TRANSACTION_PURPOSE
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetINTENDED_USE() string {
	if x != nil {
		return x.INTENDED_USE
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetTICKET_NUMBER() string {
	if x != nil {
		return x.TICKET_NUMBER
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetSendDate() string {
	if x != nil {
		return x.SendDate
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetCompanyID() string {
	if x != nil {
		return x.CompanyID
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetMakerRoleID() uint64 {
	if x != nil {
		return x.MakerRoleID
	}
	return 0
}

func (x *RemittanceTransactionTemplateData) GetDebitAccountID() uint64 {
	if x != nil {
		return x.DebitAccountID
	}
	return 0
}

func (x *RemittanceTransactionTemplateData) GetDebitAccountAlias() string {
	if x != nil {
		return x.DebitAccountAlias
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetDebitCurrencyID() string {
	if x != nil {
		return x.DebitCurrencyID
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetFileAttachment() string {
	if x != nil {
		return x.FileAttachment
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetScheduleTransaction() string {
	if x != nil {
		return x.ScheduleTransaction
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetSelectedRoutePartner() string {
	if x != nil {
		return x.SelectedRoutePartner
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetBeneficiaryEmails() string {
	if x != nil {
		return x.BeneficiaryEmails
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetTransactionResponse() string {
	if x != nil {
		return x.TransactionResponse
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetCompletedDate() string {
	if x != nil {
		return x.CompletedDate
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetTransactionStatus() string {
	if x != nil {
		return x.TransactionStatus
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *RemittanceTransactionTemplateData) GetTransactionResponseMessage() string {
	if x != nil {
		return x.TransactionResponseMessage
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetCheckStatusResponse() string {
	if x != nil {
		return x.CheckStatusResponse
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetLastChecked() string {
	if x != nil {
		return x.LastChecked
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetBeneficiaryCountryName() string {
	if x != nil {
		return x.BeneficiaryCountryName
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetTransactionSvcId() uint64 {
	if x != nil {
		return x.TransactionSvcId
	}
	return 0
}

func (x *RemittanceTransactionTemplateData) GetCreatedByName() string {
	if x != nil {
		return x.CreatedByName
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *RemittanceTransactionTemplateData) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type RemittanceTemplateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeneficiaryEmails []string                           `protobuf:"bytes,3,rep,name=beneficiaryEmails,proto3" json:"beneficiaryEmails,omitempty"`
	Data              *RemittanceTransactionTemplateData `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RemittanceTemplateData) Reset() {
	*x = RemittanceTemplateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemittanceTemplateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemittanceTemplateData) ProtoMessage() {}

func (x *RemittanceTemplateData) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemittanceTemplateData.ProtoReflect.Descriptor instead.
func (*RemittanceTemplateData) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{60}
}

func (x *RemittanceTemplateData) GetBeneficiaryEmails() []string {
	if x != nil {
		return x.BeneficiaryEmails
	}
	return nil
}

func (x *RemittanceTemplateData) GetData() *RemittanceTransactionTemplateData {
	if x != nil {
		return x.Data
	}
	return nil
}

type RemittanceTemplateDataRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateID    uint64                 `protobuf:"varint,1,opt,name=templateID,proto3" json:"templateID,omitempty"`
	CompanyOwner  string                 `protobuf:"bytes,2,opt,name=companyOwner,proto3" json:"companyOwner,omitempty"`
	TemplateName  string                 `protobuf:"bytes,3,opt,name=templateName,proto3" json:"templateName,omitempty"`
	Data          *RemittanceTransaction `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	CreatedByName string                 `protobuf:"bytes,101,opt,name=createdByName,proto3" json:"createdByName,omitempty"`
	CreatedByID   uint64                 `protobuf:"varint,102,opt,name=createdByID,proto3" json:"createdByID,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,103,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,104,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *RemittanceTemplateDataRes) Reset() {
	*x = RemittanceTemplateDataRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemittanceTemplateDataRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemittanceTemplateDataRes) ProtoMessage() {}

func (x *RemittanceTemplateDataRes) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemittanceTemplateDataRes.ProtoReflect.Descriptor instead.
func (*RemittanceTemplateDataRes) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{61}
}

func (x *RemittanceTemplateDataRes) GetTemplateID() uint64 {
	if x != nil {
		return x.TemplateID
	}
	return 0
}

func (x *RemittanceTemplateDataRes) GetCompanyOwner() string {
	if x != nil {
		return x.CompanyOwner
	}
	return ""
}

func (x *RemittanceTemplateDataRes) GetTemplateName() string {
	if x != nil {
		return x.TemplateName
	}
	return ""
}

func (x *RemittanceTemplateDataRes) GetData() *RemittanceTransaction {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RemittanceTemplateDataRes) GetCreatedByName() string {
	if x != nil {
		return x.CreatedByName
	}
	return ""
}

func (x *RemittanceTemplateDataRes) GetCreatedByID() uint64 {
	if x != nil {
		return x.CreatedByID
	}
	return 0
}

func (x *RemittanceTemplateDataRes) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RemittanceTemplateDataRes) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type SaveRemittanceTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateID   uint64                  `protobuf:"varint,1,opt,name=templateID,proto3" json:"templateID,omitempty"`
	TemplateName string                  `protobuf:"bytes,2,opt,name=templateName,proto3" json:"templateName,omitempty"`
	Data         *RemittanceTemplateData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SaveRemittanceTemplateRequest) Reset() {
	*x = SaveRemittanceTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveRemittanceTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveRemittanceTemplateRequest) ProtoMessage() {}

func (x *SaveRemittanceTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveRemittanceTemplateRequest.ProtoReflect.Descriptor instead.
func (*SaveRemittanceTemplateRequest) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{62}
}

func (x *SaveRemittanceTemplateRequest) GetTemplateID() uint64 {
	if x != nil {
		return x.TemplateID
	}
	return 0
}

func (x *SaveRemittanceTemplateRequest) GetTemplateName() string {
	if x != nil {
		return x.TemplateName
	}
	return ""
}

func (x *SaveRemittanceTemplateRequest) GetData() *RemittanceTemplateData {
	if x != nil {
		return x.Data
	}
	return nil
}

type SaveRemittanceTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool                `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32              `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string              `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *RemittanceTemplate `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SaveRemittanceTemplateResponse) Reset() {
	*x = SaveRemittanceTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveRemittanceTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveRemittanceTemplateResponse) ProtoMessage() {}

func (x *SaveRemittanceTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveRemittanceTemplateResponse.ProtoReflect.Descriptor instead.
func (*SaveRemittanceTemplateResponse) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{63}
}

func (x *SaveRemittanceTemplateResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *SaveRemittanceTemplateResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SaveRemittanceTemplateResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SaveRemittanceTemplateResponse) GetData() *RemittanceTemplate {
	if x != nil {
		return x.Data
	}
	return nil
}

type RemittanceTemplateListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  int32                                                       `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Page   int32                                                       `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Sort   string                                                      `protobuf:"bytes,3,opt,name=sort,proto3" json:"sort,omitempty"`
	Dir    SortDirection                                               `protobuf:"varint,4,opt,name=dir,proto3,enum=swift.service.v1.SortDirection" json:"dir,omitempty"`
	Filter *RemittanceTemplateListRequest_RemittanceTemplateListFilter `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
	Search string                                                      `protobuf:"bytes,8,opt,name=search,proto3" json:"search,omitempty"`
}

func (x *RemittanceTemplateListRequest) Reset() {
	*x = RemittanceTemplateListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemittanceTemplateListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemittanceTemplateListRequest) ProtoMessage() {}

func (x *RemittanceTemplateListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemittanceTemplateListRequest.ProtoReflect.Descriptor instead.
func (*RemittanceTemplateListRequest) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{64}
}

func (x *RemittanceTemplateListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *RemittanceTemplateListRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *RemittanceTemplateListRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *RemittanceTemplateListRequest) GetDir() SortDirection {
	if x != nil {
		return x.Dir
	}
	return SortDirection_DESC
}

func (x *RemittanceTemplateListRequest) GetFilter() *RemittanceTemplateListRequest_RemittanceTemplateListFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *RemittanceTemplateListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

type RemittanceTemplateListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      bool                  `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code       uint32                `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message    string                `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data       []*RemittanceTemplate `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	Pagination *PaginationResponse   `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *RemittanceTemplateListResponse) Reset() {
	*x = RemittanceTemplateListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemittanceTemplateListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemittanceTemplateListResponse) ProtoMessage() {}

func (x *RemittanceTemplateListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemittanceTemplateListResponse.ProtoReflect.Descriptor instead.
func (*RemittanceTemplateListResponse) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{65}
}

func (x *RemittanceTemplateListResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *RemittanceTemplateListResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RemittanceTemplateListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RemittanceTemplateListResponse) GetData() []*RemittanceTemplate {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RemittanceTemplateListResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type DetailRemittanceTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateID uint64 `protobuf:"varint,1,opt,name=templateID,proto3" json:"templateID,omitempty"`
}

func (x *DetailRemittanceTemplateRequest) Reset() {
	*x = DetailRemittanceTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailRemittanceTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailRemittanceTemplateRequest) ProtoMessage() {}

func (x *DetailRemittanceTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailRemittanceTemplateRequest.ProtoReflect.Descriptor instead.
func (*DetailRemittanceTemplateRequest) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{66}
}

func (x *DetailRemittanceTemplateRequest) GetTemplateID() uint64 {
	if x != nil {
		return x.TemplateID
	}
	return 0
}

type DetailRemittanceTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool                       `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint64                     `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string                     `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *RemittanceTemplateDataRes `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DetailRemittanceTemplateResponse) Reset() {
	*x = DetailRemittanceTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailRemittanceTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailRemittanceTemplateResponse) ProtoMessage() {}

func (x *DetailRemittanceTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailRemittanceTemplateResponse.ProtoReflect.Descriptor instead.
func (*DetailRemittanceTemplateResponse) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{67}
}

func (x *DetailRemittanceTemplateResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *DetailRemittanceTemplateResponse) GetCode() uint64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DetailRemittanceTemplateResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DetailRemittanceTemplateResponse) GetData() *RemittanceTemplateDataRes {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteRemittanceTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateID uint64 `protobuf:"varint,1,opt,name=templateID,proto3" json:"templateID,omitempty"`
}

func (x *DeleteRemittanceTemplateRequest) Reset() {
	*x = DeleteRemittanceTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRemittanceTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRemittanceTemplateRequest) ProtoMessage() {}

func (x *DeleteRemittanceTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRemittanceTemplateRequest.ProtoReflect.Descriptor instead.
func (*DeleteRemittanceTemplateRequest) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{68}
}

func (x *DeleteRemittanceTemplateRequest) GetTemplateID() uint64 {
	if x != nil {
		return x.TemplateID
	}
	return 0
}

type DeleteRemittanceTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint64 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteRemittanceTemplateResponse) Reset() {
	*x = DeleteRemittanceTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRemittanceTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRemittanceTemplateResponse) ProtoMessage() {}

func (x *DeleteRemittanceTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRemittanceTemplateResponse.ProtoReflect.Descriptor instead.
func (*DeleteRemittanceTemplateResponse) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{69}
}

func (x *DeleteRemittanceTemplateResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *DeleteRemittanceTemplateResponse) GetCode() uint64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteRemittanceTemplateResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID uint64 `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
}

func (x *DeleteTaskReq) Reset() {
	*x = DeleteTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTaskReq) ProtoMessage() {}

func (x *DeleteTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTaskReq.ProtoReflect.Descriptor instead.
func (*DeleteTaskReq) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{70}
}

func (x *DeleteTaskReq) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

type DeleteTaskRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint64 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteTaskRes) Reset() {
	*x = DeleteTaskRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTaskRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTaskRes) ProtoMessage() {}

func (x *DeleteTaskRes) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTaskRes.ProtoReflect.Descriptor instead.
func (*DeleteTaskRes) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{71}
}

func (x *DeleteTaskRes) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *DeleteTaskRes) GetCode() uint64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteTaskRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type TaskListRequest_TaskListFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeneficiaryCountryCode string `protobuf:"bytes,1,opt,name=beneficiaryCountryCode,proto3" json:"beneficiaryCountryCode,omitempty"`
	BeneficiaryBank        string `protobuf:"bytes,2,opt,name=beneficiaryBank,proto3" json:"beneficiaryBank,omitempty"`
	DateCreated            string `protobuf:"bytes,3,opt,name=dateCreated,proto3" json:"dateCreated,omitempty"`
	DateModified           string `protobuf:"bytes,4,opt,name=dateModified,proto3" json:"dateModified,omitempty"`
	CreatedBy              string `protobuf:"bytes,5,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	ReviewerName           string `protobuf:"bytes,6,opt,name=reviewerName,proto3" json:"reviewerName,omitempty"`
	Currency               string `protobuf:"bytes,7,opt,name=currency,proto3" json:"currency,omitempty"`
	BeneficiaryCountryName string `protobuf:"bytes,8,opt,name=beneficiaryCountryName,proto3" json:"beneficiaryCountryName,omitempty"`
	Status                 string `protobuf:"bytes,50,opt,name=status,proto3" json:"status,omitempty"`
	Custom                 string `protobuf:"bytes,51,opt,name=custom,proto3" json:"custom,omitempty"`
}

func (x *TaskListRequest_TaskListFilter) Reset() {
	*x = TaskListRequest_TaskListFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskListRequest_TaskListFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskListRequest_TaskListFilter) ProtoMessage() {}

func (x *TaskListRequest_TaskListFilter) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskListRequest_TaskListFilter.ProtoReflect.Descriptor instead.
func (*TaskListRequest_TaskListFilter) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{31, 0}
}

func (x *TaskListRequest_TaskListFilter) GetBeneficiaryCountryCode() string {
	if x != nil {
		return x.BeneficiaryCountryCode
	}
	return ""
}

func (x *TaskListRequest_TaskListFilter) GetBeneficiaryBank() string {
	if x != nil {
		return x.BeneficiaryBank
	}
	return ""
}

func (x *TaskListRequest_TaskListFilter) GetDateCreated() string {
	if x != nil {
		return x.DateCreated
	}
	return ""
}

func (x *TaskListRequest_TaskListFilter) GetDateModified() string {
	if x != nil {
		return x.DateModified
	}
	return ""
}

func (x *TaskListRequest_TaskListFilter) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *TaskListRequest_TaskListFilter) GetReviewerName() string {
	if x != nil {
		return x.ReviewerName
	}
	return ""
}

func (x *TaskListRequest_TaskListFilter) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *TaskListRequest_TaskListFilter) GetBeneficiaryCountryName() string {
	if x != nil {
		return x.BeneficiaryCountryName
	}
	return ""
}

func (x *TaskListRequest_TaskListFilter) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TaskListRequest_TaskListFilter) GetCustom() string {
	if x != nil {
		return x.Custom
	}
	return ""
}

type DataListRequest_DataListFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeneficiaryCountry string `protobuf:"bytes,1,opt,name=beneficiaryCountry,proto3" json:"beneficiaryCountry,omitempty"`
	BeneficiaryBank    string `protobuf:"bytes,2,opt,name=beneficiaryBank,proto3" json:"beneficiaryBank,omitempty"`
	DateCreatedFrom    string `protobuf:"bytes,3,opt,name=dateCreatedFrom,proto3" json:"dateCreatedFrom,omitempty"`
	DateCreatedTo      string `protobuf:"bytes,8,opt,name=dateCreatedTo,proto3" json:"dateCreatedTo,omitempty"`
	DateModified       string `protobuf:"bytes,4,opt,name=dateModified,proto3" json:"dateModified,omitempty"`
	CreatedBy          string `protobuf:"bytes,5,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	// string reviewerName = 6;
	Currency      string `protobuf:"bytes,7,opt,name=currency,proto3" json:"currency,omitempty"`
	Status        string `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	TransactionId string `protobuf:"bytes,10,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
	TicketNumber  string `protobuf:"bytes,11,opt,name=ticketNumber,proto3" json:"ticketNumber,omitempty"`
	Custom        string `protobuf:"bytes,50,opt,name=custom,proto3" json:"custom,omitempty"`
}

func (x *DataListRequest_DataListFilter) Reset() {
	*x = DataListRequest_DataListFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataListRequest_DataListFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataListRequest_DataListFilter) ProtoMessage() {}

func (x *DataListRequest_DataListFilter) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataListRequest_DataListFilter.ProtoReflect.Descriptor instead.
func (*DataListRequest_DataListFilter) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{36, 0}
}

func (x *DataListRequest_DataListFilter) GetBeneficiaryCountry() string {
	if x != nil {
		return x.BeneficiaryCountry
	}
	return ""
}

func (x *DataListRequest_DataListFilter) GetBeneficiaryBank() string {
	if x != nil {
		return x.BeneficiaryBank
	}
	return ""
}

func (x *DataListRequest_DataListFilter) GetDateCreatedFrom() string {
	if x != nil {
		return x.DateCreatedFrom
	}
	return ""
}

func (x *DataListRequest_DataListFilter) GetDateCreatedTo() string {
	if x != nil {
		return x.DateCreatedTo
	}
	return ""
}

func (x *DataListRequest_DataListFilter) GetDateModified() string {
	if x != nil {
		return x.DateModified
	}
	return ""
}

func (x *DataListRequest_DataListFilter) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *DataListRequest_DataListFilter) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DataListRequest_DataListFilter) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DataListRequest_DataListFilter) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *DataListRequest_DataListFilter) GetTicketNumber() string {
	if x != nil {
		return x.TicketNumber
	}
	return ""
}

func (x *DataListRequest_DataListFilter) GetCustom() string {
	if x != nil {
		return x.Custom
	}
	return ""
}

type RemittanceTemplateListRequest_RemittanceTemplateListFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeneficiaryCountryCode string `protobuf:"bytes,1,opt,name=beneficiaryCountryCode,proto3" json:"beneficiaryCountryCode,omitempty"`
	BeneficiaryBank        string `protobuf:"bytes,2,opt,name=beneficiaryBank,proto3" json:"beneficiaryBank,omitempty"`
}

func (x *RemittanceTemplateListRequest_RemittanceTemplateListFilter) Reset() {
	*x = RemittanceTemplateListRequest_RemittanceTemplateListFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swift_payload_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemittanceTemplateListRequest_RemittanceTemplateListFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemittanceTemplateListRequest_RemittanceTemplateListFilter) ProtoMessage() {}

func (x *RemittanceTemplateListRequest_RemittanceTemplateListFilter) ProtoReflect() protoreflect.Message {
	mi := &file_swift_payload_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemittanceTemplateListRequest_RemittanceTemplateListFilter.ProtoReflect.Descriptor instead.
func (*RemittanceTemplateListRequest_RemittanceTemplateListFilter) Descriptor() ([]byte, []int) {
	return file_swift_payload_proto_rawDescGZIP(), []int{64, 0}
}

func (x *RemittanceTemplateListRequest_RemittanceTemplateListFilter) GetBeneficiaryCountryCode() string {
	if x != nil {
		return x.BeneficiaryCountryCode
	}
	return ""
}

func (x *RemittanceTemplateListRequest_RemittanceTemplateListFilter) GetBeneficiaryBank() string {
	if x != nil {
		return x.BeneficiaryBank
	}
	return ""
}

var File_swift_payload_proto protoreflect.FileDescriptor

var file_swift_payload_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x77, 0x69, 0x66, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x73, 0x77, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x13, 0x73, 0x77, 0x69, 0x66, 0x74, 0x5f, 0x67,
	0x6f, 0x72, 0x6d, 0x5f, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x6d, 0x77,
	0x69, 0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7c, 0x0a, 0x12, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x22, 0xec, 0x04, 0x0a, 0x04, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64,
	0x42, 0x79, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10,
	0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44,
	0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64,
	0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x61,
	0x73, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x61,
	0x73, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xca, 0x22, 0x0a, 0x16, 0x53, 0x77, 0x69,
	0x66, 0x74, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4d,
	0x41, 0x49, 0x4e, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x49,
	0x4e, 0x12, 0x34, 0x0a, 0x15, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x46,
	0x45, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x12, 0x38, 0x0a, 0x17, 0x49, 0x41, 0x5f, 0x46, 0x45,
	0x45, 0x5f, 0x4f, 0x55, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4d, 0x41,
	0x49, 0x4e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x49, 0x41, 0x5f, 0x46, 0x45, 0x45,
	0x5f, 0x4f, 0x55, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x49,
	0x4e, 0x12, 0x36, 0x0a, 0x16, 0x49, 0x41, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x4f, 0x55, 0x52, 0x5f,
	0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x49, 0x41, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x4f, 0x55, 0x52, 0x5f, 0x41, 0x4d,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x4c, 0x5f,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x47,
	0x4c, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x12, 0x26, 0x0a, 0x0e, 0x47, 0x4c, 0x5f,
	0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x47, 0x4c, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x49,
	0x4e, 0x12, 0x30, 0x0a, 0x13, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45,
	0x4e, 0x43, 0x59, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4d,
	0x41, 0x49, 0x4e, 0x12, 0x38, 0x0a, 0x17, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x47, 0x4c, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x43, 0x55, 0x52,
	0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x47, 0x4c, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x12, 0x38, 0x0a,
	0x17, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x49, 0x41, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f,
	0x49, 0x41, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x45, 0x45, 0x5f, 0x44,
	0x45, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x46, 0x45, 0x45, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f,
	0x55, 0x4e, 0x54, 0x12, 0x2c, 0x0a, 0x11, 0x46, 0x45, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49,
	0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x46, 0x45, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e,
	0x54, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x43, 0x59, 0x5f, 0x46, 0x45, 0x45, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f,
	0x46, 0x45, 0x45, 0x12, 0x30, 0x0a, 0x13, 0x46, 0x45, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x46, 0x45, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x12, 0x3a, 0x0a, 0x18, 0x46, 0x45, 0x45, 0x5f, 0x44, 0x45, 0x42,
	0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x46, 0x45, 0x45, 0x5f, 0x44, 0x45, 0x42,
	0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x12, 0x3c, 0x0a, 0x19, 0x46, 0x45, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f,
	0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x46, 0x45, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54,
	0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x12,
	0x3e, 0x0a, 0x1a, 0x46, 0x45, 0x45, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x43, 0x55, 0x52,
	0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1a, 0x46, 0x45, 0x45, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x43,
	0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x12,
	0x32, 0x0a, 0x14, 0x46, 0x45, 0x45, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x46,
	0x45, 0x45, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x12, 0x36, 0x0a, 0x16, 0x44, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x41, 0x4e, 0x4b,
	0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x44, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x44,
	0x45, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x12, 0x26, 0x0a, 0x0e, 0x4e,
	0x4f, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x4e, 0x4f, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x12, 0x36, 0x0a, 0x16, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x41, 0x50, 0x5f,
	0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x41, 0x50, 0x5f, 0x43, 0x52,
	0x45, 0x44, 0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x12, 0x34, 0x0a, 0x15, 0x52,
	0x41, 0x54, 0x45, 0x5f, 0x47, 0x41, 0x50, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x4d,
	0x4f, 0x55, 0x4e, 0x54, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x52, 0x41, 0x54, 0x45,
	0x5f, 0x47, 0x41, 0x50, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e,
	0x54, 0x12, 0x24, 0x0a, 0x0d, 0x4e, 0x4f, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x41, 0x4d, 0x4f, 0x55,
	0x4e, 0x54, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4e, 0x4f, 0x53, 0x54, 0x52, 0x4f,
	0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x12, 0x4a, 0x0a, 0x20, 0x43, 0x52, 0x45, 0x44, 0x49,
	0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4e, 0x4f, 0x53, 0x54, 0x52,
	0x4f, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x20, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x43, 0x59, 0x5f, 0x4e, 0x4f, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x5f, 0x42,
	0x41, 0x4e, 0x4b, 0x12, 0x42, 0x0a, 0x1c, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x49, 0x41, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x5f, 0x42,
	0x41, 0x4e, 0x4b, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x43, 0x52, 0x45, 0x44, 0x49,
	0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x49, 0x41, 0x5f, 0x44, 0x45,
	0x53, 0x54, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x41, 0x5f, 0x46, 0x45,
	0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x49, 0x41, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x12,
	0x30, 0x0a, 0x13, 0x49, 0x41, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f,
	0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x49, 0x41,
	0x5f, 0x46, 0x45, 0x45, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e,
	0x54, 0x12, 0x32, 0x0a, 0x14, 0x47, 0x4c, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x44,
	0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x47, 0x4c, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x41,
	0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x52, 0x41,
	0x54, 0x45, 0x5f, 0x42, 0x55, 0x59, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x4f,
	0x4f, 0x4b, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x55, 0x59, 0x12, 0x26, 0x0a, 0x0e, 0x42,
	0x4f, 0x4f, 0x4b, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x53,
	0x45, 0x4c, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x55, 0x59, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x55, 0x59, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x12,
	0x26, 0x0a, 0x0e, 0x47, 0x4c, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x47, 0x4c, 0x5f, 0x46, 0x45, 0x45, 0x5f,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x45, 0x4d, 0x41, 0x52,
	0x4b, 0x32, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x45, 0x4d, 0x41, 0x52, 0x4b,
	0x32, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x45, 0x4d, 0x41, 0x52, 0x4b, 0x33, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x52, 0x45, 0x4d, 0x41, 0x52, 0x4b, 0x33, 0x12, 0x24, 0x0a, 0x0d, 0x54,
	0x45, 0x4c, 0x4c, 0x45, 0x52, 0x49, 0x44, 0x5f, 0x4b, 0x43, 0x42, 0x4f, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x54, 0x45, 0x4c, 0x4c, 0x45, 0x52, 0x49, 0x44, 0x5f, 0x4b, 0x43, 0x42,
	0x4f, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12,
	0x20, 0x0a, 0x0b, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x41, 0x52, 0x54, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x41, 0x52,
	0x54, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x12, 0x30, 0x0a, 0x13, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x1e, 0x0a,
	0x0a, 0x4e, 0x4f, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x42, 0x49, 0x43, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x4e, 0x4f, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x42, 0x49, 0x43, 0x12, 0x26, 0x0a,
	0x0e, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x12, 0x42, 0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x12, 0x22, 0x0a,
	0x0c, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x18, 0x2e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x53, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x12, 0x34, 0x0a, 0x15, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59,
	0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x42, 0x41,
	0x4e, 0x4b, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x34, 0x0a, 0x15, 0x42, 0x45, 0x4e, 0x45, 0x46,
	0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49,
	0x41, 0x52, 0x59, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x12, 0x3a, 0x0a,
	0x18, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x42, 0x41, 0x4e,
	0x4b, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x18, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x42, 0x41, 0x4e,
	0x4b, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x12, 0x34, 0x0a, 0x15, 0x42, 0x45, 0x4e,
	0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x43, 0x49,
	0x54, 0x59, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49,
	0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x43, 0x49, 0x54, 0x59, 0x12,
	0x44, 0x0a, 0x1d, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x42,
	0x41, 0x4e, 0x4b, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49,
	0x41, 0x52, 0x59, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x30, 0x0a, 0x13, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43,
	0x49, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x34, 0x0a, 0x15, 0x42, 0x45, 0x4e, 0x45, 0x46,
	0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52,
	0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49,
	0x41, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x12, 0x2a, 0x0a,
	0x10, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43,
	0x49, 0x41, 0x52, 0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x12, 0x30, 0x0a, 0x13, 0x42, 0x45, 0x4e,
	0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53,
	0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49,
	0x41, 0x52, 0x59, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x12, 0x2a, 0x0a, 0x10, 0x42,
	0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x43, 0x49, 0x54, 0x59, 0x18,
	0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41,
	0x52, 0x59, 0x5f, 0x43, 0x49, 0x54, 0x59, 0x12, 0x3e, 0x0a, 0x1a, 0x42, 0x45, 0x4e, 0x45, 0x46,
	0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x4e, 0x43, 0x45, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x42, 0x45, 0x4e,
	0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50,
	0x52, 0x4f, 0x56, 0x49, 0x4e, 0x43, 0x45, 0x12, 0x32, 0x0a, 0x14, 0x42, 0x45, 0x4e, 0x45, 0x46,
	0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x43, 0x4f, 0x44, 0x45, 0x18,
	0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41,
	0x52, 0x59, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x3a, 0x0a, 0x18, 0x42,
	0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x42,
	0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x36, 0x0a, 0x16, 0x42, 0x45, 0x4e, 0x45, 0x46,
	0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43,
	0x49, 0x41, 0x52, 0x59, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12,
	0x2c, 0x0a, 0x11, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x50,
	0x48, 0x4f, 0x4e, 0x45, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x42, 0x45, 0x4e, 0x45,
	0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x12, 0x2c, 0x0a,
	0x11, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49,
	0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x12, 0x2a, 0x0a, 0x10, 0x42,
	0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x18,
	0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41,
	0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x2e, 0x0a, 0x12, 0x42, 0x45, 0x4e, 0x45, 0x46,
	0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x18, 0x40, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59,
	0x5f, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x12, 0x3a, 0x0a, 0x18, 0x42, 0x45, 0x4e, 0x45, 0x46,
	0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53,
	0x48, 0x49, 0x50, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x42, 0x45, 0x4e, 0x45, 0x46,
	0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53,
	0x48, 0x49, 0x50, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x49, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x45, 0x4e,
	0x44, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x2a, 0x0a, 0x10, 0x53,
	0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x18,
	0x43, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x49, 0x44,
	0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x45, 0x4e, 0x44, 0x45,
	0x52, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x18,
	0x44, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x49, 0x44,
	0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x12, 0x36, 0x0a, 0x16, 0x53,
	0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44,
	0x5f, 0x44, 0x41, 0x54, 0x45, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x53, 0x45, 0x4e,
	0x44, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x44,
	0x41, 0x54, 0x45, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f,
	0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53,
	0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x12, 0x20, 0x0a,
	0x0b, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x49, 0x54, 0x59, 0x18, 0x48, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x49, 0x54, 0x59, 0x12,
	0x34, 0x0a, 0x15, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x50, 0x52, 0x4f, 0x56, 0x49, 0x4e, 0x43, 0x45, 0x18, 0x49, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x4e, 0x43, 0x45, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f,
	0x50, 0x4f, 0x53, 0x54, 0x43, 0x4f, 0x44, 0x45, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x43, 0x4f, 0x44, 0x45, 0x12,
	0x30, 0x0a, 0x13, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52,
	0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x45,
	0x4e, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x42, 0x18,
	0x4c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x4f,
	0x42, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x48, 0x4f, 0x4e,
	0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x53, 0x45,
	0x4e, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12,
	0x22, 0x0a, 0x0c, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x18,
	0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x48,
	0x4f, 0x4e, 0x45, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x4d,
	0x41, 0x49, 0x4c, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x45, 0x4e, 0x44, 0x45,
	0x52, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x45, 0x4e, 0x44, 0x45,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x45,
	0x4e, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x34, 0x0a, 0x15, 0x53, 0x45, 0x4e,
	0x44, 0x45, 0x52, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x46, 0x55,
	0x4e, 0x44, 0x18, 0x51, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52,
	0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x12,
	0x2c, 0x0a, 0x11, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x42, 0x49, 0x52, 0x54, 0x48, 0x5f,
	0x43, 0x49, 0x54, 0x59, 0x18, 0x52, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x53, 0x45, 0x4e, 0x44,
	0x45, 0x52, 0x5f, 0x42, 0x49, 0x52, 0x54, 0x48, 0x5f, 0x43, 0x49, 0x54, 0x59, 0x12, 0x28, 0x0a,
	0x0f, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x18, 0x53, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x45, 0x4e, 0x44, 0x45,
	0x52, 0x5f, 0x42, 0x49, 0x52, 0x54, 0x48, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x18,
	0x54, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x42, 0x49,
	0x52, 0x54, 0x48, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x12, 0x34, 0x0a, 0x15, 0x53,
	0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x18, 0x55, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x53, 0x45, 0x4e, 0x44,
	0x45, 0x52, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x18, 0x56, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x53, 0x45,
	0x4e, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x12,
	0x3e, 0x0a, 0x1a, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x49, 0x54, 0x49, 0x5a, 0x45,
	0x4e, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x18, 0x57, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1a, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x49, 0x54, 0x49,
	0x5a, 0x45, 0x4e, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x12,
	0x24, 0x0a, 0x0d, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52,
	0x18, 0x58, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x47,
	0x45, 0x4e, 0x44, 0x45, 0x52, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x55, 0x52, 0x50, 0x4f, 0x53, 0x45, 0x18, 0x59, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x55, 0x52, 0x50, 0x4f, 0x53, 0x45, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x49, 0x43, 0x4b, 0x45,
	0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x12, 0x22, 0x0a,
	0x0c, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x18, 0x5b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x55, 0x53,
	0x45, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x45, 0x4c, 0x4c, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x18, 0x5c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x45, 0x4c, 0x4c, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x12,
	0x34, 0x0a, 0x15, 0x52, 0x45, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x45, 0x4e,
	0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x52, 0x45, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49,
	0x43, 0x49, 0x41, 0x52, 0x59, 0x12, 0x3e, 0x0a, 0x1a, 0x52, 0x45, 0x4d, 0x41, 0x52, 0x4b, 0x5f,
	0x54, 0x4f, 0x5f, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x42,
	0x41, 0x4e, 0x4b, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x52, 0x45, 0x4d, 0x41, 0x52,
	0x4b, 0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59,
	0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x22, 0xc9, 0x03, 0x0a, 0x0f, 0x53, 0x77, 0x69, 0x66, 0x74, 0x52,
	0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x12, 0x22, 0x0a, 0x0c, 0x4a, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x51,
	0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4a, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4c,
	0x5f, 0x53, 0x45, 0x51, 0x34, 0x12, 0x22, 0x0a, 0x0c, 0x4a, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4c,
	0x5f, 0x53, 0x45, 0x51, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4a, 0x4f, 0x55,
	0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x51, 0x33, 0x12, 0x22, 0x0a, 0x0c, 0x4a, 0x4f, 0x55,
	0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x51, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x4a, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x51, 0x32, 0x12, 0x20, 0x0a,
	0x0b, 0x4a, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x51, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x4a, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x51, 0x12,
	0x1e, 0x0a, 0x0a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12,
	0x24, 0x0a, 0x0d, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x49, 0x4b, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x49, 0x4b, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x12, 0x12, 0x0a,
	0x04, 0x55, 0x45, 0x54, 0x52, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x45, 0x54,
	0x52, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x49, 0x44, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x22, 0x0a, 0x0c, 0x4a, 0x4f, 0x55,
	0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x51, 0x35, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x4a, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x51, 0x35, 0x12, 0x22, 0x0a,
	0x0c, 0x4a, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x51, 0x36, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x4a, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x51,
	0x36, 0x22, 0x94, 0x01, 0x0a, 0x17, 0x53, 0x77, 0x69, 0x66, 0x74, 0x52, 0x65, 0x6d, 0x69, 0x74,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x73, 0x77, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x77, 0x69, 0x66, 0x74, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb5, 0x1b, 0x0a, 0x1d, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x4d,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4f, 0x52, 0x49, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4f, 0x52, 0x49, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x45,
	0x42, 0x49, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x12, 0x22, 0x0a, 0x0c, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x4d,
	0x4f, 0x55, 0x4e, 0x54, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x45,
	0x42, 0x49, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x12, 0x34, 0x0a, 0x15,
	0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4e,
	0x4f, 0x53, 0x54, 0x52, 0x4f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x43, 0x52, 0x45,
	0x44, 0x49, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x53, 0x54,
	0x52, 0x4f, 0x12, 0x32, 0x0a, 0x14, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x53, 0x54, 0x52, 0x4f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x4e, 0x4f, 0x53, 0x54, 0x52, 0x4f, 0x12, 0x36, 0x0a, 0x16, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54,
	0x5f, 0x4e, 0x4f, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x4e,
	0x4f, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x12, 0x34,
	0x0a, 0x15, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x5f, 0x47, 0x4c, 0x5f, 0x46, 0x45, 0x45, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x43,
	0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x47, 0x4c,
	0x5f, 0x46, 0x45, 0x45, 0x12, 0x32, 0x0a, 0x14, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x41,
	0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x47, 0x4c, 0x5f, 0x46, 0x45, 0x45, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x47, 0x4c, 0x5f, 0x46, 0x45, 0x45, 0x12, 0x2e, 0x0a, 0x12, 0x43, 0x52, 0x45, 0x44,
	0x49, 0x54, 0x5f, 0x47, 0x4c, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x47, 0x4c, 0x5f,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x12, 0x30, 0x0a, 0x13, 0x46, 0x45, 0x45, 0x5f,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x46, 0x45, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x12, 0x3a, 0x0a, 0x18, 0x46, 0x45,
	0x45, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x46, 0x45,
	0x45, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x12, 0x3c, 0x0a, 0x19, 0x46, 0x45, 0x45, 0x5f, 0x43, 0x52,
	0x45, 0x44, 0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x46, 0x45, 0x45, 0x5f, 0x43,
	0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x4e, 0x45, 0x4c, 0x12, 0x32, 0x0a, 0x14, 0x46, 0x45, 0x45, 0x5f, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x43, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x46, 0x45, 0x45, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x45, 0x4c, 0x4c,
	0x45, 0x52, 0x49, 0x44, 0x5f, 0x4b, 0x43, 0x42, 0x4f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x54, 0x45, 0x4c, 0x4c, 0x45, 0x52, 0x49, 0x44, 0x5f, 0x4b, 0x43, 0x42, 0x4f, 0x12, 0x1a,
	0x0a, 0x08, 0x42, 0x55, 0x59, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x42, 0x55, 0x59, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x45,
	0x4c, 0x4c, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53,
	0x45, 0x4c, 0x4c, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x4f, 0x4f, 0x4b,
	0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x55, 0x59, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x55, 0x59, 0x12, 0x26,
	0x0a, 0x0e, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x4c,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x52, 0x41, 0x54,
	0x45, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x45, 0x4d, 0x41, 0x52, 0x4b,
	0x32, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x45, 0x4d, 0x41, 0x52, 0x4b, 0x32,
	0x12, 0x18, 0x0a, 0x07, 0x52, 0x45, 0x4d, 0x41, 0x52, 0x4b, 0x33, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x52, 0x45, 0x4d, 0x41, 0x52, 0x4b, 0x33, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x41, 0x52, 0x54, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x41, 0x52, 0x54, 0x12, 0x18, 0x0a, 0x07,
	0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52,
	0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x4f, 0x53, 0x54,
	0x52, 0x4f, 0x5f, 0x42, 0x49, 0x43, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4e, 0x4f,
	0x53, 0x54, 0x52, 0x4f, 0x5f, 0x42, 0x49, 0x43, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x12, 0x2a, 0x0a, 0x10, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x42, 0x0a, 0x1c,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x12, 0x26, 0x0a, 0x0e, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x42,
	0x45, 0x52, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x48, 0x41, 0x52,
	0x47, 0x45, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x34, 0x0a, 0x15,
	0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x42, 0x41, 0x4e, 0x4b,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x42, 0x45, 0x4e,
	0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x12, 0x34, 0x0a, 0x15, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52,
	0x59, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x42,
	0x41, 0x4e, 0x4b, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x12, 0x3a, 0x0a, 0x18, 0x42, 0x45, 0x4e, 0x45,
	0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x41, 0x44, 0x44,
	0x52, 0x45, 0x53, 0x53, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x42, 0x45, 0x4e, 0x45,
	0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x41, 0x44, 0x44,
	0x52, 0x45, 0x53, 0x53, 0x12, 0x34, 0x0a, 0x15, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49,
	0x41, 0x52, 0x59, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x43, 0x49, 0x54, 0x59, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59,
	0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x43, 0x49, 0x54, 0x59, 0x12, 0x44, 0x0a, 0x1d, 0x42, 0x45,
	0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1d, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x42,
	0x41, 0x4e, 0x4b, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x12, 0x30, 0x0a, 0x13, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x42,
	0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x12, 0x34, 0x0a, 0x15, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x12, 0x2a, 0x0a, 0x10, 0x42, 0x45, 0x4e, 0x45,
	0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x12, 0x30, 0x0a, 0x13, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49,
	0x41, 0x52, 0x59, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x41,
	0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x12, 0x2a, 0x0a, 0x10, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49,
	0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x43, 0x49, 0x54, 0x59, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x43, 0x49,
	0x54, 0x59, 0x12, 0x3e, 0x0a, 0x1a, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x4e, 0x43, 0x45,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49,
	0x41, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x4e,
	0x43, 0x45, 0x12, 0x32, 0x0a, 0x14, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52,
	0x59, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x43, 0x4f, 0x44, 0x45, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x50, 0x4f,
	0x53, 0x54, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x3a, 0x0a, 0x18, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49,
	0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49,
	0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x12, 0x36, 0x0a, 0x16, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52,
	0x59, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f,
	0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x2c, 0x0a, 0x11, 0x42, 0x45,
	0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x18,
	0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41,
	0x52, 0x59, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x12, 0x2c, 0x0a, 0x11, 0x42, 0x45, 0x4e, 0x45,
	0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59,
	0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x12, 0x2a, 0x0a, 0x10, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49,
	0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x12, 0x2e, 0x0a, 0x12, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52,
	0x59, 0x5f, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x47, 0x45, 0x4e, 0x44,
	0x45, 0x52, 0x12, 0x3a, 0x0a, 0x18, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52,
	0x59, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x48, 0x49, 0x50, 0x18, 0x30,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52,
	0x59, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x48, 0x49, 0x50, 0x12, 0x22,
	0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4f, 0x52, 0x49, 0x18, 0x31,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4f,
	0x52, 0x49, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x45, 0x4e, 0x44,
	0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x45,
	0x4e, 0x44, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f,
	0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52,
	0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f,
	0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x12, 0x36, 0x0a, 0x16, 0x53, 0x45,
	0x4e, 0x44, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x5f,
	0x44, 0x41, 0x54, 0x45, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x53, 0x45, 0x4e, 0x44,
	0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x41,
	0x54, 0x45, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x41,
	0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x45,
	0x4e, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x12, 0x20, 0x0a, 0x0b,
	0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x49, 0x54, 0x59, 0x18, 0x38, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x49, 0x54, 0x59, 0x12, 0x34,
	0x0a, 0x15, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50,
	0x52, 0x4f, 0x56, 0x49, 0x4e, 0x43, 0x45, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x53,
	0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56,
	0x49, 0x4e, 0x43, 0x45, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x50,
	0x4f, 0x53, 0x54, 0x43, 0x4f, 0x44, 0x45, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53,
	0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x30,
	0x0a, 0x13, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x45, 0x4e,
	0x44, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x42, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x42,
	0x12, 0x2c, 0x0a, 0x11, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x53, 0x45, 0x4e,
	0x44, 0x45, 0x52, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x22,
	0x0a, 0x0c, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x18, 0x3e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x48, 0x4f,
	0x4e, 0x45, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52,
	0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x45, 0x4e,
	0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x34, 0x0a, 0x15, 0x53, 0x45, 0x4e, 0x44,
	0x45, 0x52, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x46, 0x55, 0x4e,
	0x44, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x12, 0x2c,
	0x0a, 0x11, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x42, 0x49, 0x52, 0x54, 0x48, 0x5f, 0x43,
	0x49, 0x54, 0x59, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x53, 0x45, 0x4e, 0x44, 0x45,
	0x52, 0x5f, 0x42, 0x49, 0x52, 0x54, 0x48, 0x5f, 0x43, 0x49, 0x54, 0x59, 0x12, 0x28, 0x0a, 0x0f,
	0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x18,
	0x43, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52,
	0x5f, 0x42, 0x49, 0x52, 0x54, 0x48, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x18, 0x44,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x42, 0x49, 0x52,
	0x54, 0x48, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x12, 0x34, 0x0a, 0x15, 0x53, 0x45,
	0x4e, 0x44, 0x45, 0x52, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x53, 0x45, 0x4e, 0x44, 0x45,
	0x52, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x12, 0x2c, 0x0a, 0x11, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x53, 0x45, 0x4e,
	0x44, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x12, 0x3e,
	0x0a, 0x1a, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x49, 0x54, 0x49, 0x5a, 0x45, 0x4e,
	0x53, 0x48, 0x49, 0x50, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x18, 0x47, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1a, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x49, 0x54, 0x49, 0x5a,
	0x45, 0x4e, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x12, 0x24,
	0x0a, 0x0d, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x18,
	0x48, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x47, 0x45,
	0x4e, 0x44, 0x45, 0x52, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x55, 0x52, 0x50, 0x4f, 0x53, 0x45, 0x18, 0x49, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50,
	0x55, 0x52, 0x50, 0x4f, 0x53, 0x45, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54,
	0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x12, 0x22, 0x0a, 0x0c,
	0x49, 0x4e, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x18, 0x4b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x55, 0x53, 0x45,
	0x22, 0xac, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x4a,
	0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x51, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x4a, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x51, 0x12, 0x24, 0x0a,
	0x0d, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x52,
	0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x12,
	0x1e, 0x0a, 0x0a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x22,
	0xa2, 0x01, 0x0a, 0x1e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x77, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xa2, 0x02, 0x0a, 0x18, 0x53, 0x77, 0x69, 0x66, 0x74, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x43, 0x59, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x45, 0x4e, 0x44,
	0x45, 0x52, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x12, 0x28, 0x0a, 0x0f, 0x52,
	0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x52, 0x59, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45,
	0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x52,
	0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x12, 0x2a, 0x0a,
	0x10, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43,
	0x59, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45,
	0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x48, 0x41,
	0x52, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x20, 0x0a, 0x0b, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x41, 0x52, 0x54, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x41, 0x52, 0x54, 0x12, 0x1a, 0x0a,
	0x08, 0x44, 0x45, 0x41, 0x4c, 0x43, 0x4f, 0x44, 0x45, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x44, 0x45, 0x41, 0x4c, 0x43, 0x4f, 0x44, 0x45, 0x22, 0x65, 0x0a, 0x11, 0x4b, 0x75, 0x72,
	0x73, 0x42, 0x52, 0x49, 0x45, 0x46, 0x58, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x44, 0x45, 0x41, 0x4c, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x45, 0x41, 0x4c, 0x54, 0x43, 0x55, 0x52,
	0x52, 0x45, 0x4e, 0x43, 0x59, 0x12, 0x29, 0x0a, 0x10, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52,
	0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59,
	0x22, 0x66, 0x0a, 0x14, 0x42, 0x52, 0x49, 0x47, 0x61, 0x74, 0x65, 0x42, 0x52, 0x49, 0x65, 0x66,
	0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x61, 0x6c,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x64, 0x65, 0x61, 0x6c, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x28,
	0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xdd, 0x09, 0x0a, 0x11, 0x42, 0x52, 0x49,
	0x47, 0x61, 0x74, 0x65, 0x42, 0x52, 0x49, 0x65, 0x66, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x62,
	0x74, 0x42, 0x75, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x69, 0x62, 0x74, 0x42,
	0x75, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x62, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x69, 0x62, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x42, 0x75, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x42, 0x75, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x70,
	0x72, 0x65, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x75, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x75, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x6f, 0x6f, 0x6b, 0x52, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x62, 0x6f, 0x6f, 0x6b, 0x52, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x65, 0x72, 0x31, 0x42, 0x75, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x74, 0x69, 0x65, 0x72, 0x31, 0x42, 0x75, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x69, 0x65, 0x72, 0x32, 0x42, 0x75, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x74, 0x69, 0x65, 0x72, 0x32, 0x42, 0x75, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x65, 0x72,
	0x33, 0x42, 0x75, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x69, 0x65, 0x72,
	0x33, 0x42, 0x75, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x65, 0x72, 0x34, 0x42, 0x75, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x69, 0x65, 0x72, 0x34, 0x42, 0x75, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x65, 0x72, 0x31, 0x53, 0x65, 0x6c, 0x6c, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x69, 0x65, 0x72, 0x31, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x65, 0x72, 0x32, 0x53, 0x65, 0x6c, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x74, 0x69, 0x65, 0x72, 0x32, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x65, 0x72, 0x33, 0x53, 0x65, 0x6c, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x74, 0x69, 0x65, 0x72, 0x33, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x65, 0x72, 0x34, 0x53, 0x65, 0x6c, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74,
	0x69, 0x65, 0x72, 0x34, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x69, 0x65, 0x72,
	0x31, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x42, 0x75, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x74, 0x69, 0x65, 0x72, 0x31, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x42, 0x75, 0x79,
	0x12, 0x26, 0x0a, 0x0e, 0x74, 0x69, 0x65, 0x72, 0x32, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x42,
	0x75, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x74, 0x69, 0x65, 0x72, 0x32, 0x53,
	0x70, 0x72, 0x65, 0x61, 0x64, 0x42, 0x75, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x69, 0x65, 0x72,
	0x33, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x42, 0x75, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x74, 0x69, 0x65, 0x72, 0x33, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x42, 0x75, 0x79,
	0x12, 0x26, 0x0a, 0x0e, 0x74, 0x69, 0x65, 0x72, 0x34, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x42,
	0x75, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x74, 0x69, 0x65, 0x72, 0x34, 0x53,
	0x70, 0x72, 0x65, 0x61, 0x64, 0x42, 0x75, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x69, 0x65, 0x72,
	0x31, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x74, 0x69, 0x65, 0x72, 0x31, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x53, 0x65,
	0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x69, 0x65, 0x72, 0x32, 0x53, 0x70, 0x72, 0x65, 0x61,
	0x64, 0x53, 0x65, 0x6c, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x74, 0x69, 0x65,
	0x72, 0x32, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x0f,
	0x74, 0x69, 0x65, 0x72, 0x33, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x6c, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x74, 0x69, 0x65, 0x72, 0x33, 0x53, 0x70, 0x72, 0x65,
	0x61, 0x64, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x69, 0x65, 0x72, 0x34, 0x53,
	0x70, 0x72, 0x65, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x74, 0x69, 0x65, 0x72, 0x34, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x62, 0x6e, 0x42, 0x75, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x62, 0x6e, 0x42, 0x75, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6e, 0x53, 0x65, 0x6c, 0x6c,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x62, 0x6e, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x74, 0x42, 0x75, 0x79, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x74,
	0x74, 0x42, 0x75, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x74, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x63, 0x42, 0x75, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x74, 0x63, 0x42,
	0x75, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x63, 0x53, 0x65, 0x6c, 0x6c, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x74, 0x63, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6e,
	0x42, 0x75, 0x79, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x62, 0x6e, 0x42, 0x75, 0x79, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x62, 0x6e, 0x53, 0x65, 0x6c, 0x6c, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x62, 0x6e, 0x53, 0x65, 0x6c, 0x6c, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x74, 0x42, 0x75, 0x79, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x74, 0x42, 0x75, 0x79, 0x53, 0x70, 0x72, 0x65,
	0x61, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x53, 0x70, 0x72, 0x65,
	0x61, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x74, 0x53, 0x65, 0x6c, 0x6c,
	0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x63, 0x42, 0x75, 0x79, 0x53,
	0x70, 0x72, 0x65, 0x61, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x63, 0x42,
	0x75, 0x79, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x63, 0x53, 0x65,
	0x6c, 0x6c, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x74, 0x63, 0x53, 0x65, 0x6c, 0x6c, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x62, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x62, 0x22, 0xae, 0x01, 0x0a, 0x15, 0x42, 0x52, 0x49,
	0x47, 0x61, 0x74, 0x65, 0x42, 0x52, 0x49, 0x65, 0x66, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x47, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x77, 0x69, 0x66, 0x74, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x52, 0x49, 0x47, 0x61, 0x74,
	0x65, 0x42, 0x52, 0x49, 0x65, 0x66, 0x78, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0xaf, 0x02, 0x0a, 0x13, 0x42, 0x52,
	0x49, 0x47, 0x61, 0x74, 0x65, 0x42, 0x52, 0x49, 0x65, 0x66, 0x78, 0x41, 0x64, 0x64, 0x6f, 0x6e,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x44, 0x65, 0x62,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x44, 0x65, 0x62, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x75, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x75, 0x79, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x6c,
	0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x9c, 0x01, 0x0a, 0x1b,
	0x42, 0x52, 0x49, 0x47, 0x61, 0x74, 0x65, 0x42, 0x52, 0x49, 0x65, 0x66, 0x78, 0x41, 0x64, 0x64,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x39, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x73, 0x77, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x52, 0x49, 0x47, 0x61, 0x74, 0x65, 0x42, 0x52, 0x49, 0x65, 0x66, 0x78, 0x41, 0x64,
	0x64, 0x6f, 0x6e, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc3, 0x02, 0x0a, 0x0a, 0x4b,
	0x75, 0x72, 0x73, 0x42, 0x52, 0x49, 0x45, 0x46, 0x58, 0x12, 0x23, 0x0a, 0x0d, 0x43, 0x55, 0x52,
	0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x50, 0x41, 0x49, 0x52, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x50, 0x41, 0x49, 0x52, 0x12, 0x1d,
	0x0a, 0x0a, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x31, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x31, 0x12, 0x1d, 0x0a,
	0x0a, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x32, 0x12, 0x10, 0x0a, 0x03,
	0x42, 0x55, 0x59, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x42, 0x55, 0x59, 0x12, 0x12,
	0x0a, 0x04, 0x53, 0x45, 0x4c, 0x4c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x53, 0x45,
	0x4c, 0x4c, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x12, 0x25, 0x0a, 0x0e, 0x4c, 0x41,
	0x53, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x4c, 0x41, 0x53, 0x54, 0x45, 0x53, 0x54, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x12, 0x1d, 0x0a, 0x0a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x43, 0x4f, 0x44, 0x45,
	0x12, 0x23, 0x0a, 0x0d, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x29, 0x0a, 0x10, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x22, 0x8a, 0x01, 0x0a, 0x12, 0x4b, 0x75, 0x72, 0x73, 0x42, 0x52, 0x49, 0x45, 0x46, 0x58, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x77, 0x69, 0x66,
	0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x72,
	0x73, 0x42, 0x52, 0x49, 0x45, 0x46, 0x58, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x99, 0x14,
	0x0a, 0x15, 0x53, 0x77, 0x69, 0x66, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x49, 0x43, 0x4b, 0x45,
	0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x12, 0x14, 0x0a,
	0x05, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12,
	0x30, 0x0a, 0x13, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x4f, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x42, 0x49, 0x43, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4e, 0x4f, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x42, 0x49,
	0x43, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x41, 0x4d, 0x4f,
	0x55, 0x4e, 0x54, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x41, 0x4d, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x53, 0x45, 0x4e, 0x44, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x54, 0x41,
	0x4c, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x43, 0x59, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x43,
	0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45,
	0x4e, 0x43, 0x59, 0x5f, 0x54, 0x52, 0x58, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43,
	0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x54, 0x52, 0x58, 0x12, 0x24, 0x0a, 0x0d, 0x42,
	0x41, 0x53, 0x45, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43,
	0x59, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x53, 0x5f, 0x43, 0x55, 0x52,
	0x52, 0x45, 0x4e, 0x43, 0x59, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x48, 0x41,
	0x52, 0x47, 0x45, 0x53, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x12, 0x16, 0x0a,
	0x06, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41,
	0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x54, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41,
	0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x54, 0x12, 0x18, 0x0a,
	0x07, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x53, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x53, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x48, 0x41, 0x52, 0x47,
	0x45, 0x53, 0x5f, 0x4f, 0x55, 0x52, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x48,
	0x41, 0x52, 0x47, 0x45, 0x53, 0x5f, 0x4f, 0x55, 0x52, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x58, 0x5f,
	0x53, 0x50, 0x52, 0x45, 0x41, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x58,
	0x5f, 0x53, 0x50, 0x52, 0x45, 0x41, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x53, 0x54, 0x49, 0x4d,
	0x41, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x45, 0x53, 0x54, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x12,
	0x1a, 0x0a, 0x08, 0x42, 0x55, 0x59, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x42, 0x55, 0x59, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x12, 0x1c, 0x0a, 0x09, 0x53,
	0x45, 0x4c, 0x4c, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x53, 0x45, 0x4c, 0x4c, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x45, 0x42,
	0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x12, 0x34, 0x0a, 0x15, 0x44, 0x45, 0x42, 0x49, 0x54,
	0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4e,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x4d,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x12, 0x38, 0x0a,
	0x17, 0x49, 0x41, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x4f, 0x55, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x49, 0x41, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x4f, 0x55, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x12, 0x36, 0x0a, 0x16, 0x49, 0x41, 0x5f, 0x46, 0x45,
	0x45, 0x5f, 0x4f, 0x55, 0x52, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x49,
	0x4e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x49, 0x41, 0x5f, 0x46, 0x45, 0x45, 0x5f,
	0x4f, 0x55, 0x52, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x12,
	0x1e, 0x0a, 0x0a, 0x47, 0x4c, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x47, 0x4c, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x12,
	0x26, 0x0a, 0x0e, 0x47, 0x4c, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x49,
	0x4e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x47, 0x4c, 0x5f, 0x41, 0x4d, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x12, 0x30, 0x0a, 0x13, 0x44, 0x45, 0x42, 0x49, 0x54,
	0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x12, 0x38, 0x0a, 0x17, 0x43, 0x52, 0x45,
	0x44, 0x49, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x47, 0x4c, 0x5f,
	0x4d, 0x41, 0x49, 0x4e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x43, 0x52, 0x45, 0x44,
	0x49, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x47, 0x4c, 0x5f, 0x4d,
	0x41, 0x49, 0x4e, 0x12, 0x38, 0x0a, 0x17, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x49, 0x41, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x43, 0x55, 0x52,
	0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x49, 0x41, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x12, 0x2a, 0x0a,
	0x10, 0x46, 0x45, 0x45, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e,
	0x54, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x46, 0x45, 0x45, 0x5f, 0x44, 0x45, 0x42,
	0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x12, 0x26, 0x0a, 0x0e, 0x47, 0x4c, 0x5f,
	0x46, 0x45, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x47, 0x4c, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x43, 0x59, 0x5f, 0x46, 0x45, 0x45, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f,
	0x46, 0x45, 0x45, 0x12, 0x2c, 0x0a, 0x11, 0x46, 0x45, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49,
	0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x46, 0x45, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e,
	0x54, 0x12, 0x26, 0x0a, 0x0e, 0x4e, 0x4f, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4e, 0x4f, 0x53, 0x54, 0x52,
	0x4f, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x12, 0x24, 0x0a, 0x0d, 0x4e, 0x4f, 0x53,
	0x54, 0x52, 0x4f, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x4e, 0x4f, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x12,
	0x32, 0x0a, 0x14, 0x49, 0x41, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54,
	0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x49,
	0x41, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f,
	0x55, 0x4e, 0x54, 0x12, 0x4a, 0x0a, 0x20, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4e, 0x4f, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x44, 0x45,
	0x53, 0x54, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x43,
	0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4e,
	0x4f, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x12,
	0x28, 0x0a, 0x0f, 0x4e, 0x4f, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x43, 0x59, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4e, 0x4f, 0x53, 0x54, 0x52, 0x4f,
	0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x12, 0x30, 0x0a, 0x13, 0x4e, 0x4f, 0x53,
	0x54, 0x52, 0x4f, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x4e, 0x4f, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x26, 0x0a, 0x0e, 0x49,
	0x41, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x49, 0x41, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x12, 0x36, 0x0a, 0x16, 0x44, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x41, 0x4e, 0x4b,
	0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x44, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x44,
	0x45, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x12, 0x34, 0x0a, 0x15, 0x52,
	0x41, 0x54, 0x45, 0x5f, 0x47, 0x41, 0x50, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x4d,
	0x4f, 0x55, 0x4e, 0x54, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x52, 0x41, 0x54, 0x45,
	0x5f, 0x47, 0x41, 0x50, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e,
	0x54, 0x12, 0x36, 0x0a, 0x16, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x41, 0x50, 0x5f, 0x43, 0x52,
	0x45, 0x44, 0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x41, 0x50, 0x5f, 0x43, 0x52, 0x45, 0x44,
	0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x12, 0x42, 0x0a, 0x1c, 0x43, 0x52, 0x45,
	0x44, 0x49, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x49, 0x41, 0x5f,
	0x44, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1c, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x49, 0x41, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x12, 0x30, 0x0a,
	0x13, 0x49, 0x41, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x4d,
	0x4f, 0x55, 0x4e, 0x54, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x49, 0x41, 0x5f, 0x46,
	0x45, 0x45, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x12,
	0x32, 0x0a, 0x14, 0x47, 0x4c, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54,
	0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x47,
	0x4c, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f,
	0x55, 0x4e, 0x54, 0x12, 0x38, 0x0a, 0x17, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x43, 0x55, 0x52,
	0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x41, 0x50, 0x18, 0x30,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x43, 0x59, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x41, 0x50, 0x12, 0x3a, 0x0a,
	0x18, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x41, 0x50, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x18, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x41, 0x50, 0x12, 0x22, 0x0a, 0x0c, 0x55, 0x52, 0x4c,
	0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x55, 0x52, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x12, 0x2e, 0x0a,
	0x12, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x52, 0x45, 0x43, 0x45, 0x49,
	0x56, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x12, 0x34, 0x0a,
	0x15, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x4e, 0x4f, 0x53, 0x54, 0x52, 0x4f, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x43, 0x52,
	0x45, 0x44, 0x49, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x53,
	0x54, 0x52, 0x4f, 0x12, 0x32, 0x0a, 0x14, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x41, 0x4d,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x53, 0x54, 0x52, 0x4f, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54,
	0x5f, 0x4e, 0x4f, 0x53, 0x54, 0x52, 0x4f, 0x12, 0x36, 0x0a, 0x16, 0x43, 0x52, 0x45, 0x44, 0x49,
	0x54, 0x5f, 0x4e, 0x4f, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43,
	0x59, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f,
	0x4e, 0x4f, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x12,
	0x1e, 0x0a, 0x0a, 0x46, 0x45, 0x45, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x45, 0x45, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x12,
	0x34, 0x0a, 0x15, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x47, 0x4c, 0x5f, 0x46, 0x45, 0x45, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x47,
	0x4c, 0x5f, 0x46, 0x45, 0x45, 0x12, 0x32, 0x0a, 0x14, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f,
	0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x47, 0x4c, 0x5f, 0x46, 0x45, 0x45, 0x18, 0x39, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x47, 0x4c, 0x5f, 0x46, 0x45, 0x45, 0x12, 0x2e, 0x0a, 0x12, 0x43, 0x52, 0x45,
	0x44, 0x49, 0x54, 0x5f, 0x47, 0x4c, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x18,
	0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x47, 0x4c,
	0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x22, 0xcf, 0x02, 0x0a, 0x0f, 0x65, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x62, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x69, 0x6e, 0x42, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x69, 0x6e, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x22, 0x0a,
	0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x78, 0x42, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x78, 0x42, 0x61, 0x6e,
	0x6b, 0x12, 0x30, 0x0a, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x67, 0x65, 0x78, 0x42, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x65, 0x78, 0x42,
	0x61, 0x6e, 0x6b, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x69, 0x6e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x78, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x78,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x65, 0x78, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x65, 0x78, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xda, 0x01, 0x0a, 0x11,
	0x53, 0x77, 0x69, 0x66, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x45, 0x53, 0x50, 0x4f,
	0x4e, 0x53, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x12, 0x3b, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x41, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x73, 0x77, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x77, 0x69, 0x66, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x44, 0x41, 0x54, 0x41,
	0x12, 0x16, 0x0a, 0x06, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x22, 0x98, 0x01, 0x0a, 0x19, 0x53, 0x77, 0x69,
	0x66, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x77, 0x69, 0x66, 0x74,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x77, 0x69, 0x66,
	0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x4b, 0x0a, 0x1d, 0x53, 0x77, 0x69, 0x66, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43,
	0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52,
	0x22, 0xe4, 0x01, 0x0a, 0x1a, 0x53, 0x77, 0x69, 0x66, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x38, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x41, 0x52, 0x54, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x41, 0x52, 0x54, 0x12, 0x38, 0x0a, 0x17, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52,
	0x50, 0x41, 0x52, 0x54, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x50,
	0x41, 0x52, 0x54, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x41,
	0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x52, 0x45, 0x43,
	0x45, 0x49, 0x56, 0x45, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x12, 0x2a, 0x0a, 0x10, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x22, 0xf8, 0x01, 0x0a, 0x16, 0x53, 0x77, 0x69, 0x66,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x45, 0x53, 0x50, 0x4f,
	0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x12, 0x12, 0x0a, 0x04,
	0x55, 0x45, 0x54, 0x52, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x45, 0x54, 0x52,
	0x12, 0x40, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x41, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x73, 0x77, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x77, 0x69, 0x66, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x44, 0x41,
	0x54, 0x41, 0x22, 0xa2, 0x01, 0x0a, 0x1e, 0x53, 0x77, 0x69, 0x66, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x77, 0x69, 0x66, 0x74, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x77, 0x69, 0x66, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc7, 0x02, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x44, 0x72, 0x61, 0x66, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x44, 0x72, 0x61, 0x66, 0x74, 0x12,
	0x2c, 0x0a, 0x11, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x62, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3b, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x77,
	0x69, 0x66, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5b, 0x0a, 0x14, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x77, 0x69, 0x66, 0x74,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x77, 0x69, 0x66,
	0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x14, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0xee, 0x02, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x56, 0x0a, 0x11, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x77,
	0x69, 0x66, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x77, 0x69, 0x66, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x55, 0x0a, 0x12, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x77, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x77, 0x69, 0x66, 0x74, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x5a, 0x0a, 0x14, 0x73, 0x77, 0x69, 0x66, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x77, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x77, 0x69, 0x66, 0x74, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x12, 0x73, 0x77, 0x69, 0x66, 0x74, 0x52, 0x65,
	0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x55, 0x0a, 0x15, 0x73,
	0x77, 0x69, 0x66, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x77, 0x69,
	0x66, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x77,
	0x69, 0x66, 0x74, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x73,
	0x77, 0x69, 0x66, 0x74, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x22, 0xb7, 0x01, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x49, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x77, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x61,
	0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x77, 0x69, 0x66, 0x74,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x34, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x77, 0x69, 0x66, 0x74, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x88, 0x01, 0x0a,
	0x12, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x77, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc9, 0x01, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x4c, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0x92, 0x41, 0x31, 0x32, 0x2f, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x20, 0x27, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x27, 0x2c, 0x20, 0x27,
	0x72, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x27, 0x2c, 0x20, 0x27, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x27, 0x2c, 0x20, 0x27, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x27, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x77, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xee,
	0x06, 0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x73, 0x77, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x77, 0x69, 0x66, 0x74, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x65, 0x70, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x54, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32, 0x39, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x70, 0x65, 0x72, 0x20, 0x70, 0x61, 0x67,
	0x65, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x20, 0x27, 0x2d, 0x31, 0x27, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x55,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x41, 0x92, 0x41,
	0x3e, 0x32, 0x3c, 0x70, 0x61, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x74,
	0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x27, 0x2d, 0x31, 0x27, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x61, 0x67, 0x65, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x31, 0x0a, 0x03, 0x64, 0x69, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x77, 0x69, 0x66, 0x74, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x48, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73,
	0x77, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x6d, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x6e, 0x6c, 0x79, 0x1a, 0xfe,
	0x02, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x36, 0x0a, 0x16, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x42,
	0x61, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x36, 0x0a, 0x16, 0x62, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x22,
	0xf0, 0x04, 0x0a, 0x13, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x73, 0x77, 0x69, 0x66, 0x74, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x77,
	0x69, 0x66, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x54, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x3e, 0x92, 0x41,
	0x3b, 0x32, 0x39, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x70, 0x65,
	0x72, 0x20, 0x70, 0x61, 0x67, 0x65, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x27, 0x2d, 0x31, 0x27, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x55, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x32, 0x3c, 0x70, 0x61, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x27,
	0x2d, 0x31, 0x27, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20,
	0x70, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x31,
	0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x77,
	0x69, 0x66, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x64, 0x69,
	0x72, 0x12, 0x48, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x73, 0x77, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x6e, 0x6c,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x4f,
	0x6e, 0x6c, 0x79, 0x12, 0x4d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x73, 0x77, 0x69, 0x66, 0x74, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x22, 0x2e, 0x0a, 0x07, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x08, 0x0a,
	0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x70, 0x64, 0x66, 0x10, 0x01,
	0x12, 0x07, 0x0a, 0x03, 0x78, 0x6c, 0x73, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x63, 0x73, 0x76,
	0x10, 0x03, 0x22, 0xcc, 0x01, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x77, 0x69, 0x66,
	0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x73, 0x77, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x2b, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x22, 0x88,
	0x01, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x77, 0x69, 0x66, 0x74, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xfc, 0x05, 0x0a, 0x0f, 0x44, 0x61,
	0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x3e, 0x92, 0x41,
	0x3b, 0x32, 0x39, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x70, 0x65,
	0x72, 0x20, 0x70, 0x61, 0x67, 0x65, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x27, 0x2d, 0x31, 0x27, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x55, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x32, 0x3c, 0x70, 0x61, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x27,
	0x2d, 0x31, 0x27, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20,
	0x70, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x31,
	0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x77,
	0x69, 0x66, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x64, 0x69,
	0x72, 0x12, 0x48, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x73, 0x77, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x1a, 0x92, 0x03, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x72, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x42, 0x61, 0x6e, 0x6b,
	0x12, 0x28, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x46,
	0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f,
	0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x22, 0xbe, 0x03, 0x0a, 0x17, 0x44, 0x61, 0x74,
	0x61, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32, 0x39, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x20,
	0x64, 0x61, 0x74, 0x61, 0x20, 0x70, 0x65, 0x72, 0x20, 0x70, 0x61, 0x67, 0x65, 0x2e, 0x20, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x27, 0x2d, 0x31,
	0x27, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x55, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x32, 0x3c, 0x70,
	0x61, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65,
	0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x27, 0x2d, 0x31, 0x27, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x31, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x77, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x48, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x77, 0x69, 0x66, 0x74,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x4d, 0x0a, 0x0a, 0x66, 0x69,
	0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d,
	0x2e, 0x73, 0x77, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x66,
	0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0xd9, 0x01, 0x0a, 0x10, 0x44, 0x61,
	0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x77, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x44, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x77, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2b, 0x0a, 0x11, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61,
	0x74, 0x61, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x64, 0x61, 0x74, 0x61,
	0x49, 0x44, 0x22, 0x95, 0x01, 0x0a, 0x12, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x77,
	0x69, 0x66, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4e, 0x0a, 0x0f, 0x53, 0x61,
	0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x77,
	0x69, 0x66, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x93, 0x01, 0x0a, 0x10, 0x53,
	0x61, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x73, 0x77, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x5b, 0x0a, 0x21, 0x42, 0x52, 0x49, 0x47, 0x61, 0x74, 0x65, 0x48, 0x61, 0x72, 0x64, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x6a, 0x0a,
	0x1a, 0x42, 0x52, 0x49, 0x47, 0x61, 0x74, 0x65, 0x48, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x22, 0x42, 0x52,
	0x49, 0x47, 0x61, 0x74, 0x65, 0x48, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x77, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x52, 0x49, 0x47, 0x61, 0x74, 0x65, 0x48, 0x61, 0x72,
	0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x17, 0x0a, 0x15, 0x4e, 0x6f, 0x73, 0x74, 0x72, 0x6f,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x70, 0x0a, 0x16, 0x4e, 0x6f, 0x73, 0x74, 0x72, 0x6f, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x85, 0x01, 0x0a, 0x1b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x3a, 0x0a, 0x20, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x53, 0x69, 0x6e, 0x67, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x22, 0xaa, 0x01, 0x0a, 0x21, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x69, 0x6e,
	0x67, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x41, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x73, 0x77, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x3a, 0x0a, 0x1e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x73, 0x22, 0xf1,
	0x01, 0x0a, 0x1f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x77, 0x69,
	0x66, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x77, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x7b, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x46, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x24, 0x0a, 0x12, 0x45, 0x78, 0x65, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0xca, 0x02, 0x0a, 0x12, 0x45, 0x78, 0x65, 0x63, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x6a, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x6a, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x73, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x62, 0x69, 0x74,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x62, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x62, 0x69, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0x74, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x62, 0x69, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x62, 0x69,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x10, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x22, 0xfb, 0x0d, 0x0a, 0x15, 0x53, 0x77, 0x69, 0x66, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a,
	0x0e, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x41, 0x4b, 0x45, 0x52, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x4d, 0x41, 0x4b, 0x45, 0x52, 0x12, 0x2c, 0x0a, 0x11, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d,
	0x45, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x52, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f,
	0x56, 0x45, 0x52, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x44,
	0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x12,
	0x22, 0x0a, 0x0c, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x44,
	0x41, 0x54, 0x45, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x12,
	0x1e, 0x0a, 0x0a, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x12,
	0x1e, 0x0a, 0x0a, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x12,
	0x16, 0x0a, 0x06, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x12, 0x2a, 0x0a, 0x10, 0x41, 0x4d, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x54, 0x45, 0x52, 0x42, 0x49, 0x4c, 0x41, 0x4e, 0x47, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x45, 0x52, 0x42, 0x49, 0x4c,
	0x41, 0x4e, 0x47, 0x12, 0x10, 0x0a, 0x03, 0x46, 0x45, 0x45, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x46, 0x45, 0x45, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x45, 0x45, 0x5f, 0x54, 0x45, 0x52,
	0x42, 0x49, 0x4c, 0x41, 0x4e, 0x47, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x46, 0x45,
	0x45, 0x5f, 0x54, 0x45, 0x52, 0x42, 0x49, 0x4c, 0x41, 0x4e, 0x47, 0x12, 0x16, 0x0a, 0x06, 0x52,
	0x45, 0x4d, 0x41, 0x52, 0x4b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x45, 0x4d,
	0x41, 0x52, 0x4b, 0x12, 0x32, 0x0a, 0x14, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x12, 0x30, 0x0a, 0x13, 0x44, 0x45, 0x42, 0x49, 0x54,
	0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x12, 0x3c, 0x0a, 0x19, 0x44, 0x45, 0x42,
	0x49, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x45,
	0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x44, 0x45,
	0x42, 0x49, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x48, 0x4f, 0x4c, 0x44,
	0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x45, 0x42, 0x49, 0x54,
	0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x12, 0x30, 0x0a, 0x13, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45,
	0x4e, 0x43, 0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x12, 0x34, 0x0a, 0x15, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x12, 0x32, 0x0a, 0x14, 0x43,
	0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x41, 0x4c,
	0x49, 0x41, 0x53, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x43, 0x52, 0x45, 0x44, 0x49,
	0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x12,
	0x3e, 0x0a, 0x1a, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1a, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x12,
	0x2a, 0x0a, 0x10, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x52, 0x45, 0x44, 0x49,
	0x54, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x12, 0x2c, 0x0a, 0x11, 0x43,
	0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x53, 0x57, 0x49, 0x46, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x53,
	0x57, 0x49, 0x46, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x32, 0x0a, 0x14, 0x43, 0x52, 0x45,
	0x44, 0x49, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x12, 0x24, 0x0a,
	0x0d, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x52, 0x41, 0x54, 0x45, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x45, 0x58, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x45, 0x41,
	0x4c, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x44, 0x45,
	0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12,
	0x24, 0x0a, 0x0d, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x4e, 0x45, 0x52,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x50, 0x41,
	0x52, 0x54, 0x4e, 0x45, 0x52, 0x12, 0x2a, 0x0a, 0x10, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d,
	0x45, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x45, 0x52, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x45,
	0x52, 0x12, 0x2c, 0x0a, 0x11, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45,
	0x4c, 0x45, 0x41, 0x53, 0x45, 0x52, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x55, 0x53,
	0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x52, 0x12,
	0x22, 0x0a, 0x0c, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x44,
	0x41, 0x54, 0x45, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x52, 0x5f,
	0x44, 0x41, 0x54, 0x45, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x50, 0x50, 0x52,
	0x4f, 0x56, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x45, 0x4c,
	0x45, 0x41, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x12,
	0x12, 0x0a, 0x04, 0x53, 0x54, 0x45, 0x50, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53,
	0x54, 0x45, 0x50, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x45, 0x54, 0x52, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x55, 0x45, 0x54, 0x52, 0x12, 0x2c, 0x0a, 0x11, 0x55, 0x53, 0x45, 0x52, 0x4e,
	0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x4a,
	0x45, 0x43, 0x54, 0x4f, 0x52, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x59,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x4f, 0x4d,
	0x50, 0x41, 0x4e, 0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x4f, 0x44,
	0x55, 0x4c, 0x45, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x4f, 0x44, 0x55, 0x4c,
	0x45, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x4e, 0x44,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53,
	0x45, 0x4e, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x34, 0x0a, 0x15, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x12,
	0x16, 0x0a, 0x06, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x4f, 0x4d, 0x4d, 0x45,
	0x4e, 0x54, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e,
	0x54, 0x22, 0xdd, 0x1e, 0x0a, 0x21, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x44, 0x12,
	0x1d, 0x0a, 0x0a, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4f, 0x52, 0x49, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x4f, 0x52, 0x49, 0x12, 0x23,
	0x0a, 0x0d, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x45, 0x42, 0x49, 0x54, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x12, 0x21, 0x0a, 0x0c, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f,
	0x55, 0x4e, 0x54, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x45, 0x42, 0x49, 0x54,
	0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x12, 0x2c, 0x0a, 0x12, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x44, 0x45, 0x42, 0x49, 0x54, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x4d, 0x41, 0x49, 0x4e, 0x12, 0x2e, 0x0a, 0x13, 0x46, 0x45, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x46, 0x45, 0x45, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x43, 0x48, 0x41,
	0x4e, 0x4e, 0x45, 0x4c, 0x12, 0x37, 0x0a, 0x18, 0x46, 0x45, 0x45, 0x5f, 0x44, 0x45, 0x42, 0x49,
	0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x46, 0x45, 0x45, 0x44, 0x45, 0x42, 0x49, 0x54,
	0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x12, 0x39, 0x0a,
	0x19, 0x46, 0x45, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x46, 0x45, 0x45, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x41, 0x4d, 0x4f, 0x55, 0x4e,
	0x54, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x12, 0x30, 0x0a, 0x14, 0x46, 0x45, 0x45, 0x5f,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x46, 0x45, 0x45, 0x43, 0x55, 0x52, 0x52, 0x45,
	0x4e, 0x43, 0x59, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x12, 0x23, 0x0a, 0x0d, 0x54, 0x45,
	0x4c, 0x4c, 0x45, 0x52, 0x49, 0x44, 0x5f, 0x4b, 0x43, 0x42, 0x4f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x54, 0x45, 0x4c, 0x4c, 0x45, 0x52, 0x49, 0x44, 0x4b, 0x43, 0x42, 0x4f, 0x12,
	0x22, 0x0a, 0x0d, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x55, 0x59,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x4f, 0x4f, 0x4b, 0x52, 0x41, 0x54, 0x45,
	0x42, 0x55, 0x59, 0x12, 0x24, 0x0a, 0x0e, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x52, 0x41, 0x54, 0x45,
	0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x4f, 0x4f,
	0x4b, 0x52, 0x41, 0x54, 0x45, 0x53, 0x45, 0x4c, 0x4c, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x45, 0x4d,
	0x41, 0x52, 0x4b, 0x32, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x45, 0x4d, 0x41,
	0x52, 0x4b, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x45, 0x4d, 0x41, 0x52, 0x4b, 0x33, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x45, 0x4d, 0x41, 0x52, 0x4b, 0x33, 0x12, 0x1b, 0x0a,
	0x09, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x44, 0x45, 0x41, 0x4c, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x41, 0x52, 0x54, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x41, 0x52, 0x54, 0x12, 0x18, 0x0a, 0x07,
	0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52,
	0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x12, 0x25, 0x0a, 0x0e, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x49, 0x44, 0x12, 0x29, 0x0a,
	0x10, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x55, 0x53, 0x45, 0x52, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x3f, 0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x52, 0x41,
	0x4e, 0x43, 0x48, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19,
	0x55, 0x53, 0x45, 0x52, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x42,
	0x52, 0x41, 0x4e, 0x43, 0x48, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x25, 0x0a, 0x0e, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52,
	0x12, 0x21, 0x0a, 0x0c, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x53, 0x54,
	0x59, 0x50, 0x45, 0x12, 0x32, 0x0a, 0x15, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41,
	0x52, 0x59, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x42,
	0x41, 0x4e, 0x4b, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x32, 0x0a, 0x15, 0x42, 0x45, 0x4e, 0x45, 0x46,
	0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49,
	0x41, 0x52, 0x59, 0x42, 0x41, 0x4e, 0x4b, 0x4e, 0x41, 0x4d, 0x45, 0x12, 0x38, 0x0a, 0x18, 0x42,
	0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f,
	0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x42,
	0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x42, 0x41, 0x4e, 0x4b, 0x41, 0x44,
	0x44, 0x52, 0x45, 0x53, 0x53, 0x12, 0x32, 0x0a, 0x15, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43,
	0x49, 0x41, 0x52, 0x59, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x43, 0x49, 0x54, 0x59, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52,
	0x59, 0x42, 0x41, 0x4e, 0x4b, 0x43, 0x49, 0x54, 0x59, 0x12, 0x41, 0x0a, 0x1d, 0x42, 0x45, 0x4e,
	0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1a, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x42, 0x41, 0x4e,
	0x4b, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x2e, 0x0a, 0x13,
	0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x42, 0x45, 0x4e, 0x45, 0x46,
	0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x12, 0x32, 0x0a, 0x15,
	0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4e,
	0x55, 0x4d, 0x42, 0x45, 0x52, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x42, 0x45, 0x4e,
	0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x49, 0x44, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52,
	0x12, 0x29, 0x0a, 0x10, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x42, 0x45, 0x4e, 0x45,
	0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x4e, 0x41, 0x4d, 0x45, 0x12, 0x2f, 0x0a, 0x13, 0x42,
	0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45,
	0x53, 0x53, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49,
	0x43, 0x49, 0x41, 0x52, 0x59, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x12, 0x29, 0x0a, 0x10,
	0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x43, 0x49, 0x54, 0x59,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49,
	0x41, 0x52, 0x59, 0x43, 0x49, 0x54, 0x59, 0x12, 0x3c, 0x0a, 0x1a, 0x42, 0x45, 0x4e, 0x45, 0x46,
	0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x4e, 0x43, 0x45, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x42, 0x45, 0x4e,
	0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x53, 0x54, 0x41, 0x54, 0x45, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x4e, 0x43, 0x45, 0x12, 0x31, 0x0a, 0x14, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43,
	0x49, 0x41, 0x52, 0x59, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x43, 0x4f, 0x44, 0x45, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59,
	0x50, 0x4f, 0x53, 0x54, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x38, 0x0a, 0x18, 0x42, 0x45, 0x4e, 0x45,
	0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x42, 0x45, 0x4e, 0x45,
	0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x43, 0x4f,
	0x44, 0x45, 0x12, 0x34, 0x0a, 0x16, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52,
	0x59, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x50,
	0x48, 0x4f, 0x4e, 0x45, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x2b, 0x0a, 0x11, 0x42, 0x45, 0x4e, 0x45,
	0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59,
	0x50, 0x48, 0x4f, 0x4e, 0x45, 0x12, 0x2b, 0x0a, 0x11, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43,
	0x49, 0x41, 0x52, 0x59, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x12, 0x29, 0x0a, 0x10, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x42, 0x45,
	0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x54, 0x59, 0x50, 0x45, 0x12, 0x2d, 0x0a,
	0x12, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x47, 0x45, 0x4e,
	0x44, 0x45, 0x52, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x42, 0x45, 0x4e, 0x45, 0x46,
	0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x12, 0x39, 0x0a, 0x18,
	0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x4c, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x53, 0x48, 0x49, 0x50, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x52, 0x59, 0x52, 0x45, 0x4c, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x48, 0x49, 0x50, 0x12, 0x21, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45,
	0x4e, 0x43, 0x59, 0x5f, 0x4f, 0x52, 0x49, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43,
	0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x4f, 0x52, 0x49, 0x12, 0x24, 0x0a, 0x0e, 0x53, 0x45,
	0x4e, 0x44, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45,
	0x12, 0x28, 0x0a, 0x10, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x55,
	0x4d, 0x42, 0x45, 0x52, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x45, 0x4e, 0x44,
	0x45, 0x52, 0x49, 0x44, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x12, 0x2f, 0x0a, 0x14, 0x53, 0x45,
	0x4e, 0x44, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x44, 0x41,
	0x54, 0x45, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52,
	0x49, 0x44, 0x49, 0x53, 0x53, 0x55, 0x45, 0x44, 0x41, 0x54, 0x45, 0x12, 0x33, 0x0a, 0x16, 0x53,
	0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44,
	0x5f, 0x44, 0x41, 0x54, 0x45, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x45, 0x4e,
	0x44, 0x45, 0x52, 0x49, 0x44, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x44, 0x41, 0x54, 0x45,
	0x12, 0x1f, 0x0a, 0x0b, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x4e, 0x41, 0x4d,
	0x45, 0x12, 0x25, 0x0a, 0x0e, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x52,
	0x45, 0x53, 0x53, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x45, 0x4e, 0x44, 0x45,
	0x52, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x12, 0x1f, 0x0a, 0x0b, 0x53, 0x45, 0x4e, 0x44,
	0x45, 0x52, 0x5f, 0x43, 0x49, 0x54, 0x59, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53,
	0x45, 0x4e, 0x44, 0x45, 0x52, 0x43, 0x49, 0x54, 0x59, 0x12, 0x32, 0x0a, 0x15, 0x53, 0x45, 0x4e,
	0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x4e,
	0x43, 0x45, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x4e, 0x43, 0x45, 0x12, 0x27, 0x0a,
	0x0f, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x43, 0x4f, 0x44, 0x45,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x50, 0x4f,
	0x53, 0x54, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x2e, 0x0a, 0x13, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52,
	0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x18, 0x34, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x52, 0x59, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x1d, 0x0a, 0x0a, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52,
	0x5f, 0x44, 0x4f, 0x42, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x45, 0x4e, 0x44,
	0x45, 0x52, 0x44, 0x4f, 0x42, 0x12, 0x2a, 0x0a, 0x11, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f,
	0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x43, 0x4f, 0x44,
	0x45, 0x12, 0x21, 0x0a, 0x0c, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x48, 0x4f, 0x4e,
	0x45, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x50,
	0x48, 0x4f, 0x4e, 0x45, 0x12, 0x21, 0x0a, 0x0c, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x45,
	0x4d, 0x41, 0x49, 0x4c, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x45, 0x4e, 0x44,
	0x45, 0x52, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x12, 0x1f, 0x0a, 0x0b, 0x53, 0x45, 0x4e, 0x44, 0x45,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x45,
	0x4e, 0x44, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x12, 0x31, 0x0a, 0x15, 0x53, 0x45, 0x4e, 0x44,
	0x45, 0x52, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x46, 0x55, 0x4e,
	0x44, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x4f, 0x46, 0x46, 0x55, 0x4e, 0x44, 0x12, 0x2a, 0x0a, 0x11, 0x53,
	0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x42, 0x49, 0x52, 0x54, 0x48, 0x5f, 0x43, 0x49, 0x54, 0x59,
	0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x42, 0x49,
	0x52, 0x54, 0x48, 0x43, 0x49, 0x54, 0x59, 0x12, 0x27, 0x0a, 0x0f, 0x53, 0x45, 0x4e, 0x44, 0x45,
	0x52, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x12, 0x30, 0x0a, 0x14, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x42, 0x49, 0x52, 0x54, 0x48,
	0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x42, 0x49, 0x52, 0x54, 0x48, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x52, 0x59, 0x12, 0x32, 0x0a, 0x15, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x57, 0x4f, 0x52,
	0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x18, 0x3e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x47,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x12, 0x2b, 0x0a, 0x11, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52,
	0x5f, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x18, 0x3f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x12, 0x3c, 0x0a, 0x1a, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x49,
	0x54, 0x49, 0x5a, 0x45, 0x4e, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52,
	0x59, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x43,
	0x49, 0x54, 0x49, 0x5a, 0x45, 0x4e, 0x53, 0x48, 0x49, 0x50, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52,
	0x59, 0x12, 0x23, 0x0a, 0x0d, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x47, 0x45, 0x4e, 0x44,
	0x45, 0x52, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52,
	0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x12, 0x2f, 0x0a, 0x13, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x55, 0x52, 0x50, 0x4f, 0x53, 0x45, 0x18, 0x42, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x50, 0x55, 0x52, 0x50, 0x4f, 0x53, 0x45, 0x12, 0x21, 0x0a, 0x0c, 0x49, 0x4e, 0x54, 0x45, 0x4e,
	0x44, 0x45, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x49,
	0x4e, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x55, 0x53, 0x45, 0x12, 0x23, 0x0a, 0x0d, 0x54, 0x49,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x18, 0x44, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x45, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6b,
	0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x47, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x6d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x64,
	0x65, 0x62, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x48, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x64, 0x65, 0x62, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x65, 0x62, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x64, 0x65, 0x62, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x69, 0x61,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x62, 0x69, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x49, 0x44, 0x18, 0x49, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x62, 0x69,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x66,
	0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x4a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x4d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x4e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72,
	0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x4f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x5d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61,
	0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x62, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x62, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x76, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x60, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x76, 0x63, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x8f, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x11,
	0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x72, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x47, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x77, 0x69, 0x66, 0x74,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x69,
	0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xfc, 0x02, 0x0a, 0x19, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x77, 0x69, 0x66, 0x74, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x74,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x12, 0x38,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x67, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0xa1, 0x01, 0x0a, 0x1d, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x6d, 0x69, 0x74,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x77, 0x69, 0x66, 0x74, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9e, 0x01, 0x0a, 0x1e, 0x53, 0x61, 0x76, 0x65, 0x52,
	0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x77,
	0x69, 0x66, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x94, 0x04, 0x0a, 0x1d, 0x52, 0x65, 0x6d, 0x69,
	0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32, 0x39, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x70, 0x65, 0x72, 0x20, 0x70, 0x61,
	0x67, 0x65, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x20, 0x27, 0x2d, 0x31, 0x27, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x55, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x41, 0x92,
	0x41, 0x3e, 0x32, 0x3c, 0x70, 0x61, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20,
	0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x20, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x27, 0x2d, 0x31, 0x27, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x61, 0x67, 0x65,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x31, 0x0a, 0x03, 0x64, 0x69,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x77, 0x69, 0x66, 0x74, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x64, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e,
	0x73, 0x77, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52,
	0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x1a, 0x80, 0x01, 0x0a, 0x1c,
	0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x16,
	0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x62, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x72, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x22, 0xe4,
	0x01, 0x0a, 0x1e, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x77, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x44, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x77, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x41, 0x0a, 0x1f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x22, 0xa7, 0x01, 0x0a, 0x20, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x3f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x73, 0x77, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x41, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x69,
	0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x49, 0x44, 0x22, 0x66, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x27, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x22, 0x53, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0x80, 0x01, 0x0a, 0x0a,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x6c,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x72, 0x61, 0x66, 0x74, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x10, 0x03, 0x12,
	0x0c, 0x0a, 0x08, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10,
	0x06, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x07, 0x2a, 0x49,
	0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x6c,
	0x6c, 0x53, 0x74, 0x65, 0x70, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x61, 0x6b, 0x65, 0x72,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x10, 0x04, 0x2a, 0x22, 0x0a, 0x0d, 0x53, 0x6f, 0x72,
	0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45,
	0x53, 0x43, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x01, 0x42, 0x06, 0x5a,
	0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_swift_payload_proto_rawDescOnce sync.Once
	file_swift_payload_proto_rawDescData = file_swift_payload_proto_rawDesc
)

func file_swift_payload_proto_rawDescGZIP() []byte {
	file_swift_payload_proto_rawDescOnce.Do(func() {
		file_swift_payload_proto_rawDescData = protoimpl.X.CompressGZIP(file_swift_payload_proto_rawDescData)
	})
	return file_swift_payload_proto_rawDescData
}

var file_swift_payload_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_swift_payload_proto_msgTypes = make([]protoimpl.MessageInfo, 75)
var file_swift_payload_proto_goTypes = []interface{}{
	(TaskStatus)(0),                                                    // 0: swift.service.v1.TaskStatus
	(TaskStep)(0),                                                      // 1: swift.service.v1.TaskStep
	(SortDirection)(0),                                                 // 2: swift.service.v1.SortDirection
	(FileTaskListRequest_Formats)(0),                                   // 3: swift.service.v1.FileTaskListRequest.Formats
	(*PaginationResponse)(nil),                                         // 4: swift.service.v1.PaginationResponse
	(*Task)(nil),                                                       // 5: swift.service.v1.Task
	(*SwiftRemittanceRequest)(nil),                                     // 6: swift.service.v1.SwiftRemittanceRequest
	(*SwiftRemittance)(nil),                                            // 7: swift.service.v1.SwiftRemittance
	(*SwiftRemittanceResponse)(nil),                                    // 8: swift.service.v1.SwiftRemittanceResponse
	(*CounterpartTransactionRequest)(nil),                              // 9: swift.service.v1.CounterpartTransactionRequest
	(*CounterpartTransaction)(nil),                                     // 10: swift.service.v1.CounterpartTransaction
	(*CounterpartTransactionResponse)(nil),                             // 11: swift.service.v1.CounterpartTransactionResponse
	(*SwiftRoutePartnerRequest)(nil),                                   // 12: swift.service.v1.SwiftRoutePartnerRequest
	(*KursBRIEFXRequest)(nil),                                          // 13: swift.service.v1.KursBRIEFXRequest
	(*BRIGateBRIefxRequest)(nil),                                       // 14: swift.service.v1.BRIGateBRIefxRequest
	(*BRIGateBRIefxData)(nil),                                          // 15: swift.service.v1.BRIGateBRIefxData
	(*BRIGateBRIefxResponse)(nil),                                      // 16: swift.service.v1.BRIGateBRIefxResponse
	(*BRIGateBRIefxAddons)(nil),                                        // 17: swift.service.v1.BRIGateBRIefxAddons
	(*BRIGateBRIefxAddonsResponse)(nil),                                // 18: swift.service.v1.BRIGateBRIefxAddonsResponse
	(*KursBRIEFX)(nil),                                                 // 19: swift.service.v1.KursBRIEFX
	(*KursBRIEFXResponse)(nil),                                         // 20: swift.service.v1.KursBRIEFXResponse
	(*SwiftRoutePartnerData)(nil),                                      // 21: swift.service.v1.SwiftRoutePartnerData
	(*EnumeratedValue)(nil),                                            // 22: swift.service.v1.enumeratedValue
	(*SwiftRoutePartner)(nil),                                          // 23: swift.service.v1.SwiftRoutePartner
	(*SwiftRoutePartnerResponse)(nil),                                  // 24: swift.service.v1.SwiftRoutePartnerResponse
	(*SwiftStatusTransactionRequest)(nil),                              // 25: swift.service.v1.SwiftStatusTransactionRequest
	(*SwiftStatusTransactionData)(nil),                                 // 26: swift.service.v1.SwiftStatusTransactionData
	(*SwiftStatusTransaction)(nil),                                     // 27: swift.service.v1.SwiftStatusTransaction
	(*SwiftStatusTransactionResponse)(nil),                             // 28: swift.service.v1.SwiftStatusTransactionResponse
	(*TaskCreateRequest)(nil),                                          // 29: swift.service.v1.TaskCreateRequest
	(*TaskDetail)(nil),                                                 // 30: swift.service.v1.TaskDetail
	(*TaskData)(nil),                                                   // 31: swift.service.v1.TaskData
	(*TaskCreateResponse)(nil),                                         // 32: swift.service.v1.TaskCreateResponse
	(*TaskActionRequest)(nil),                                          // 33: swift.service.v1.TaskActionRequest
	(*TaskActionResponse)(nil),                                         // 34: swift.service.v1.TaskActionResponse
	(*TaskListRequest)(nil),                                            // 35: swift.service.v1.TaskListRequest
	(*FileTaskListRequest)(nil),                                        // 36: swift.service.v1.FileTaskListRequest
	(*TaskListResponse)(nil),                                           // 37: swift.service.v1.TaskListResponse
	(*TaskDetailRequest)(nil),                                          // 38: swift.service.v1.TaskDetailRequest
	(*TaskDetailResponse)(nil),                                         // 39: swift.service.v1.TaskDetailResponse
	(*DataListRequest)(nil),                                            // 40: swift.service.v1.DataListRequest
	(*DataListDownloadRequest)(nil),                                    // 41: swift.service.v1.DataListDownloadRequest
	(*DataListResponse)(nil),                                           // 42: swift.service.v1.DataListResponse
	(*DataDetailRequest)(nil),                                          // 43: swift.service.v1.DataDetailRequest
	(*DataDetailResponse)(nil),                                         // 44: swift.service.v1.DataDetailResponse
	(*SaveDataRequest)(nil),                                            // 45: swift.service.v1.SaveDataRequest
	(*SaveDataResponse)(nil),                                           // 46: swift.service.v1.SaveDataResponse
	(*BRIGateHardTokenValidationRequest)(nil),                          // 47: swift.service.v1.BRIGateHardTokenValidationRequest
	(*BRIGateHardTokenValidation)(nil),                                 // 48: swift.service.v1.BRIGateHardTokenValidation
	(*BRIGateHardTokenValidationResponse)(nil),                         // 49: swift.service.v1.BRIGateHardTokenValidationResponse
	(*NostroPriorityRequest)(nil),                                      // 50: swift.service.v1.NostroPriorityRequest
	(*NostroPriorityResponse)(nil),                                     // 51: swift.service.v1.NostroPriorityResponse
	(*TransactionsCheckerResponse)(nil),                                // 52: swift.service.v1.TransactionsCheckerResponse
	(*TransactionsCheckerSingelRequest)(nil),                           // 53: swift.service.v1.TransactionsCheckerSingelRequest
	(*TransactionsCheckerSingelResponse)(nil),                          // 54: swift.service.v1.TransactionsCheckerSingelResponse
	(*TransactionsCheckerBulkRequest)(nil),                             // 55: swift.service.v1.TransactionsCheckerBulkRequest
	(*TransactionsCheckerBulkResponse)(nil),                            // 56: swift.service.v1.TransactionsCheckerBulkResponse
	(*DelayedHandlerRes)(nil),                                          // 57: swift.service.v1.DelayedHandlerRes
	(*ExecTransactionReq)(nil),                                         // 58: swift.service.v1.ExecTransactionReq
	(*ExecTransactionRes)(nil),                                         // 59: swift.service.v1.ExecTransactionRes
	(*ApprovalCacheReq)(nil),                                           // 60: swift.service.v1.ApprovalCacheReq
	(*ApprovalCacheRes)(nil),                                           // 61: swift.service.v1.ApprovalCacheRes
	(*SwiftNotificationData)(nil),                                      // 62: swift.service.v1.SwiftNotificationData
	(*RemittanceTransactionTemplateData)(nil),                          // 63: swift.service.v1.RemittanceTransactionTemplateData
	(*RemittanceTemplateData)(nil),                                     // 64: swift.service.v1.RemittanceTemplateData
	(*RemittanceTemplateDataRes)(nil),                                  // 65: swift.service.v1.RemittanceTemplateDataRes
	(*SaveRemittanceTemplateRequest)(nil),                              // 66: swift.service.v1.SaveRemittanceTemplateRequest
	(*SaveRemittanceTemplateResponse)(nil),                             // 67: swift.service.v1.SaveRemittanceTemplateResponse
	(*RemittanceTemplateListRequest)(nil),                              // 68: swift.service.v1.RemittanceTemplateListRequest
	(*RemittanceTemplateListResponse)(nil),                             // 69: swift.service.v1.RemittanceTemplateListResponse
	(*DetailRemittanceTemplateRequest)(nil),                            // 70: swift.service.v1.DetailRemittanceTemplateRequest
	(*DetailRemittanceTemplateResponse)(nil),                           // 71: swift.service.v1.DetailRemittanceTemplateResponse
	(*DeleteRemittanceTemplateRequest)(nil),                            // 72: swift.service.v1.DeleteRemittanceTemplateRequest
	(*DeleteRemittanceTemplateResponse)(nil),                           // 73: swift.service.v1.DeleteRemittanceTemplateResponse
	(*DeleteTaskReq)(nil),                                              // 74: swift.service.v1.DeleteTaskReq
	(*DeleteTaskRes)(nil),                                              // 75: swift.service.v1.DeleteTaskRes
	(*TaskListRequest_TaskListFilter)(nil),                             // 76: swift.service.v1.TaskListRequest.TaskListFilter
	(*DataListRequest_DataListFilter)(nil),                             // 77: swift.service.v1.DataListRequest.DataListFilter
	(*RemittanceTemplateListRequest_RemittanceTemplateListFilter)(nil), // 78: swift.service.v1.RemittanceTemplateListRequest.RemittanceTemplateListFilter
	(*timestamppb.Timestamp)(nil),                                      // 79: google.protobuf.Timestamp
	(*RemittanceTransaction)(nil),                                      // 80: swift.service.v1.RemittanceTransaction
	(*RemittanceTemplate)(nil),                                         // 81: swift.service.v1.RemittanceTemplate
}
var file_swift_payload_proto_depIdxs = []int32{
	79, // 0: swift.service.v1.Task.createdAt:type_name -> google.protobuf.Timestamp
	79, // 1: swift.service.v1.Task.updatedAt:type_name -> google.protobuf.Timestamp
	7,  // 2: swift.service.v1.SwiftRemittanceResponse.data:type_name -> swift.service.v1.SwiftRemittance
	10, // 3: swift.service.v1.CounterpartTransactionResponse.data:type_name -> swift.service.v1.CounterpartTransaction
	15, // 4: swift.service.v1.BRIGateBRIefxResponse.responseData:type_name -> swift.service.v1.BRIGateBRIefxData
	17, // 5: swift.service.v1.BRIGateBRIefxAddonsResponse.data:type_name -> swift.service.v1.BRIGateBRIefxAddons
	19, // 6: swift.service.v1.KursBRIEFXResponse.data:type_name -> swift.service.v1.KursBRIEFX
	21, // 7: swift.service.v1.SwiftRoutePartner.DATA:type_name -> swift.service.v1.SwiftRoutePartnerData
	23, // 8: swift.service.v1.SwiftRoutePartnerResponse.data:type_name -> swift.service.v1.SwiftRoutePartner
	26, // 9: swift.service.v1.SwiftStatusTransaction.DATA:type_name -> swift.service.v1.SwiftStatusTransactionData
	27, // 10: swift.service.v1.SwiftStatusTransactionResponse.data:type_name -> swift.service.v1.SwiftStatusTransaction
	80, // 11: swift.service.v1.TaskCreateRequest.data:type_name -> swift.service.v1.RemittanceTransaction
	21, // 12: swift.service.v1.TaskCreateRequest.selectedRoutePartner:type_name -> swift.service.v1.SwiftRoutePartnerData
	12, // 13: swift.service.v1.TaskDetail.route_partner_req:type_name -> swift.service.v1.SwiftRoutePartnerRequest
	21, // 14: swift.service.v1.TaskDetail.route_partner_data:type_name -> swift.service.v1.SwiftRoutePartnerData
	6,  // 15: swift.service.v1.TaskDetail.swift_remittance_req:type_name -> swift.service.v1.SwiftRemittanceRequest
	7,  // 16: swift.service.v1.TaskDetail.swift_remittance_data:type_name -> swift.service.v1.SwiftRemittance
	80, // 17: swift.service.v1.TaskData.transaction:type_name -> swift.service.v1.RemittanceTransaction
	5,  // 18: swift.service.v1.TaskData.task:type_name -> swift.service.v1.Task
	30, // 19: swift.service.v1.TaskData.detail:type_name -> swift.service.v1.TaskDetail
	31, // 20: swift.service.v1.TaskCreateResponse.data:type_name -> swift.service.v1.TaskData
	31, // 21: swift.service.v1.TaskActionResponse.data:type_name -> swift.service.v1.TaskData
	0,  // 22: swift.service.v1.TaskListRequest.status:type_name -> swift.service.v1.TaskStatus
	1,  // 23: swift.service.v1.TaskListRequest.step:type_name -> swift.service.v1.TaskStep
	2,  // 24: swift.service.v1.TaskListRequest.dir:type_name -> swift.service.v1.SortDirection
	76, // 25: swift.service.v1.TaskListRequest.filter:type_name -> swift.service.v1.TaskListRequest.TaskListFilter
	0,  // 26: swift.service.v1.FileTaskListRequest.status:type_name -> swift.service.v1.TaskStatus
	1,  // 27: swift.service.v1.FileTaskListRequest.step:type_name -> swift.service.v1.TaskStep
	2,  // 28: swift.service.v1.FileTaskListRequest.dir:type_name -> swift.service.v1.SortDirection
	76, // 29: swift.service.v1.FileTaskListRequest.filter:type_name -> swift.service.v1.TaskListRequest.TaskListFilter
	3,  // 30: swift.service.v1.FileTaskListRequest.fileFormat:type_name -> swift.service.v1.FileTaskListRequest.Formats
	31, // 31: swift.service.v1.TaskListResponse.data:type_name -> swift.service.v1.TaskData
	4,  // 32: swift.service.v1.TaskListResponse.pagination:type_name -> swift.service.v1.PaginationResponse
	31, // 33: swift.service.v1.TaskDetailResponse.data:type_name -> swift.service.v1.TaskData
	2,  // 34: swift.service.v1.DataListRequest.dir:type_name -> swift.service.v1.SortDirection
	77, // 35: swift.service.v1.DataListRequest.filter:type_name -> swift.service.v1.DataListRequest.DataListFilter
	2,  // 36: swift.service.v1.DataListDownloadRequest.dir:type_name -> swift.service.v1.SortDirection
	77, // 37: swift.service.v1.DataListDownloadRequest.filter:type_name -> swift.service.v1.DataListRequest.DataListFilter
	3,  // 38: swift.service.v1.DataListDownloadRequest.fileFormat:type_name -> swift.service.v1.FileTaskListRequest.Formats
	80, // 39: swift.service.v1.DataListResponse.data:type_name -> swift.service.v1.RemittanceTransaction
	4,  // 40: swift.service.v1.DataListResponse.pagination:type_name -> swift.service.v1.PaginationResponse
	80, // 41: swift.service.v1.DataDetailResponse.data:type_name -> swift.service.v1.RemittanceTransaction
	80, // 42: swift.service.v1.SaveDataRequest.data:type_name -> swift.service.v1.RemittanceTransaction
	80, // 43: swift.service.v1.SaveDataResponse.data:type_name -> swift.service.v1.RemittanceTransaction
	48, // 44: swift.service.v1.BRIGateHardTokenValidationResponse.data:type_name -> swift.service.v1.BRIGateHardTokenValidation
	52, // 45: swift.service.v1.TransactionsCheckerSingelResponse.data:type_name -> swift.service.v1.TransactionsCheckerResponse
	52, // 46: swift.service.v1.TransactionsCheckerBulkResponse.additional:type_name -> swift.service.v1.TransactionsCheckerResponse
	80, // 47: swift.service.v1.TransactionsCheckerBulkResponse.data:type_name -> swift.service.v1.RemittanceTransaction
	63, // 48: swift.service.v1.RemittanceTemplateData.data:type_name -> swift.service.v1.RemittanceTransactionTemplateData
	80, // 49: swift.service.v1.RemittanceTemplateDataRes.data:type_name -> swift.service.v1.RemittanceTransaction
	79, // 50: swift.service.v1.RemittanceTemplateDataRes.createdAt:type_name -> google.protobuf.Timestamp
	79, // 51: swift.service.v1.RemittanceTemplateDataRes.updatedAt:type_name -> google.protobuf.Timestamp
	64, // 52: swift.service.v1.SaveRemittanceTemplateRequest.data:type_name -> swift.service.v1.RemittanceTemplateData
	81, // 53: swift.service.v1.SaveRemittanceTemplateResponse.data:type_name -> swift.service.v1.RemittanceTemplate
	2,  // 54: swift.service.v1.RemittanceTemplateListRequest.dir:type_name -> swift.service.v1.SortDirection
	78, // 55: swift.service.v1.RemittanceTemplateListRequest.filter:type_name -> swift.service.v1.RemittanceTemplateListRequest.RemittanceTemplateListFilter
	81, // 56: swift.service.v1.RemittanceTemplateListResponse.data:type_name -> swift.service.v1.RemittanceTemplate
	4,  // 57: swift.service.v1.RemittanceTemplateListResponse.pagination:type_name -> swift.service.v1.PaginationResponse
	65, // 58: swift.service.v1.DetailRemittanceTemplateResponse.data:type_name -> swift.service.v1.RemittanceTemplateDataRes
	59, // [59:59] is the sub-list for method output_type
	59, // [59:59] is the sub-list for method input_type
	59, // [59:59] is the sub-list for extension type_name
	59, // [59:59] is the sub-list for extension extendee
	0,  // [0:59] is the sub-list for field type_name
}

func init() { file_swift_payload_proto_init() }
func file_swift_payload_proto_init() {
	if File_swift_payload_proto != nil {
		return
	}
	file_swift_gorm_db_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_swift_payload_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaginationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwiftRemittanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwiftRemittance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwiftRemittanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CounterpartTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CounterpartTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CounterpartTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwiftRoutePartnerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KursBRIEFXRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRIGateBRIefxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRIGateBRIefxData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRIGateBRIefxResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRIGateBRIefxAddons); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRIGateBRIefxAddonsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KursBRIEFX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KursBRIEFXResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwiftRoutePartnerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumeratedValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwiftRoutePartner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwiftRoutePartnerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwiftStatusTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwiftStatusTransactionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwiftStatusTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwiftStatusTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskActionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileTaskListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataListDownloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRIGateHardTokenValidationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRIGateHardTokenValidation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRIGateHardTokenValidationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NostroPriorityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NostroPriorityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionsCheckerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionsCheckerSingelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionsCheckerSingelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionsCheckerBulkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionsCheckerBulkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelayedHandlerRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecTransactionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecTransactionRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalCacheReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalCacheRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwiftNotificationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemittanceTransactionTemplateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemittanceTemplateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemittanceTemplateDataRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveRemittanceTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveRemittanceTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemittanceTemplateListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemittanceTemplateListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailRemittanceTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailRemittanceTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRemittanceTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRemittanceTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTaskRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskListRequest_TaskListFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataListRequest_DataListFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swift_payload_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemittanceTemplateListRequest_RemittanceTemplateListFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_swift_payload_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   75,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_swift_payload_proto_goTypes,
		DependencyIndexes: file_swift_payload_proto_depIdxs,
		EnumInfos:         file_swift_payload_proto_enumTypes,
		MessageInfos:      file_swift_payload_proto_msgTypes,
	}.Build()
	File_swift_payload_proto = out.File
	file_swift_payload_proto_rawDesc = nil
	file_swift_payload_proto_goTypes = nil
	file_swift_payload_proto_depIdxs = nil
}
