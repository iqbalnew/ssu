// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: swift_api.proto

package pb

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SwiftServiceClient is the client API for SwiftService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SwiftServiceClient interface {
	TaskCreate(ctx context.Context, in *TaskCreateRequest, opts ...grpc.CallOption) (*TaskCreateResponse, error)
	TaskAction(ctx context.Context, in *TaskActionRequest, opts ...grpc.CallOption) (*TaskActionResponse, error)
	TaskList(ctx context.Context, in *TaskListRequest, opts ...grpc.CallOption) (*TaskListResponse, error)
	DownloadTaskList(ctx context.Context, in *FileTaskListRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	TaskDetail(ctx context.Context, in *TaskDetailRequest, opts ...grpc.CallOption) (*TaskDetailResponse, error)
	DataList(ctx context.Context, in *DataListRequest, opts ...grpc.CallOption) (*DataListResponse, error)
	DataListDownload(ctx context.Context, in *DataListDownloadRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	DataDetail(ctx context.Context, in *DataDetailRequest, opts ...grpc.CallOption) (*DataDetailResponse, error)
	SaveData(ctx context.Context, in *SaveDataRequest, opts ...grpc.CallOption) (*SaveDataResponse, error)
	SwiftRemittance_ESB(ctx context.Context, in *SwiftRemittanceRequest, opts ...grpc.CallOption) (*SwiftRemittanceResponse, error)
	CounterpartTransaction_ESB(ctx context.Context, in *CounterpartTransactionRequest, opts ...grpc.CallOption) (*CounterpartTransactionResponse, error)
	SwiftRoutePartner_ESB(ctx context.Context, in *SwiftRoutePartnerRequest, opts ...grpc.CallOption) (*SwiftRoutePartnerResponse, error)
	KursBRIEFX_ESB(ctx context.Context, in *KursBRIEFXRequest, opts ...grpc.CallOption) (*KursBRIEFXResponse, error)
	BRIGate_KursBRIEFX(ctx context.Context, in *KursBRIEFXRequest, opts ...grpc.CallOption) (*BRIGateBRIefxAddonsResponse, error)
	ExchangeRate(ctx context.Context, in *KursBRIEFXRequest, opts ...grpc.CallOption) (*KursBRIEFXResponse, error)
	GetNostroPriority(ctx context.Context, in *NostroPriorityRequest, opts ...grpc.CallOption) (*NostroPriorityResponse, error)
	SwiftStatusTransaction_ESB(ctx context.Context, in *SwiftStatusTransactionRequest, opts ...grpc.CallOption) (*SwiftStatusTransactionResponse, error)
	BRIGateHardTokenValidation(ctx context.Context, in *BRIGateHardTokenValidationRequest, opts ...grpc.CallOption) (*BRIGateHardTokenValidationResponse, error)
	TransactionsCheckerSingel(ctx context.Context, in *TransactionsCheckerSingelRequest, opts ...grpc.CallOption) (*TransactionsCheckerSingelResponse, error)
	TransactionsCheckers(ctx context.Context, in *TransactionsCheckerBulkRequest, opts ...grpc.CallOption) (*TransactionsCheckerBulkResponse, error)
	DelayedHandler(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DelayedHandlerRes, error)
	ExecTransaction(ctx context.Context, in *ExecTransactionReq, opts ...grpc.CallOption) (*ExecTransactionRes, error)
	IsApprovalExist(ctx context.Context, in *ApprovalCacheReq, opts ...grpc.CallOption) (*ApprovalCacheRes, error)
}

type swiftServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSwiftServiceClient(cc grpc.ClientConnInterface) SwiftServiceClient {
	return &swiftServiceClient{cc}
}

func (c *swiftServiceClient) TaskCreate(ctx context.Context, in *TaskCreateRequest, opts ...grpc.CallOption) (*TaskCreateResponse, error) {
	out := new(TaskCreateResponse)
	err := c.cc.Invoke(ctx, "/swift.service.v1.SwiftService/TaskCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swiftServiceClient) TaskAction(ctx context.Context, in *TaskActionRequest, opts ...grpc.CallOption) (*TaskActionResponse, error) {
	out := new(TaskActionResponse)
	err := c.cc.Invoke(ctx, "/swift.service.v1.SwiftService/TaskAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swiftServiceClient) TaskList(ctx context.Context, in *TaskListRequest, opts ...grpc.CallOption) (*TaskListResponse, error) {
	out := new(TaskListResponse)
	err := c.cc.Invoke(ctx, "/swift.service.v1.SwiftService/TaskList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swiftServiceClient) DownloadTaskList(ctx context.Context, in *FileTaskListRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/swift.service.v1.SwiftService/DownloadTaskList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swiftServiceClient) TaskDetail(ctx context.Context, in *TaskDetailRequest, opts ...grpc.CallOption) (*TaskDetailResponse, error) {
	out := new(TaskDetailResponse)
	err := c.cc.Invoke(ctx, "/swift.service.v1.SwiftService/TaskDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swiftServiceClient) DataList(ctx context.Context, in *DataListRequest, opts ...grpc.CallOption) (*DataListResponse, error) {
	out := new(DataListResponse)
	err := c.cc.Invoke(ctx, "/swift.service.v1.SwiftService/DataList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swiftServiceClient) DataListDownload(ctx context.Context, in *DataListDownloadRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/swift.service.v1.SwiftService/DataListDownload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swiftServiceClient) DataDetail(ctx context.Context, in *DataDetailRequest, opts ...grpc.CallOption) (*DataDetailResponse, error) {
	out := new(DataDetailResponse)
	err := c.cc.Invoke(ctx, "/swift.service.v1.SwiftService/DataDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swiftServiceClient) SaveData(ctx context.Context, in *SaveDataRequest, opts ...grpc.CallOption) (*SaveDataResponse, error) {
	out := new(SaveDataResponse)
	err := c.cc.Invoke(ctx, "/swift.service.v1.SwiftService/SaveData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swiftServiceClient) SwiftRemittance_ESB(ctx context.Context, in *SwiftRemittanceRequest, opts ...grpc.CallOption) (*SwiftRemittanceResponse, error) {
	out := new(SwiftRemittanceResponse)
	err := c.cc.Invoke(ctx, "/swift.service.v1.SwiftService/SwiftRemittance_ESB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swiftServiceClient) CounterpartTransaction_ESB(ctx context.Context, in *CounterpartTransactionRequest, opts ...grpc.CallOption) (*CounterpartTransactionResponse, error) {
	out := new(CounterpartTransactionResponse)
	err := c.cc.Invoke(ctx, "/swift.service.v1.SwiftService/CounterpartTransaction_ESB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swiftServiceClient) SwiftRoutePartner_ESB(ctx context.Context, in *SwiftRoutePartnerRequest, opts ...grpc.CallOption) (*SwiftRoutePartnerResponse, error) {
	out := new(SwiftRoutePartnerResponse)
	err := c.cc.Invoke(ctx, "/swift.service.v1.SwiftService/SwiftRoutePartner_ESB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swiftServiceClient) KursBRIEFX_ESB(ctx context.Context, in *KursBRIEFXRequest, opts ...grpc.CallOption) (*KursBRIEFXResponse, error) {
	out := new(KursBRIEFXResponse)
	err := c.cc.Invoke(ctx, "/swift.service.v1.SwiftService/KursBRIEFX_ESB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swiftServiceClient) BRIGate_KursBRIEFX(ctx context.Context, in *KursBRIEFXRequest, opts ...grpc.CallOption) (*BRIGateBRIefxAddonsResponse, error) {
	out := new(BRIGateBRIefxAddonsResponse)
	err := c.cc.Invoke(ctx, "/swift.service.v1.SwiftService/BRIGate_KursBRIEFX", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swiftServiceClient) ExchangeRate(ctx context.Context, in *KursBRIEFXRequest, opts ...grpc.CallOption) (*KursBRIEFXResponse, error) {
	out := new(KursBRIEFXResponse)
	err := c.cc.Invoke(ctx, "/swift.service.v1.SwiftService/ExchangeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swiftServiceClient) GetNostroPriority(ctx context.Context, in *NostroPriorityRequest, opts ...grpc.CallOption) (*NostroPriorityResponse, error) {
	out := new(NostroPriorityResponse)
	err := c.cc.Invoke(ctx, "/swift.service.v1.SwiftService/GetNostroPriority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swiftServiceClient) SwiftStatusTransaction_ESB(ctx context.Context, in *SwiftStatusTransactionRequest, opts ...grpc.CallOption) (*SwiftStatusTransactionResponse, error) {
	out := new(SwiftStatusTransactionResponse)
	err := c.cc.Invoke(ctx, "/swift.service.v1.SwiftService/SwiftStatusTransaction_ESB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swiftServiceClient) BRIGateHardTokenValidation(ctx context.Context, in *BRIGateHardTokenValidationRequest, opts ...grpc.CallOption) (*BRIGateHardTokenValidationResponse, error) {
	out := new(BRIGateHardTokenValidationResponse)
	err := c.cc.Invoke(ctx, "/swift.service.v1.SwiftService/BRIGateHardTokenValidation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swiftServiceClient) TransactionsCheckerSingel(ctx context.Context, in *TransactionsCheckerSingelRequest, opts ...grpc.CallOption) (*TransactionsCheckerSingelResponse, error) {
	out := new(TransactionsCheckerSingelResponse)
	err := c.cc.Invoke(ctx, "/swift.service.v1.SwiftService/TransactionsCheckerSingel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swiftServiceClient) TransactionsCheckers(ctx context.Context, in *TransactionsCheckerBulkRequest, opts ...grpc.CallOption) (*TransactionsCheckerBulkResponse, error) {
	out := new(TransactionsCheckerBulkResponse)
	err := c.cc.Invoke(ctx, "/swift.service.v1.SwiftService/TransactionsCheckers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swiftServiceClient) DelayedHandler(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DelayedHandlerRes, error) {
	out := new(DelayedHandlerRes)
	err := c.cc.Invoke(ctx, "/swift.service.v1.SwiftService/DelayedHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swiftServiceClient) ExecTransaction(ctx context.Context, in *ExecTransactionReq, opts ...grpc.CallOption) (*ExecTransactionRes, error) {
	out := new(ExecTransactionRes)
	err := c.cc.Invoke(ctx, "/swift.service.v1.SwiftService/ExecTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swiftServiceClient) IsApprovalExist(ctx context.Context, in *ApprovalCacheReq, opts ...grpc.CallOption) (*ApprovalCacheRes, error) {
	out := new(ApprovalCacheRes)
	err := c.cc.Invoke(ctx, "/swift.service.v1.SwiftService/IsApprovalExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SwiftServiceServer is the server API for SwiftService service.
// All implementations must embed UnimplementedSwiftServiceServer
// for forward compatibility
type SwiftServiceServer interface {
	TaskCreate(context.Context, *TaskCreateRequest) (*TaskCreateResponse, error)
	TaskAction(context.Context, *TaskActionRequest) (*TaskActionResponse, error)
	TaskList(context.Context, *TaskListRequest) (*TaskListResponse, error)
	DownloadTaskList(context.Context, *FileTaskListRequest) (*httpbody.HttpBody, error)
	TaskDetail(context.Context, *TaskDetailRequest) (*TaskDetailResponse, error)
	DataList(context.Context, *DataListRequest) (*DataListResponse, error)
	DataListDownload(context.Context, *DataListDownloadRequest) (*httpbody.HttpBody, error)
	DataDetail(context.Context, *DataDetailRequest) (*DataDetailResponse, error)
	SaveData(context.Context, *SaveDataRequest) (*SaveDataResponse, error)
	SwiftRemittance_ESB(context.Context, *SwiftRemittanceRequest) (*SwiftRemittanceResponse, error)
	CounterpartTransaction_ESB(context.Context, *CounterpartTransactionRequest) (*CounterpartTransactionResponse, error)
	SwiftRoutePartner_ESB(context.Context, *SwiftRoutePartnerRequest) (*SwiftRoutePartnerResponse, error)
	KursBRIEFX_ESB(context.Context, *KursBRIEFXRequest) (*KursBRIEFXResponse, error)
	BRIGate_KursBRIEFX(context.Context, *KursBRIEFXRequest) (*BRIGateBRIefxAddonsResponse, error)
	ExchangeRate(context.Context, *KursBRIEFXRequest) (*KursBRIEFXResponse, error)
	GetNostroPriority(context.Context, *NostroPriorityRequest) (*NostroPriorityResponse, error)
	SwiftStatusTransaction_ESB(context.Context, *SwiftStatusTransactionRequest) (*SwiftStatusTransactionResponse, error)
	BRIGateHardTokenValidation(context.Context, *BRIGateHardTokenValidationRequest) (*BRIGateHardTokenValidationResponse, error)
	TransactionsCheckerSingel(context.Context, *TransactionsCheckerSingelRequest) (*TransactionsCheckerSingelResponse, error)
	TransactionsCheckers(context.Context, *TransactionsCheckerBulkRequest) (*TransactionsCheckerBulkResponse, error)
	DelayedHandler(context.Context, *Empty) (*DelayedHandlerRes, error)
	ExecTransaction(context.Context, *ExecTransactionReq) (*ExecTransactionRes, error)
	IsApprovalExist(context.Context, *ApprovalCacheReq) (*ApprovalCacheRes, error)
	mustEmbedUnimplementedSwiftServiceServer()
}

// UnimplementedSwiftServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSwiftServiceServer struct {
}

func (UnimplementedSwiftServiceServer) TaskCreate(context.Context, *TaskCreateRequest) (*TaskCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskCreate not implemented")
}
func (UnimplementedSwiftServiceServer) TaskAction(context.Context, *TaskActionRequest) (*TaskActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskAction not implemented")
}
func (UnimplementedSwiftServiceServer) TaskList(context.Context, *TaskListRequest) (*TaskListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskList not implemented")
}
func (UnimplementedSwiftServiceServer) DownloadTaskList(context.Context, *FileTaskListRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadTaskList not implemented")
}
func (UnimplementedSwiftServiceServer) TaskDetail(context.Context, *TaskDetailRequest) (*TaskDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskDetail not implemented")
}
func (UnimplementedSwiftServiceServer) DataList(context.Context, *DataListRequest) (*DataListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataList not implemented")
}
func (UnimplementedSwiftServiceServer) DataListDownload(context.Context, *DataListDownloadRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataListDownload not implemented")
}
func (UnimplementedSwiftServiceServer) DataDetail(context.Context, *DataDetailRequest) (*DataDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataDetail not implemented")
}
func (UnimplementedSwiftServiceServer) SaveData(context.Context, *SaveDataRequest) (*SaveDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveData not implemented")
}
func (UnimplementedSwiftServiceServer) SwiftRemittance_ESB(context.Context, *SwiftRemittanceRequest) (*SwiftRemittanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwiftRemittance_ESB not implemented")
}
func (UnimplementedSwiftServiceServer) CounterpartTransaction_ESB(context.Context, *CounterpartTransactionRequest) (*CounterpartTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CounterpartTransaction_ESB not implemented")
}
func (UnimplementedSwiftServiceServer) SwiftRoutePartner_ESB(context.Context, *SwiftRoutePartnerRequest) (*SwiftRoutePartnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwiftRoutePartner_ESB not implemented")
}
func (UnimplementedSwiftServiceServer) KursBRIEFX_ESB(context.Context, *KursBRIEFXRequest) (*KursBRIEFXResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KursBRIEFX_ESB not implemented")
}
func (UnimplementedSwiftServiceServer) BRIGate_KursBRIEFX(context.Context, *KursBRIEFXRequest) (*BRIGateBRIefxAddonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BRIGate_KursBRIEFX not implemented")
}
func (UnimplementedSwiftServiceServer) ExchangeRate(context.Context, *KursBRIEFXRequest) (*KursBRIEFXResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeRate not implemented")
}
func (UnimplementedSwiftServiceServer) GetNostroPriority(context.Context, *NostroPriorityRequest) (*NostroPriorityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNostroPriority not implemented")
}
func (UnimplementedSwiftServiceServer) SwiftStatusTransaction_ESB(context.Context, *SwiftStatusTransactionRequest) (*SwiftStatusTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwiftStatusTransaction_ESB not implemented")
}
func (UnimplementedSwiftServiceServer) BRIGateHardTokenValidation(context.Context, *BRIGateHardTokenValidationRequest) (*BRIGateHardTokenValidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BRIGateHardTokenValidation not implemented")
}
func (UnimplementedSwiftServiceServer) TransactionsCheckerSingel(context.Context, *TransactionsCheckerSingelRequest) (*TransactionsCheckerSingelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionsCheckerSingel not implemented")
}
func (UnimplementedSwiftServiceServer) TransactionsCheckers(context.Context, *TransactionsCheckerBulkRequest) (*TransactionsCheckerBulkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionsCheckers not implemented")
}
func (UnimplementedSwiftServiceServer) DelayedHandler(context.Context, *Empty) (*DelayedHandlerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelayedHandler not implemented")
}
func (UnimplementedSwiftServiceServer) ExecTransaction(context.Context, *ExecTransactionReq) (*ExecTransactionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecTransaction not implemented")
}
func (UnimplementedSwiftServiceServer) IsApprovalExist(context.Context, *ApprovalCacheReq) (*ApprovalCacheRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsApprovalExist not implemented")
}
func (UnimplementedSwiftServiceServer) mustEmbedUnimplementedSwiftServiceServer() {}

// UnsafeSwiftServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SwiftServiceServer will
// result in compilation errors.
type UnsafeSwiftServiceServer interface {
	mustEmbedUnimplementedSwiftServiceServer()
}

func RegisterSwiftServiceServer(s grpc.ServiceRegistrar, srv SwiftServiceServer) {
	s.RegisterService(&SwiftService_ServiceDesc, srv)
}

func _SwiftService_TaskCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwiftServiceServer).TaskCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swift.service.v1.SwiftService/TaskCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwiftServiceServer).TaskCreate(ctx, req.(*TaskCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwiftService_TaskAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwiftServiceServer).TaskAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swift.service.v1.SwiftService/TaskAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwiftServiceServer).TaskAction(ctx, req.(*TaskActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwiftService_TaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwiftServiceServer).TaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swift.service.v1.SwiftService/TaskList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwiftServiceServer).TaskList(ctx, req.(*TaskListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwiftService_DownloadTaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileTaskListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwiftServiceServer).DownloadTaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swift.service.v1.SwiftService/DownloadTaskList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwiftServiceServer).DownloadTaskList(ctx, req.(*FileTaskListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwiftService_TaskDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwiftServiceServer).TaskDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swift.service.v1.SwiftService/TaskDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwiftServiceServer).TaskDetail(ctx, req.(*TaskDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwiftService_DataList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwiftServiceServer).DataList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swift.service.v1.SwiftService/DataList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwiftServiceServer).DataList(ctx, req.(*DataListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwiftService_DataListDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataListDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwiftServiceServer).DataListDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swift.service.v1.SwiftService/DataListDownload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwiftServiceServer).DataListDownload(ctx, req.(*DataListDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwiftService_DataDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwiftServiceServer).DataDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swift.service.v1.SwiftService/DataDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwiftServiceServer).DataDetail(ctx, req.(*DataDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwiftService_SaveData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwiftServiceServer).SaveData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swift.service.v1.SwiftService/SaveData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwiftServiceServer).SaveData(ctx, req.(*SaveDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwiftService_SwiftRemittance_ESB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwiftRemittanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwiftServiceServer).SwiftRemittance_ESB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swift.service.v1.SwiftService/SwiftRemittance_ESB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwiftServiceServer).SwiftRemittance_ESB(ctx, req.(*SwiftRemittanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwiftService_CounterpartTransaction_ESB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CounterpartTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwiftServiceServer).CounterpartTransaction_ESB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swift.service.v1.SwiftService/CounterpartTransaction_ESB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwiftServiceServer).CounterpartTransaction_ESB(ctx, req.(*CounterpartTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwiftService_SwiftRoutePartner_ESB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwiftRoutePartnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwiftServiceServer).SwiftRoutePartner_ESB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swift.service.v1.SwiftService/SwiftRoutePartner_ESB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwiftServiceServer).SwiftRoutePartner_ESB(ctx, req.(*SwiftRoutePartnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwiftService_KursBRIEFX_ESB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KursBRIEFXRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwiftServiceServer).KursBRIEFX_ESB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swift.service.v1.SwiftService/KursBRIEFX_ESB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwiftServiceServer).KursBRIEFX_ESB(ctx, req.(*KursBRIEFXRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwiftService_BRIGate_KursBRIEFX_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KursBRIEFXRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwiftServiceServer).BRIGate_KursBRIEFX(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swift.service.v1.SwiftService/BRIGate_KursBRIEFX",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwiftServiceServer).BRIGate_KursBRIEFX(ctx, req.(*KursBRIEFXRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwiftService_ExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KursBRIEFXRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwiftServiceServer).ExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swift.service.v1.SwiftService/ExchangeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwiftServiceServer).ExchangeRate(ctx, req.(*KursBRIEFXRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwiftService_GetNostroPriority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NostroPriorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwiftServiceServer).GetNostroPriority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swift.service.v1.SwiftService/GetNostroPriority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwiftServiceServer).GetNostroPriority(ctx, req.(*NostroPriorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwiftService_SwiftStatusTransaction_ESB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwiftStatusTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwiftServiceServer).SwiftStatusTransaction_ESB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swift.service.v1.SwiftService/SwiftStatusTransaction_ESB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwiftServiceServer).SwiftStatusTransaction_ESB(ctx, req.(*SwiftStatusTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwiftService_BRIGateHardTokenValidation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BRIGateHardTokenValidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwiftServiceServer).BRIGateHardTokenValidation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swift.service.v1.SwiftService/BRIGateHardTokenValidation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwiftServiceServer).BRIGateHardTokenValidation(ctx, req.(*BRIGateHardTokenValidationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwiftService_TransactionsCheckerSingel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionsCheckerSingelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwiftServiceServer).TransactionsCheckerSingel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swift.service.v1.SwiftService/TransactionsCheckerSingel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwiftServiceServer).TransactionsCheckerSingel(ctx, req.(*TransactionsCheckerSingelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwiftService_TransactionsCheckers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionsCheckerBulkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwiftServiceServer).TransactionsCheckers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swift.service.v1.SwiftService/TransactionsCheckers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwiftServiceServer).TransactionsCheckers(ctx, req.(*TransactionsCheckerBulkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwiftService_DelayedHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwiftServiceServer).DelayedHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swift.service.v1.SwiftService/DelayedHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwiftServiceServer).DelayedHandler(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwiftService_ExecTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecTransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwiftServiceServer).ExecTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swift.service.v1.SwiftService/ExecTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwiftServiceServer).ExecTransaction(ctx, req.(*ExecTransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwiftService_IsApprovalExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApprovalCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwiftServiceServer).IsApprovalExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swift.service.v1.SwiftService/IsApprovalExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwiftServiceServer).IsApprovalExist(ctx, req.(*ApprovalCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SwiftService_ServiceDesc is the grpc.ServiceDesc for SwiftService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SwiftService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "swift.service.v1.SwiftService",
	HandlerType: (*SwiftServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TaskCreate",
			Handler:    _SwiftService_TaskCreate_Handler,
		},
		{
			MethodName: "TaskAction",
			Handler:    _SwiftService_TaskAction_Handler,
		},
		{
			MethodName: "TaskList",
			Handler:    _SwiftService_TaskList_Handler,
		},
		{
			MethodName: "DownloadTaskList",
			Handler:    _SwiftService_DownloadTaskList_Handler,
		},
		{
			MethodName: "TaskDetail",
			Handler:    _SwiftService_TaskDetail_Handler,
		},
		{
			MethodName: "DataList",
			Handler:    _SwiftService_DataList_Handler,
		},
		{
			MethodName: "DataListDownload",
			Handler:    _SwiftService_DataListDownload_Handler,
		},
		{
			MethodName: "DataDetail",
			Handler:    _SwiftService_DataDetail_Handler,
		},
		{
			MethodName: "SaveData",
			Handler:    _SwiftService_SaveData_Handler,
		},
		{
			MethodName: "SwiftRemittance_ESB",
			Handler:    _SwiftService_SwiftRemittance_ESB_Handler,
		},
		{
			MethodName: "CounterpartTransaction_ESB",
			Handler:    _SwiftService_CounterpartTransaction_ESB_Handler,
		},
		{
			MethodName: "SwiftRoutePartner_ESB",
			Handler:    _SwiftService_SwiftRoutePartner_ESB_Handler,
		},
		{
			MethodName: "KursBRIEFX_ESB",
			Handler:    _SwiftService_KursBRIEFX_ESB_Handler,
		},
		{
			MethodName: "BRIGate_KursBRIEFX",
			Handler:    _SwiftService_BRIGate_KursBRIEFX_Handler,
		},
		{
			MethodName: "ExchangeRate",
			Handler:    _SwiftService_ExchangeRate_Handler,
		},
		{
			MethodName: "GetNostroPriority",
			Handler:    _SwiftService_GetNostroPriority_Handler,
		},
		{
			MethodName: "SwiftStatusTransaction_ESB",
			Handler:    _SwiftService_SwiftStatusTransaction_ESB_Handler,
		},
		{
			MethodName: "BRIGateHardTokenValidation",
			Handler:    _SwiftService_BRIGateHardTokenValidation_Handler,
		},
		{
			MethodName: "TransactionsCheckerSingel",
			Handler:    _SwiftService_TransactionsCheckerSingel_Handler,
		},
		{
			MethodName: "TransactionsCheckers",
			Handler:    _SwiftService_TransactionsCheckers_Handler,
		},
		{
			MethodName: "DelayedHandler",
			Handler:    _SwiftService_DelayedHandler_Handler,
		},
		{
			MethodName: "ExecTransaction",
			Handler:    _SwiftService_ExecTransaction_Handler,
		},
		{
			MethodName: "IsApprovalExist",
			Handler:    _SwiftService_IsApprovalExist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "swift_api.proto",
}
