// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: company_payload.proto

package pb

import (
	fmt "fmt"
	math "math"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *LoginRequest) Validate() error {
	return nil
}
func (this *LoginResponse) Validate() error {
	return nil
}
func (this *HealthCheckResponse) Validate() error {
	return nil
}
func (this *Empty) Validate() error {
	return nil
}
func (this *InvalidKeyError) Validate() error {
	return nil
}
func (this *JWTTokenResponse) Validate() error {
	return nil
}
func (this *ListRequest) Validate() error {
	return nil
}
func (this *ListCompanyResponse) Validate() error {
	for _, item := range this.Data {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
			}
		}
	}
	return nil
}
func (this *CompanyResponse) Validate() error {
	return nil
}
func (this *ListCurrencyResponse) Validate() error {
	for _, item := range this.Data {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
			}
		}
	}
	return nil
}
func (this *ListCompanyGroupResponse) Validate() error {
	for _, item := range this.Data {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
			}
		}
	}
	return nil
}
func (this *CompanyGroupTask) Validate() error {
	return nil
}
func (this *CreateCompanyGroupTask) Validate() error {
	if this.CompanyGroupRequest != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.CompanyGroupRequest); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("CompanyGroupRequest", err)
		}
	}
	if this.Task != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Task); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Task", err)
		}
	}
	return nil
}
func (this *ListCompanyGroupTaskResponse) Validate() error {
	for _, item := range this.Data {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
			}
		}
	}
	return nil
}
func (this *CreateCompanyGroupTaskRequest) Validate() error {
	if this.Data != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Data); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
		}
	}
	return nil
}
func (this *CreateCompanyGroupRequest) Validate() error {
	if this.CompanyGroup != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.CompanyGroup); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("CompanyGroup", err)
		}
	}
	for _, item := range this.GroupLimit {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("GroupLimit", err)
			}
		}
	}
	for _, item := range this.CompanyLimit {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("CompanyLimit", err)
			}
		}
	}
	for _, item := range this.GroupSubsidiaries {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("GroupSubsidiaries", err)
			}
		}
	}
	if this.CompanyWorkflow != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.CompanyWorkflow); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("CompanyWorkflow", err)
		}
	}
	return nil
}
func (this *CreateCompanyLimitRequest) Validate() error {
	return nil
}
func (this *CreateGroupLimitRequest) Validate() error {
	return nil
}
func (this *CreateCompanyWorkflowRequest) Validate() error {
	return nil
}
func (this *CreateGroupSubsdiaryRequest) Validate() error {
	return nil
}
func (this *CreateCompanyGroupResponse) Validate() error {
	return nil
}
